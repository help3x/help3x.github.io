{"version":3,"file":"static/webpack/static\\development\\pages\\post.js.9957d0714b76c26f2228.hot-update.js","sources":["webpack:///./pages/post.js"],"sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport Link from 'next/link';\nimport getConfig from 'next/config'\nimport { withRouter, } from 'next/router'\n\nimport Page from '../layouts/main'\n\n\nconst ContentBase = props => {\n  console.log(\"ContentBase Props\", props);\n  let datePublishedToDsiplay = \"\";\n  if (props.pageContent.datePublished) {\n    if (props.pageContent.datePublished.getFullYear) {\n      datePublishedToDsiplay = `${props.pageContent.datePublished.getFullYear()}.${(\"00\" + props.pageContent.datePublished.getMonth() + 1).slice(-2)}.${(\"00\" + props.pageContent.datePublished.getDate()).slice(-2)}`;\n    }\n  }\n\n  let datePublishedToValue = \"\";\n  if (props.pageContent.datePublished) {\n    if (props.pageContent.datePublished.getFullYear) {\n      datePublishedToValue = `${props.pageContent.datePublished.getFullYear()}-${(\"00\" + props.pageContent.datePublished.getMonth() + 1).slice(-2)}-${(\"00\" + props.pageContent.datePublished.getDate()).slice(-2)}T${(\"00\" + props.pageContent.datePublished.getHours()).slice(-2)}:${(\"00\" + props.pageContent.datePublished.getMinutes()).slice(-2)}+09:00`;\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Head>\n        <title>{ props.pageContent.title } &#x007c; { props.siteName }</title>\n        <meta name=\"description\" content={ props.pageContent.description } />\n      </Head>\n      <article className=\"p2 md-pt3 md-px3 bg-white\">\n        <header className=\"article-header mb3\">\n          <h1>{ props.pageContent.title }</h1>\n          <div className=\"flex flex-wrap\">\n            <div>{/*<span className=\"pr1\">投稿日:</span>*/}<time className=\"\" dateTime={ datePublishedToValue }>{ datePublishedToDsiplay }</time></div>\n          </div>\n        </header>\n        <div className=\"article-body\" dangerouslySetInnerHTML={{ __html: props.pageContent.body }} />\n      </article>\n      <style jsx global>{`\n        .article-header h1 {\n          font-size: 2rem;\n          line-height: 1.25;\n        }\n        .article-body h2 {\n          font-size: 1.5rem;\n          line-height: 1.3333333333;\n          margin-top: 3rem;\n          padding-top: 1rem;\n          padding-bottom: 1rem;\n          border-top: solid 1px #000;\n          border-bottom: solid 1px #000;\n        }\n        .article-body h3 {\n          font-size: 1.25rem;\n          line-height: 1.4;\n          padding-top: .75rem;\n        }\n        .article-body h4 {\n          font-size: 1rem;\n          line-height: 1.5;\n          padding-top: 1rem;\n        }\n        .article-body h5 {\n          font-size: .875rem;\n          line-height: 1.5714285714;\n          padding-top: 1.125rem;\n        }\n        .article-body h6 {\n          font-size: .75rem;\n          line-height: 1.6666666667;\n          padding-top: 1.25rem;\n        }\n        .article-body div.sourceCode {\n          margin: 0;\n          margin-left: -1rem;\n          margin-right: -1rem;\n          margin-bottom: 1rem;\n          padding: 0;\n        }\n        .article-body pre.sourceCode {\n          madgin: 0;\n          padding: 1rem;\n          overflow-x: auto;\n          color: #333;\n          background: #f8f8f8;\n          border: 1px solid #ddd;\n          border-radius: .25rem;\n          font-size: .75rem;\n          max-width: 100%;\n        }\n        .article-body code.sourceCode,\n        pre > code {\n          background-color: transparent;\n          padding: 0;\n        }\n        @media all and (min-width: 50em) {\n          .article-body div.sourceCode {\n            margin-left: -2rem;\n            margin-right: -2rem;\n          }\n          .article-body pre.sourceCode {\n            padding-left: 2rem;\n            padding-right: 2rem;\n          }\n        }\n      `}</style>\n    </React.Fragment>\n  );\n};\n\n\n// 子コンポーネントでは使えないらしい ... ドキュメントに記載あり。\nContentBase.getInitialProps = async (props) => {\n  console.log(\"ContentBase getInitialProps\", props);\n  return { };\n};\n\n\nconst Content = withRouter(ContentBase);\n\n\nconst Post = props => {\n  const { publicRuntimeConfig, } = getConfig();\n\n  return (\n    <Page>\n      <Content\n        pageContent={ props.pageContent }\n        { ...publicRuntimeConfig } />\n    </Page>\n  );\n};\n\nPost.getInitialProps = async (props) => {\n  console.log(\"Post getInitialProps\", props);\n  // クエリパラメータから記事のIDを割り出す\n  const { id } = props.query;\n  const postId = (id || \"\").substr(0, 1) === \"/\" ? id.substr(1) : (id || \"\");\n\n  // 記事の内容を取得する\n  const data = {\n    pageContent: {},\n  };\n\n  const pageContent = data.pageContent;\n  if (postId === \"1st\") {\n//     pageContent.datePublished = new Date(2019, 0, 7, 15, 34);\n//     pageContent.dateModified = new Date(2019, 0, 20, 14, 31);\n    pageContent.datePublished = \"2019-01-07T15:34+09:00\";\n    pageContent.dateModified = \"2019-01-20T14:31+09:00\";\n    pageContent.description = \"\";\n    pageContent.title = \"String\";\n    pageContent.body = \n      \"<h2>String.prototype.substring()</h2>\\r\\n\" +\n      \"<p><strong><code>substring()</code></strong>メソッドは、0 インデックスやそのほか、または文字列の最後までの String オブジェクトの部分集合を返します。</p>\\r\\n\" + \n      \"<h2>String.prototype.codePointAt()</h2>\\r\\n\" + \n      \"<p><strong><code>codePointAt()</code></strong>メソッドは、Unicode ポイント値である負でない整数を返します。</p>\";\n  } else if (postId === \"2nd\") {\n    pageContent.datePublished = \"2019-01-15T16:39+09:00\";\n    pageContent.title = \"JavaScript で\\u000d\\u000a\\u0061\\u0062\\u0063\\u005c\";\n    pageContent.body = \"<p>\\u0061\\u0062\\u0063\\u000d\\u000aを\\u0022<code>dangerouslySetInnerHTML</code>\\u0022に指定したとき、どのように表示されるか。確かめてください。</p><h2 id=\\u0022実施環境\\u0022>実施環境</h2>\\u000d\\u000a<ul>\\u000d\\u000a<li>Windows 7 Professional Service Pack 1</li>\\u000d\\u000a<li>node v8.9.4</li>\\u000d\\u000a<li>npm 4.0.5</li>\\u000d\\u000a<li>create-react-app 1.5.2</li>\\u000d\\u000a</ul>\\u000d\\u000a<h2 id=\\u0022はじめに\\u0022>はじめに</h2>\\u000d\\u000a<p>React : Webの見た目を作ることに特化したJavaScriptライブラリ。 Viewに関連する機能だけを持つ。</p>\\u000d\\u000a<p>Flux : 次のように、データの流れを一方向に限定する設計パターン。 不整合が発生しにくい仕組みになっている。</p>\\u000d\\u000a<pre><code>                  ┌─── Action ←─┐\\u000d\\u000a                  ↓                  ｜\\u000d\\u000a    Action → Dispatcher → Store → View\\u000d\\u000a\\u000d\\u000a&lt;!-- --&gt;\\u000d\\u000a\\u000d\\u000a1. View はユーザーの入力から Action を作成する。\\u000d\\u000a2. Action を Dispatch することで Store にデータを保存する。\\u000d\\u000a3. Store を View に反映する。\\u000d\\u000a</code></pre>\\u000d\\u000a<p>Redux : Fluxアーキテクチャの実装。</p>\\u000d\\u000a<!--\\u000d\\u000a- View\\u000d\\u000a- Action\\u000d\\u000a- Store\\u000d\\u000a- Dispatcher\\u000d\\u000a- Reducer\\u000d\\u000a    状態を変化させるための関数です。Actionの内容によって既存の状態を変化させます。\\u000d\\u000a-->\\u000d\\u000a\\u000d\\u000a<p>オブジェクトや配列の操作を行う場合は、基本的には参照渡しでなく値のコピーを渡します。 参照を切る方法としてES2015で標準化された<code>Object.assign()</code>メソッドを使ってもよいです。</p>\\u000d\\u000a<p>Spread Operatorでも可。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb2\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb2-1\\u0022 title=\\u00221\\u0022><span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb2-2\\u0022 title=\\u00222\\u0022>  ...<span class=\\u0022at\\u0022>state</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb2-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022dt\\u0022>status</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022dv\\u0022>1</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb2-4\\u0022 title=\\u00224\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb3\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb3-1\\u0022 title=\\u00221\\u0022><span class=\\u0022cf\\u0022>return</span> <span class=\\u0022va\\u0022>Object</span>.<span class=\\u0022at\\u0022>assign</span>(<span class=\\u0022op\\u0022>{},</span> state<span class=\\u0022op\\u0022>,</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb3-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022dt\\u0022>state</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022dv\\u0022>1</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb3-3\\u0022 title=\\u00223\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<h2 id=\\u0022create-react-app\\u0022>Create React App</h2>\\u000d\\u000a<p><a href=\\u0022https://github.com/facebook/create-react-app\\u0022>GitHub - facebook/create-react-app</a></p>\\u000d\\u000a<h2 id=\\u0022環境構築\\u0022>環境構築</h2>\\u000d\\u000a<h3 id=\\u0022nodejsのインストール\\u0022>node.jsのインストール</h3>\\u000d\\u000a<p>割愛します。</p>\\u000d\\u000a<p>Windowsユーザーであれば nodist を入れればよいかと。</p>\\u000d\\u000a<h3 id=\\u0022create-react-app-のインストール\\u0022>create-react-app のインストール</h3>\\u000d\\u000a<p>作業フォルダを作りその中にインストールします。</p>\\u000d\\u000a<pre><code>&gt; mkdir react1st &amp; cd react1st\\u000d\\u000a&gt; npm install create-react-app\\u000d\\u000a</code></pre>\\u000d\\u000a<h3 id=\\u0022アプリケーションの作成\\u0022>アプリケーションの作成</h3>\\u000d\\u000a<p><code>create-react-app</code>コマンドを使ってアプリケーションを作成します。</p>\\u000d\\u000a<p>構文 : <code>create-react-app &lt;application-name&gt;</code></p>\\u000d\\u000a<p><code>my-app</code>アプリケーションを作成してみます。</p>\\u000d\\u000a<pre><code>&gt; .\\u005cnode_modules\\u005c.bin\\u005ccreate-react-app my-app\\u000d\\u000a</code></pre>\\u000d\\u000a<p>作成されたアプリケーションの構成は以下のようになっています。</p>\\u000d\\u000a<pre><code>.\\u000d\\u000a+---node_modules\\u000d\\u000a+---public\\u000d\\u000a|   +---favicon.ico\\u000d\\u000a|   +---index.html\\u000d\\u000a|   `---manifest.json\\u000d\\u000a+---src\\u000d\\u000a|   +---App.css\\u000d\\u000a|   +---App.js\\u000d\\u000a|   +---App.test.js\\u000d\\u000a|   +---index.css\\u000d\\u000a|   +---index.js\\u000d\\u000a|   +---logo.svg\\u000d\\u000a|   `---registerServiceWorker.js\\u000d\\u000a+---.gitignore\\u000d\\u000a+---package.json\\u000d\\u000a`---README.md\\u000d\\u000a</code></pre>\\u000d\\u000a<h3 id=\\u0022開発モードでアプリケーションを起動\\u0022>開発モードでアプリケーションを起動</h3>\\u000d\\u000a<p>アプリケーションのルートフォルダ（<code>my-app</code>フォルダ）に移動し、<code>npm start</code>コマンドを実行します。 ブラウザが自動で起動し、アプリケーションが表示されます。 もし、ブラウザが起動しなかったときは自分で起動して<code>http://localhost:3000/</code>にアクセスしてください。</p>\\u000d\\u000a<pre><code>&gt; cd my-app\\u000d\\u000a&gt; npm start\\u000d\\u000a</code></pre>\\u000d\\u000a<h4 id=\\u0022開発モードの機能\\u0022>開発モードの機能</h4>\\u000d\\u000a<p>開発モードは次の動作になります。 開発モードを終了するには、Control＋Cキーを押します。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>ソースコードの変更を監視し、アプリケーションを自動でビルドする。</li>\\u000d\\u000a<li>ブラウザを自動でリロードする。</li>\\u000d\\u000a<li>コンソールにビルドエラーとlintの警告を表示する。</li>\\u000d\\u000a</ul>\\u000d\\u000a<h3 id=\\u0022hello-world-の表示\\u0022>Hello, World! の表示</h3>\\u000d\\u000a<p><code>src\\u005cApp.js</code>ファイルを以下のように編集します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb8\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb8-1\\u0022 title=\\u00221\\u0022><span class=\\u0022op\\u0022>&lt;</span>h1 className<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;App-title&quot;</span><span class=\\u0022op\\u0022>&gt;</span>Welcome to React&lt;/h1<span class=\\u0022op\\u0022>&gt;</span></a></code></pre></div>\\u000d\\u000a<p>↓</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb9\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb9-1\\u0022 title=\\u00221\\u0022><span class=\\u0022op\\u0022>&lt;</span>h1 className<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;App-title&quot;</span><span class=\\u0022op\\u0022>&gt;</span>Hello<span class=\\u0022op\\u0022>,</span> World<span class=\\u0022op\\u0022>!</span>&lt;/h1<span class=\\u0022op\\u0022>&gt;</span></a></code></pre></div>\\u000d\\u000a<p>保存に伴い、ブラウザが自動でリロードされ、修正内容が反映されます。</p>\\u000d\\u000a<h2 id=\\u0022jsx\\u0022>JSX</h2>\\u000d\\u000a<p>JSX : JavaScriptを拡張した言語。 ReactとJSXを一緒に使うことが推奨されています（必須ではない）。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>JSXでは、JavaScriptのなかにHTMLのタグや属性を（ほぼ）同じように書くことができる。</li>\\u000d\\u000a<li>最終的にトランスパイラでJavaScriptに変換して使う。 このとき、JSXに書いたタグは、<code>React.createElement</code>関数の呼び出しに変換される。</li>\\u000d\\u000a</ul>\\u000d\\u000a<p>トランスパイラ : ソースコードを別のソースコードに変換するツールのことです。 BabelのほかCoffeeScriptやTypeScriptなどがあります。</p>\\u000d\\u000a<h3 id=\\u0022jsxの使い方\\u0022>JSXの使い方</h3>\\u000d\\u000a<ul>\\u000d\\u000a<li><p>JSXのタグは<code>React.createElement</code>に変換されるため、Reactのインポートが必要です。</p>\\u000d\\u000a<pre><code>  import React from &#39;react&#39;;\\u000d\\u000a</code></pre></li>\\u000d\\u000a<li><p><code>{}</code>で囲むと式をJSXに埋め込むことができます。</p>\\u000d\\u000a<pre><code>  const fullnames = {\\u000d\\u000a    ryoma: &#39;坂本竜馬&#39;\\u000d\\u000a  };\\u000d\\u000a  const getFullname = nickname =&gt; fullnames[nickname];\\u000d\\u000a  const element = &lt;h1&gt;Hello, {getFullname(&#39;ryoma&#39;)}&lt;/h1&gt;;\\u000d\\u000a</code></pre></li>\\u000d\\u000a</ul>\\u000d\\u000a<h2 id=\\u0022babelのインストール\\u0022>babelのインストール</h2>\\u000d\\u000a<ol>\\u000d\\u000a<li><p>作業ディレクトリを作り、その中に移動します。</p>\\u000d\\u000a<pre><code> &gt; mkdir babel-cli-example &amp; cd babel-cli-example\\u000d\\u000a</code></pre></li>\\u000d\\u000a<li><p>空のpackage.jsonを作ります。</p>\\u000d\\u000a<pre><code> &gt; echo {} &gt; package.json\\u000d\\u000a</code></pre></li>\\u000d\\u000a<li><p>Babel関連のパッケージをインストールします。</p>\\u000d\\u000a<pre><code> &gt; npm install --save-dev babel-cli babel-preset-react\\u000d\\u000a</code></pre></li>\\u000d\\u000a</ol>\\u000d\\u000a<p>babel-cli BabelをCLI上で動作させるためのパッケージです。 Babelを使ったソースコードの変換を行うbabelコマンドと、変換に加えて変換後のソースコードをそのままNode.jsで実行するbabel-nodeコマンドを含んでいます。</p>\\u000d\\u000a<h3 id=\\u0022react向けに変換するコマンド\\u0022>react向けに変換するコマンド</h3>\\u000d\\u000a<pre><code>.\\u005cnode_modules\\u005c.bin\\u005cbabel [Options...] target-file\\u000d\\u000a</code></pre>\\u000d\\u000a<p>e.g.,</p>\\u000d\\u000a<pre><code>.\\u005cnode_modules\\u005c.bin\\u005cbabel --presets=react input.js\\u000d\\u000a</code></pre>\\u000d\\u000a<p>標準出力ではなくファイルに出力するときは、<code>--out-file</code>オプションにファイル名を指定します。</p>\\u000d\\u000a<pre><code>.\\u005cnode_modules\\u005c.bin\\u005cbabel --presets=react input.js --out-file output.js\\u000d\\u000a</code></pre>\\u000d\\u000a<p>webpack : モジュールバンドラー。<br />\\u000d\\u000aES ModulesやNode.jsで利用されているCommonJSのモジュール方式で記述されたソースファイルを束ねて、ブラウザで実行可能な静的なJavaScriptファイルを出力します。</p>\\u000d\\u000a<ol>\\u000d\\u000a<li><p>作業ディレクトリを作り、その中に移動します。</p>\\u000d\\u000a<pre><code> &gt; mkdir webpack-example &amp; cd webpack-example\\u000d\\u000a</code></pre></li>\\u000d\\u000a<li><p>空のpackage.jsonを作ります。</p>\\u000d\\u000a<pre><code> &gt; echo {} &gt; package.json\\u000d\\u000a</code></pre></li>\\u000d\\u000a<li><p>開発に使うパッケージをインストールします（<code>--save-dev</code>オプションをつけます）。</p>\\u000d\\u000a<pre><code> &gt; npm install --save-dev ^\\u000d\\u000a   webpack ^\\u000d\\u000a   webpack-cli ^\\u000d\\u000a   babel-loader ^\\u000d\\u000a   babel-core ^\\u000d\\u000a   babel-preset-react\\u000d\\u000a</code></pre></li>\\u000d\\u000a<li><p>実行に使うパッケージをインストールします（<code>--save</code>オプションをつけます）。</p>\\u000d\\u000a<pre><code> &gt; npm install --save ^\\u000d\\u000a   react ^\\u000d\\u000a   react-dom\\u000d\\u000a</code></pre></li>\\u000d\\u000a</ol>\\u000d\\u000a<!--\\u000d\\u000a--save-devインストール\\u000d\\u000a\\u000d\\u000a- webpack\\u000d\\u000a- webpack-cli\\u000d\\u000a- babel-loader\\u000d\\u000a- babel-core\\u000d\\u000a- babel-preset-react\\u000d\\u000a\\u000d\\u000a--saveインストール\\u000d\\u000a\\u000d\\u000a- react\\u000d\\u000a- react-dom\\u000d\\u000a-->\\u000d\\u000a\\u000d\\u000a<p>Webpackのバージョンを表示</p>\\u000d\\u000a<pre><code>.\\u005cnode_modules\\u005c.bin\\u005cwebpack --version\\u000d\\u000a4.1.0\\u000d\\u000a</code></pre>\\u000d\\u000a<p>Hello.js :</p>\\u000d\\u000a<pre><code>~~~javascript\\u000d\\u000aimport React from &#39;react&#39;;\\u000d\\u000a\\u000d\\u000a// export default function で\\u000d\\u000a// Hello コンポーネントを持っていることを外部に知らせる\\u000d\\u000aexport default function Hello() {\\u000d\\u000a  return &lt;h1&gt;Hello! webpack&lt;/h1&gt;;\\u000d\\u000a}\\u000d\\u000a~~~\\u000d\\u000a</code></pre>\\u000d\\u000a<p>entry.js :</p>\\u000d\\u000a<pre><code>~~~javascript\\u000d\\u000aimport React from &#39;react&#39;;\\u000d\\u000aimport ReactDOM from &#39;react-dom&#39;;\\u000d\\u000aimport Hello from &#39;./Hello&#39;;    // ← Hello.js の読み込み\\u000d\\u000a\\u000d\\u000aReactDOM.render(\\u000d\\u000a  &lt;Hello /&gt;,\\u000d\\u000a  document.getElementById(&#39;root&#39;)\\u000d\\u000a);\\u000d\\u000a~~~\\u000d\\u000a</code></pre>\\u000d\\u000a<p>importのパスが絶対パスでも相対パスでもない場合、webpackはnpmモジュールから読み込みます。</p>\\u000d\\u000a<p>webpack.config.js</p>\\u000d\\u000a<p>webpackの設定ファイルは、JSON、XML、YAMLなどのフォーマットを記述できます。<br />\\u000d\\u000aフォーマットの判別は設定ファイルの拡張子で行います。</p>\\u000d\\u000a<p>JavaScriptであれば、Node.jsのモジュールとして扱うので、<code>module.exports</code>に代入しているオブジェクトが設定ファイルとして利用されます。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb25\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-1\\u0022 title=\\u00221\\u0022><span class=\\u0022va\\u0022>module</span>.<span class=\\u0022at\\u0022>exports</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022co\\u0022>// entryフィールド</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022co\\u0022>// 実行の起点となるファイルの指定</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022dt\\u0022>entry</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&#39;./entry.js&#39;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-5\\u0022 title=\\u00225\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022co\\u0022>// outputフィールド</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022co\\u0022>// 出力に関する設定</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-8\\u0022 title=\\u00228\\u0022>  <span class=\\u0022dt\\u0022>output</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022dt\\u0022>filename</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&#39;output.js&#39;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-11\\u0022 title=\\u002211\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-12\\u0022 title=\\u002212\\u0022>  <span class=\\u0022dt\\u0022>module</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-13\\u0022 title=\\u002213\\u0022>    <span class=\\u0022dt\\u0022>rules</span><span class=\\u0022op\\u0022>:</span> [</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-14\\u0022 title=\\u002214\\u0022>      <span class=\\u0022co\\u0022>// babel-loader の設定</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-15\\u0022 title=\\u002215\\u0022>      <span class=\\u0022co\\u0022>// ファイルごとに適応するLoaderの設定を書く</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-16\\u0022 title=\\u002216\\u0022>      <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-17\\u0022 title=\\u002217\\u0022>        <span class=\\u0022dt\\u0022>loader</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&#39;babel-loader&#39;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-18\\u0022 title=\\u002218\\u0022>        <span class=\\u0022dt\\u0022>test</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022ss\\u0022>/</span><span class=\\u0022sc\\u0022>\\u005c.</span><span class=\\u0022ss\\u0022>js</span><span class=\\u0022sc\\u0022>$</span><span class=\\u0022ss\\u0022>/</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-19\\u0022 title=\\u002219\\u0022>        <span class=\\u0022dt\\u0022>options</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-20\\u0022 title=\\u002220\\u0022>          <span class=\\u0022dt\\u0022>presets</span><span class=\\u0022op\\u0022>:</span> [<span class=\\u0022st\\u0022>&#39;react&#39;</span>]</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-21\\u0022 title=\\u002221\\u0022>        <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-22\\u0022 title=\\u002222\\u0022>      <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-23\\u0022 title=\\u002223\\u0022>    ]</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-24\\u0022 title=\\u002224\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb25-25\\u0022 title=\\u002225\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p>webpackを実行</p>\\u000d\\u000a<p><code>dist\\u005coutput.js</code>が出力されます。</p>\\u000d\\u000a<pre><code>&gt; .\\u005cnode_modules\\u005c.bin\\u005cwebpack --config webpack.config.js\\u000d\\u000a</code></pre>\\u000d\\u000a<p><code>dist\\u005cindex.html</code>を作成します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb27\\u0022><pre class=\\u0022sourceCode html\\u0022><code class=\\u0022sourceCode html\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-1\\u0022 title=\\u00221\\u0022><span class=\\u0022dt\\u0022>&lt;!DOCTYPE </span>html<span class=\\u0022dt\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-2\\u0022 title=\\u00222\\u0022><span class=\\u0022kw\\u0022>&lt;html</span><span class=\\u0022ot\\u0022> lang=</span><span class=\\u0022st\\u0022>&quot;ja&quot;</span><span class=\\u0022kw\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-3\\u0022 title=\\u00223\\u0022><span class=\\u0022kw\\u0022>&lt;head&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-4\\u0022 title=\\u00224\\u0022><span class=\\u0022kw\\u0022>&lt;meta</span><span class=\\u0022ot\\u0022> http-equiv=</span><span class=\\u0022st\\u0022>&quot;X-UA-Compatible&quot;</span><span class=\\u0022ot\\u0022> content=</span><span class=\\u0022st\\u0022>&quot;IE=edge&quot;</span><span class=\\u0022kw\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-5\\u0022 title=\\u00225\\u0022><span class=\\u0022kw\\u0022>&lt;title&gt;</span>webpack test<span class=\\u0022kw\\u0022>&lt;/title&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-6\\u0022 title=\\u00226\\u0022><span class=\\u0022kw\\u0022>&lt;meta</span><span class=\\u0022ot\\u0022> charset=</span><span class=\\u0022st\\u0022>&quot;utf-8&quot;</span><span class=\\u0022kw\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-7\\u0022 title=\\u00227\\u0022><span class=\\u0022kw\\u0022>&lt;meta</span><span class=\\u0022ot\\u0022> name=</span><span class=\\u0022st\\u0022>&quot;viewport&quot;</span><span class=\\u0022ot\\u0022> content=</span><span class=\\u0022st\\u0022>&quot;width=device-width, initial-scale=1&quot;</span><span class=\\u0022kw\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-8\\u0022 title=\\u00228\\u0022><span class=\\u0022kw\\u0022>&lt;/head&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-9\\u0022 title=\\u00229\\u0022><span class=\\u0022kw\\u0022>&lt;body&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022kw\\u0022>&lt;div</span><span class=\\u0022ot\\u0022> id=</span><span class=\\u0022st\\u0022>&quot;root&quot;</span><span class=\\u0022kw\\u0022>&gt;&lt;/div&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-11\\u0022 title=\\u002211\\u0022>  <span class=\\u0022kw\\u0022>&lt;script</span><span class=\\u0022ot\\u0022> src=</span><span class=\\u0022st\\u0022>&quot;./output.js&quot;</span><span class=\\u0022kw\\u0022>&gt;&lt;/script&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-12\\u0022 title=\\u002212\\u0022><span class=\\u0022kw\\u0022>&lt;/body&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb27-13\\u0022 title=\\u002213\\u0022><span class=\\u0022kw\\u0022>&lt;/html&gt;</span></a></code></pre></div>\\u000d\\u000a<p>ブラウザで表示。</p>\\u000d\\u000a<p><code>output.js</code>の読み込みだけで表示されました。 動作に必要なスクリプト（<code>react.min.js</code>や<code>react-dom.min.js</code>）が、webpackによってすべて<code>output.js</code>に束ねられているからです。</p>\\u000d\\u000a<h2 id=\\u0022reactコンポーネント\\u0022>Reactコンポーネント</h2>\\u000d\\u000a<p>create-react-app による開発は、自動作成された「src\\u005cindex.js」や、その中で読み込んでいる「src\\u005cApp.js」を編集して動作を確かめます。 ファイルやフォルダを分けてコードを管理するのもありです。</p>\\u000d\\u000a<h3 id=\\u0022reactコンポーネントの種類\\u0022>Reactコンポーネントの種類</h3>\\u000d\\u000a<h4 id=\\u0022functional-component\\u0022>Functional Component</h4>\\u000d\\u000a<p>関数によって定義されるコンポーネント。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb28\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb28-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb28-2\\u0022 title=\\u00222\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb28-3\\u0022 title=\\u00223\\u0022><span class=\\u0022kw\\u0022>const</span> Hello <span class=\\u0022op\\u0022>=</span> (props) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb28-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>こんにちは、<span class=\\u0022op\\u0022>{</span><span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>name</span><span class=\\u0022op\\u0022>}</span>さん&lt;/div<span class=\\u0022op\\u0022>&gt;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb28-5\\u0022 title=\\u00225\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<h4 id=\\u0022class-component\\u0022>Class Component</h4>\\u000d\\u000a<p>クラスによって定義されるコンポーネント。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb29\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb29-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>class</span> Hello <span class=\\u0022kw\\u0022>extends</span> <span class=\\u0022va\\u0022>React</span>.<span class=\\u0022at\\u0022>Component</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb29-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022at\\u0022>render</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb29-3\\u0022 title=\\u00223\\u0022>    <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>こんにちは、<span class=\\u0022op\\u0022>{</span><span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>name</span><span class=\\u0022op\\u0022>}</span>さん&lt;/div<span class=\\u0022op\\u0022>&gt;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb29-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb29-5\\u0022 title=\\u00225\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<h5 id=\\u0022functional-componentとの違い\\u0022>Functional Componentとの違い</h5>\\u000d\\u000a<ul>\\u000d\\u000a<li><code>React.Component</code>を明示的に継承している。</li>\\u000d\\u000a<li>propsの受け取り方がthis.propsとなっている。</li>\\u000d\\u000a<li>コンポーネントの状態を記録する仕組みがある（state）。</li>\\u000d\\u000a<li>ライフサイクルメソッドという特殊なメソッドが定義できる。</li>\\u000d\\u000a</ul>\\u000d\\u000a<h3 id=\\u0022コンポーネントの再利用\\u0022>コンポーネントの再利用</h3>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb30\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> Hello <span class=\\u0022op\\u0022>=</span> () <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>こんにちは、坂本竜馬さん&lt;/div<span class=\\u0022op\\u0022>&gt;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-3\\u0022 title=\\u00223\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-5\\u0022 title=\\u00225\\u0022><span class=\\u0022va\\u0022>ReactDOM</span>.<span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-7\\u0022 title=\\u00227\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>Hello /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-8\\u0022 title=\\u00228\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>Hello /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>Hello /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-10\\u0022 title=\\u002210\\u0022>  &lt;/div<span class=\\u0022op\\u0022>&gt;,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-11\\u0022 title=\\u002211\\u0022>  <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&quot;root&quot;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb30-12\\u0022 title=\\u002212\\u0022>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>Reactコンポーネント : 設計図のようなもの。 オブジェクト指向でいえば〝クラス〟にあたる。</p>\\u000d\\u000a<p>Reactエレメント : 設計図（Reactコンポーネント）を元に作られた実体のこと。 オブジェクト指向でいえば〝インスタンス〟にあたる。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb31\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// こちらはReactコンポーネント</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-2\\u0022 title=\\u00222\\u0022><span class=\\u0022kw\\u0022>const</span> Hello <span class=\\u0022op\\u0022>=</span> () <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>こんにちは、坂本竜馬さん&lt;/div<span class=\\u0022op\\u0022>&gt;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-4\\u0022 title=\\u00224\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-5\\u0022 title=\\u00225\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-6\\u0022 title=\\u00226\\u0022><span class=\\u0022va\\u0022>ReactDOM</span>.<span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-8\\u0022 title=\\u00228\\u0022>    <span class=\\u0022op\\u0022>{</span> <span class=\\u0022co\\u0022>/* 以下のHello3つはどれも React エレメント */</span> <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>Hello /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-10\\u0022 title=\\u002210\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>Hello /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-11\\u0022 title=\\u002211\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>Hello /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-12\\u0022 title=\\u002212\\u0022>  &lt;/div<span class=\\u0022op\\u0022>&gt;,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-13\\u0022 title=\\u002213\\u0022>  <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&quot;root&quot;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb31-14\\u0022 title=\\u002214\\u0022>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<h3 id=\\u0022fragmentコンポーネント\\u0022>Fragmentコンポーネント</h3>\\u000d\\u000a<p>Reactコンポーネントは単一の親からなる要素しか表現できません。 複数の要素をラップする要素を使ってもよいのですが、これではもともと表現したかったHTML構造にならないことがあります。</p>\\u000d\\u000a<p>React.Fragmentコンポーネントを使うとこの制約をクリアすることができます。</p>\\u000d\\u000a<p>↓ ダメな例</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb32\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb32-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> Hello <span class=\\u0022op\\u0022>=</span> () <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb32-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb32-3\\u0022 title=\\u00223\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>こんにちは&lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb32-4\\u0022 title=\\u00224\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>坂本竜馬さん&lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb32-5\\u0022 title=\\u00225\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb32-6\\u0022 title=\\u00226\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p>↓ ラップして対処する方法</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb33\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb33-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> Hello <span class=\\u0022op\\u0022>=</span> () <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb33-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb33-3\\u0022 title=\\u00223\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb33-4\\u0022 title=\\u00224\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>こんにちは&lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb33-5\\u0022 title=\\u00225\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>坂本竜馬さん&lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb33-6\\u0022 title=\\u00226\\u0022>    &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb33-7\\u0022 title=\\u00227\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb33-8\\u0022 title=\\u00228\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p>↓ <code>React.Fragment</code>で対処する方法</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb34\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb34-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> Hello <span class=\\u0022op\\u0022>=</span> () <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb34-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb34-3\\u0022 title=\\u00223\\u0022>    <span class=\\u0022op\\u0022>&lt;</span><span class=\\u0022va\\u0022>React</span>.<span class=\\u0022at\\u0022>Fragment</span><span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb34-4\\u0022 title=\\u00224\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>こんにちは&lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb34-5\\u0022 title=\\u00225\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>坂本竜馬さん&lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb34-6\\u0022 title=\\u00226\\u0022>    &lt;/<span class=\\u0022va\\u0022>React</span>.<span class=\\u0022at\\u0022>Fragment</span><span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb34-7\\u0022 title=\\u00227\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb34-8\\u0022 title=\\u00228\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<h3 id=\\u0022データの受け渡しprops\\u0022>データの受け渡し（props）</h3>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb35\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> Hello <span class=\\u0022op\\u0022>=</span> (props) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>こんにちは、<span class=\\u0022op\\u0022>{</span><span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>name</span><span class=\\u0022op\\u0022>}</span>さん&lt;/div<span class=\\u0022op\\u0022>&gt;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-3\\u0022 title=\\u00223\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-5\\u0022 title=\\u00225\\u0022><span class=\\u0022va\\u0022>ReactDOM</span>.<span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-7\\u0022 title=\\u00227\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>Hello name<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;A&quot;</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-8\\u0022 title=\\u00228\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>Hello name<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;B&quot;</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>Hello name<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;C&quot;</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-10\\u0022 title=\\u002210\\u0022>  &lt;/div<span class=\\u0022op\\u0022>&gt;,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-11\\u0022 title=\\u002211\\u0022>  <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&quot;root&quot;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb35-12\\u0022 title=\\u002212\\u0022>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>Helloの関数の引数に<code>props</code>を追加します。引数の名前はなんでもいいですが、<code>props</code>にするのが一般的。</p>\\u000d\\u000a<p><code>props</code>の引数にはコンポーネントを使う側で指定した内容が入ります。</p>\\u000d\\u000a<p>上記でいえば、<code>&lt;Hello name=\\u0022A\\u0022 /&gt;</code>として使っているので、<code>props</code>には<code>name</code>というプロパティが追加され、「A」が格納されます。同様に<code>&lt;Hello name=\\u0022B\\u0022 /&gt;</code>であれば、<code>props.name</code>の値は「B」になります。</p>\\u000d\\u000a<p><code>props</code>には文字列、数値、配列、オブジェクト、関数など任意の値を指定できます。 渡す値は<code>{}</code>で囲みます。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb36\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// 文字列</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-2\\u0022 title=\\u00222\\u0022><span class=\\u0022op\\u0022>&lt;</span>Component stringValue<span class=\\u0022op\\u0022>={</span> <span class=\\u0022st\\u0022>&quot;坂本竜馬&quot;</span> <span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-4\\u0022 title=\\u00224\\u0022><span class=\\u0022co\\u0022>// 数値</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-5\\u0022 title=\\u00225\\u0022><span class=\\u0022op\\u0022>&lt;</span>Component numberValue<span class=\\u0022op\\u0022>={</span><span class=\\u0022dv\\u0022>42</span><span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-6\\u0022 title=\\u00226\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-7\\u0022 title=\\u00227\\u0022><span class=\\u0022co\\u0022>// 真偽値</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-8\\u0022 title=\\u00228\\u0022><span class=\\u0022op\\u0022>&lt;</span>Component boolValue<span class=\\u0022op\\u0022>={</span><span class=\\u0022kw\\u0022>true</span><span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-9\\u0022 title=\\u00229\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-10\\u0022 title=\\u002210\\u0022><span class=\\u0022co\\u0022>// 配列</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-11\\u0022 title=\\u002211\\u0022><span class=\\u0022op\\u0022>&lt;</span>Component arrayValue<span class=\\u0022op\\u0022>={</span>[<span class=\\u0022st\\u0022>&quot;Aさん&quot;</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022st\\u0022>&quot;Bさん&quot;</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022st\\u0022>&quot;Cさん&quot;</span>]<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-12\\u0022 title=\\u002212\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-13\\u0022 title=\\u002213\\u0022><span class=\\u0022co\\u0022>// オブジェクト</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-14\\u0022 title=\\u002214\\u0022><span class=\\u0022op\\u0022>&lt;</span>Component objectValue<span class=\\u0022op\\u0022>={{</span><span class=\\u0022dt\\u0022>name</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;Aさん&quot;</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022dt\\u0022>birthDay</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;1836/01/03&quot;</span><span class=\\u0022op\\u0022>}}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-15\\u0022 title=\\u002215\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-16\\u0022 title=\\u002216\\u0022><span class=\\u0022co\\u0022>// 関数</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-17\\u0022 title=\\u002217\\u0022><span class=\\u0022op\\u0022>&lt;</span>Component funcValue<span class=\\u0022op\\u0022>={</span>(name) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022va\\u0022>console</span>.<span class=\\u0022at\\u0022>log</span>(name)<span class=\\u0022op\\u0022>;}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-18\\u0022 title=\\u002218\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-19\\u0022 title=\\u002219\\u0022><span class=\\u0022co\\u0022>// 変数</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-20\\u0022 title=\\u002220\\u0022><span class=\\u0022kw\\u0022>const</span> name <span class=\\u0022op\\u0022>=</span> <span class=\\u0022st\\u0022>&quot;Aさん&quot;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-21\\u0022 title=\\u002221\\u0022><span class=\\u0022op\\u0022>&lt;</span>Component value<span class=\\u0022op\\u0022>={</span>name<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-22\\u0022 title=\\u002222\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-23\\u0022 title=\\u002223\\u0022><span class=\\u0022co\\u0022>// 複数の値も渡せます</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb36-24\\u0022 title=\\u002224\\u0022><span class=\\u0022op\\u0022>&lt;</span>Component name<span class=\\u0022op\\u0022>={</span> <span class=\\u0022st\\u0022>&quot;Aさん&quot;</span> <span class=\\u0022op\\u0022>}</span> birthDay<span class=\\u0022op\\u0022>={</span> <span class=\\u0022kw\\u0022>new</span> <span class=\\u0022at\\u0022>Date</span>(<span class=\\u0022dv\\u0022>1836</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022dv\\u0022>0</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022dv\\u0022>3</span>) <span class=\\u0022op\\u0022>}</span> /&gt;</a></code></pre></div>\\u000d\\u000a<p><code>props.children</code></p>\\u000d\\u000a<p>Reactコンポーネントの子要素が渡されるプロパティです。</p>\\u000d\\u000a<p>次の場合、<code>props.children</code>には「坂本竜馬」が渡されます。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb37\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> Hello <span class=\\u0022op\\u0022>=</span> (props) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>こんにちは、<span class=\\u0022op\\u0022>{</span><span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>children</span><span class=\\u0022op\\u0022>}</span>さん&lt;/div<span class=\\u0022op\\u0022>&gt;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-3\\u0022 title=\\u00223\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-5\\u0022 title=\\u00225\\u0022><span class=\\u0022va\\u0022>ReactDOM</span>.<span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-7\\u0022 title=\\u00227\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>Hello<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-8\\u0022 title=\\u00228\\u0022>      坂本竜馬      ←Helloコンポーネントの子要素が渡される</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-9\\u0022 title=\\u00229\\u0022>    &lt;/Hello<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-10\\u0022 title=\\u002210\\u0022>  &lt;/div<span class=\\u0022op\\u0022>&gt;,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-11\\u0022 title=\\u002211\\u0022>  <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&quot;root&quot;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb37-12\\u0022 title=\\u002212\\u0022>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<h3 id=\\u0022propsの型チェック\\u0022>propsの型チェック</h3>\\u000d\\u000a<p>コンポーネントがどのようなpropsを受け取るのか記述することができます。 インターフェイスに合わない値が渡されたときに、エディタや実行時に警告を受け取ることができます。</p>\\u000d\\u000a<p>別パッケージになっているので追加でインストールします。</p>\\u000d\\u000a<pre><code>&gt; npm install --save prop-types\\u000d\\u000a</code></pre>\\u000d\\u000a<p>ReactコンポーネントのpropTypesプロパティに型情報を記述します。 Functional Component/Class Componentのどちらでも記述できます。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb39\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb39-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> PropTypes <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;prop-types&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb39-2\\u0022 title=\\u00222\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb39-3\\u0022 title=\\u00223\\u0022><span class=\\u0022kw\\u0022>const</span> Hello <span class=\\u0022op\\u0022>=</span> (props) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb39-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span>こんにちは、<span class=\\u0022op\\u0022>{</span><span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>name</span><span class=\\u0022op\\u0022>}</span>さん&lt;/div<span class=\\u0022op\\u0022>&gt;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb39-5\\u0022 title=\\u00225\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb39-6\\u0022 title=\\u00226\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb39-7\\u0022 title=\\u00227\\u0022><span class=\\u0022co\\u0022>// ここに型情報を書きます</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb39-8\\u0022 title=\\u00228\\u0022><span class=\\u0022co\\u0022>// ↓</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb39-9\\u0022 title=\\u00229\\u0022><span class=\\u0022va\\u0022>Hello</span>.<span class=\\u0022at\\u0022>propTypes</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb39-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022dt\\u0022>name</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>string</span>    <span class=\\u0022co\\u0022>// nameの型はstring</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb39-11\\u0022 title=\\u002211\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>propTypesの種類</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb40\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> PropTypes <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;prop-types&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-4\\u0022 title=\\u00224\\u0022><span class=\\u0022kw\\u0022>class</span> SomeComponent <span class=\\u0022kw\\u0022>extends</span> <span class=\\u0022va\\u0022>React</span>.<span class=\\u0022at\\u0022>Component</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-5\\u0022 title=\\u00225\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-6\\u0022 title=\\u00226\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-7\\u0022 title=\\u00227\\u0022><span class=\\u0022va\\u0022>SomeComponent</span>.<span class=\\u0022at\\u0022>propTypes</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-8\\u0022 title=\\u00228\\u0022>  <span class=\\u0022dt\\u0022>someString</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>string</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022co\\u0022>// 文字列</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-9\\u0022 title=\\u00229\\u0022>  <span class=\\u0022dt\\u0022>someNumber</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>number</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022co\\u0022>// 数値</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022dt\\u0022>someBool</span><span class=\\u0022op\\u0022>:</span>   <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>bool</span><span class=\\u0022op\\u0022>,</span>   <span class=\\u0022co\\u0022>// 真偽値</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-11\\u0022 title=\\u002211\\u0022>  <span class=\\u0022dt\\u0022>someArray</span><span class=\\u0022op\\u0022>:</span>  <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>array</span><span class=\\u0022op\\u0022>,</span>  <span class=\\u0022co\\u0022>// 配列</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-12\\u0022 title=\\u002212\\u0022>  <span class=\\u0022dt\\u0022>someObject</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>object</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022co\\u0022>// オブジェクト</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-13\\u0022 title=\\u002213\\u0022>  <span class=\\u0022dt\\u0022>someFunc</span><span class=\\u0022op\\u0022>:</span>   <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>func</span><span class=\\u0022op\\u0022>,</span>   <span class=\\u0022co\\u0022>// 関数</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-14\\u0022 title=\\u002214\\u0022>  <span class=\\u0022dt\\u0022>someSymbol</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>symbol</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022co\\u0022>// シンボル</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-15\\u0022 title=\\u002215\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022co\\u0022>// 配列の中身を指定</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-17\\u0022 title=\\u002217\\u0022>  <span class=\\u0022dt\\u0022>someArray2</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>arayOf</span>(<span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>number</span>)<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-18\\u0022 title=\\u002218\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-19\\u0022 title=\\u002219\\u0022>  <span class=\\u0022co\\u0022>// オブジェクトの中身を指定</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-20\\u0022 title=\\u002220\\u0022>  <span class=\\u0022dt\\u0022>someObj2</span><span class=\\u0022op\\u0022>:</span>   <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>objectOf</span>(<span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>number</span>)<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-21\\u0022 title=\\u002221\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-22\\u0022 title=\\u002222\\u0022>  <span class=\\u0022co\\u0022>// オブジェクトの個別のプロパティの中身を指定</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-23\\u0022 title=\\u002223\\u0022>  <span class=\\u0022dt\\u0022>someObj3</span><span class=\\u0022op\\u0022>:</span>   <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>shape</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-24\\u0022 title=\\u002224\\u0022>    <span class=\\u0022dt\\u0022>name</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>string</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-25\\u0022 title=\\u002225\\u0022>    <span class=\\u0022dt\\u0022>age</span><span class=\\u0022op\\u0022>:</span>  <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>number</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-26\\u0022 title=\\u002226\\u0022>  <span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-27\\u0022 title=\\u002227\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-28\\u0022 title=\\u002228\\u0022>  <span class=\\u0022co\\u0022>// Reactエレメント</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-29\\u0022 title=\\u002229\\u0022>  <span class=\\u0022dt\\u0022>someElement</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>element</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-30\\u0022 title=\\u002230\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-31\\u0022 title=\\u002231\\u0022>  <span class=\\u0022co\\u0022>// コンポーネントの子要素となるもの</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-32\\u0022 title=\\u002232\\u0022>  <span class=\\u0022co\\u0022>// （string, number, element, array ならOK）</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-33\\u0022 title=\\u002233\\u0022>  <span class=\\u0022dt\\u0022>someNode</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>node</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-34\\u0022 title=\\u002234\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-35\\u0022 title=\\u002235\\u0022>  <span class=\\u0022co\\u0022>// Helloコンポーネントのインスタンスを指定</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-36\\u0022 title=\\u002236\\u0022>  <span class=\\u0022dt\\u0022>helloElement</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>instanceOf</span>(Hello)<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-37\\u0022 title=\\u002237\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-38\\u0022 title=\\u002238\\u0022>  <span class=\\u0022co\\u0022>// 指定した値のいずれかであること</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-39\\u0022 title=\\u002239\\u0022>  <span class=\\u0022dt\\u0022>dayOfTheWeek</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>oneOf</span>([<span class=\\u0022st\\u0022>&quot;月&quot;</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022st\\u0022>&quot;火&quot;</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022st\\u0022>&quot;水&quot;</span>])<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-40\\u0022 title=\\u002240\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-41\\u0022 title=\\u002241\\u0022>  <span class=\\u0022co\\u0022>// 配列で指定した型のいずれかであること</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-42\\u0022 title=\\u002242\\u0022>  <span class=\\u0022dt\\u0022>union</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>oneOfType</span>([</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-43\\u0022 title=\\u002243\\u0022>    <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>string</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-44\\u0022 title=\\u002244\\u0022>    <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>number</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-45\\u0022 title=\\u002245\\u0022>    <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>instanceOf</span>(Hello)<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-46\\u0022 title=\\u002246\\u0022>  ])<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-47\\u0022 title=\\u002247\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-48\\u0022 title=\\u002248\\u0022>  <span class=\\u0022co\\u0022>// 何でもオーケー</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-49\\u0022 title=\\u002249\\u0022>  <span class=\\u0022dt\\u0022>any</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>any</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-50\\u0022 title=\\u002250\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-51\\u0022 title=\\u002251\\u0022>  <span class=\\u0022co\\u0022>// 必須項目</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-52\\u0022 title=\\u002252\\u0022>  <span class=\\u0022dt\\u0022>requiredString</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>string</span>.<span class=\\u0022at\\u0022>isRequired</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-53\\u0022 title=\\u002253\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-54\\u0022 title=\\u002254\\u0022>  <span class=\\u0022co\\u0022>// どんな型でもいいから何かしら指定</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-55\\u0022 title=\\u002255\\u0022>  <span class=\\u0022dt\\u0022>requiredAny</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>any</span>.<span class=\\u0022at\\u0022>isRequired</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-56\\u0022 title=\\u002256\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-57\\u0022 title=\\u002257\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-58\\u0022 title=\\u002258\\u0022><span class=\\u0022co\\u0022>// propsの値が undefined だったときの規定値を指定する</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-59\\u0022 title=\\u002259\\u0022><span class=\\u0022va\\u0022>SomeComponent</span>.<span class=\\u0022at\\u0022>defaultProps</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-60\\u0022 title=\\u002260\\u0022>  <span class=\\u0022dt\\u0022>name</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;坂本竜馬&quot;</span>    <span class=\\u0022co\\u0022>// name が undefined のときに設定する内容</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb40-61\\u0022 title=\\u002261\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p><code>Array.map</code>メソッド : 配列の各要素について、引数に与えられた関数の処理に従って処理をし、新たな配列を返すメソッド。</p>\\u000d\\u000a<pre><code>~~~javascript\\u000d\\u000a// tasksの各要素をTodoItemコンポーネントにして返す\\u000d\\u000aconst list = this.props.tasks.map(todo =&gt; {\\u000d\\u000a  return &lt;TodoItem {...todo} key={todo.id} /&gt;;\\u000d\\u000a});\\u000d\\u000a~~~\\u000d\\u000a</code></pre>\\u000d\\u000a<h3 id=\\u0022stateの初期値\\u0022>stateの初期値</h3>\\u000d\\u000a<p><code>constructor</code>で設定します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb42\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb42-1\\u0022 title=\\u00221\\u0022><span class=\\u0022at\\u0022>constructor</span>(props) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb42-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022kw\\u0022>super</span>(props)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb42-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>state</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb42-4\\u0022 title=\\u00224\\u0022>    <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> [</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb42-5\\u0022 title=\\u00225\\u0022>      <span class=\\u0022op\\u0022>{</span> <span class=\\u0022dt\\u0022>title</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;Todo-1&quot;</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022dt\\u0022>id</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022dv\\u0022>0</span> <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb42-6\\u0022 title=\\u00226\\u0022>      <span class=\\u0022op\\u0022>{</span> <span class=\\u0022dt\\u0022>title</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;Todo-2&quot;</span><span class=\\u0022op\\u0022>,</span> <span class=\\u0022dt\\u0022>id</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022dv\\u0022>1</span> <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb42-7\\u0022 title=\\u00227\\u0022>    ]<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb42-8\\u0022 title=\\u00228\\u0022>    <span class=\\u0022dt\\u0022>uniqueId</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022dv\\u0022>1</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb42-9\\u0022 title=\\u00229\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb42-10\\u0022 title=\\u002210\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<ul>\\u000d\\u000a<li><code>state</code>の名前は変更できません。</li>\\u000d\\u000a<li><code>this.state</code>に直接値を入れていいのは<code>constructor</code>で初期値を設定するときだけです。 それ以外の場面で直接編集してしまうと、Reactコンポーネントに値の変更を通知することができません。</li>\\u000d\\u000a<li><code>this.state</code>を更新するときは<code>this.setState</code>メソッドを使います。 いまあるstateと比べて、変更があった内容を反映します。stateをごっそり置き換えるわけではありません。</li>\\u000d\\u000a<li><code>this.state</code>を直接参照するのはありです。</li>\\u000d\\u000a</ul>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb43\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb43-1\\u0022 title=\\u00221\\u0022><span class=\\u0022at\\u0022>constructor</span>(props) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb43-2\\u0022 title=\\u00222\\u0022>  ...<span class=\\u0022at\\u0022>略</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb43-3\\u0022 title=\\u00223\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb43-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022co\\u0022>// bindメソッド</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb43-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022co\\u0022>// 指定したメソッドでAppコンポーネントのstateを変更するために必要</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb43-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022co\\u0022>// ↓</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb43-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>methodName</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>methodName</span>.<span class=\\u0022at\\u0022>bind</span>(<span class=\\u0022kw\\u0022>this</span>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p><code>bind</code>メソッド : 関数の中で使用する<code>this</code>を強制する（バインドする）メソッド。</p>\\u000d\\u000a<pre><code>methodNameメソッドを実行するのは、Appコンポーネントではない別のコンポーネントやDOMになります。\\u000d\\u000aそれらのコンテキストである`this`には`state`が存在しないのでエラーが発生します。\\u000d\\u000a</code></pre>\\u000d\\u000a<p>ほかのバインドの方法</p>\\u000d\\u000a<ul>\\u000d\\u000a<li><p>アロー関数を使う</p>\\u000d\\u000a<p>アロー関数を使うときは、constructorにbindメソッドを書く必要がありません。 ですが、同じメソッドを複数のコンポーネントに渡したい場合、その数だけアロー関数を書く必要があります。</p>\\u000d\\u000a<p>毎回新しいアロー関数を作ることになるので、パフォーマンスも少し劣ります。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb45\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb45-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// アロー関数を使う</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb45-2\\u0022 title=\\u00222\\u0022><span class=\\u0022op\\u0022>&lt;</span>Component methodName<span class=\\u0022op\\u0022>={</span> (hoge) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span> <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>methodName</span>(hoge) <span class=\\u0022op\\u0022>}</span> <span class=\\u0022op\\u0022>}</span> /&gt;</a></code></pre></div></li>\\u000d\\u000a<li><p>property initializer syntax を使う</p>\\u000d\\u000a<p>最初からバインドされたメソッドを作ることができます。 アロー関数のようなパフォーマンスの懸念もありません。</p>\\u000d\\u000a<p>ただし、ECMAScriptに公式なシンタックスとして採用されていないため、babelにプラグインを追加しておく必要があります。</p>\\u000d\\u000a<p>Class properties transform・Babel（transform-class-properties）</p></li>\\u000d\\u000a</ul>\\u000d\\u000a<h3 id=\\u0022イベントハンドリング\\u0022>イベントハンドリング</h3>\\u000d\\u000a<p>イベントハンドラを追加します。</p>\\u000d\\u000a<p>下記の例では、クリック時のイベントを<code>handleClick</code>メソッドに定義しています。 イベントとの関連付けは、button要素のonClick属性に<code>handleClick</code>メソッドを設定しています。</p>\\u000d\\u000a<p>Reactでは<code>onClick</code>といった属性に関数を渡して、イベントの関連付けをします。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb46\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-1\\u0022 title=\\u00221\\u0022><span class=\\u0022at\\u0022>constructor</span>(props) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022kw\\u0022>super</span>(props)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>handleClick</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>handleClick</span>.<span class=\\u0022at\\u0022>bind</span>(<span class=\\u0022kw\\u0022>this</span>)<span class=\\u0022op\\u0022>;</span>   <span class=\\u0022co\\u0022>// バインドする</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-4\\u0022 title=\\u00224\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-5\\u0022 title=\\u00225\\u0022><span class=\\u0022co\\u0022>// Eventオブジェクトを引数に持つ</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-6\\u0022 title=\\u00226\\u0022><span class=\\u0022at\\u0022>handleClick</span>(e) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>methodName</span>(<span class=\\u0022st\\u0022>&quot;hoge&quot;</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-8\\u0022 title=\\u00228\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-9\\u0022 title=\\u00229\\u0022><span class=\\u0022at\\u0022>render</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-11\\u0022 title=\\u002211\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-12\\u0022 title=\\u002212\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input placeholder<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;何か入力してください&quot;</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-13\\u0022 title=\\u002213\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>button onClick<span class=\\u0022op\\u0022>={</span> <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>handleClick</span> <span class=\\u0022op\\u0022>}</span> <span class=\\u0022op\\u0022>&gt;</span>登録&lt;/button<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-14\\u0022 title=\\u002214\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb46-15\\u0022 title=\\u002215\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>イベントハンドラの引数は、Eventオブジェクトを受け取ります。 ブラウザ本来のEventオブジェクトとほぼ同じものです。</p>\\u000d\\u000a<h3 id=\\u0022formの操作\\u0022>formの操作</h3>\\u000d\\u000a<p>Reactではフォームに入力された値も<code>state</code>として扱います。</p>\\u000d\\u000a<p>以下は、ユーザーの入力で state を変更するコードです。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb47\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-1\\u0022 title=\\u00221\\u0022><span class=\\u0022at\\u0022>constructor</span>(props) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022kw\\u0022>super</span>(props)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>state</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-4\\u0022 title=\\u00224\\u0022>    <span class=\\u0022dt\\u0022>inputValue</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>handleChange</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>handleChange</span>.<span class=\\u0022at\\u0022>bind</span>(<span class=\\u0022kw\\u0022>this</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>handleClick</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>handleClick</span>.<span class=\\u0022at\\u0022>bind</span>(<span class=\\u0022kw\\u0022>this</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-8\\u0022 title=\\u00228\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-9\\u0022 title=\\u00229\\u0022><span class=\\u0022at\\u0022>handleChange</span>(e) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022co\\u0022>// ユーザーの入力した値をstate.inputValueに格納する</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-11\\u0022 title=\\u002211\\u0022>  <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>setState</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-12\\u0022 title=\\u002212\\u0022>    <span class=\\u0022dt\\u0022>inputValue</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>e</span>.<span class=\\u0022va\\u0022>target</span>.<span class=\\u0022at\\u0022>value</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-13\\u0022 title=\\u002213\\u0022>  <span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-14\\u0022 title=\\u002214\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-15\\u0022 title=\\u002215\\u0022><span class=\\u0022at\\u0022>handleClick</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022kw\\u0022>const</span> inputValue <span class=\\u0022op\\u0022>=</span> <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>state</span>.<span class=\\u0022at\\u0022>inputValue</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-17\\u0022 title=\\u002217\\u0022>  <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>methodName</span>(inputValue)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-18\\u0022 title=\\u002218\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-19\\u0022 title=\\u002219\\u0022><span class=\\u0022at\\u0022>render</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-20\\u0022 title=\\u002220\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-21\\u0022 title=\\u002221\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div className<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;TodoInput&quot;</span><span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-22\\u0022 title=\\u002222\\u0022>      <span class=\\u0022va\\u0022>▼valueにstate</span>.<span class=\\u0022at\\u0022>inputValueを設定、onChangeにhandleChangeメソッドを関連付け</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-23\\u0022 title=\\u002223\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input placeholder<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;何か入力してください&quot;</span> value<span class=\\u0022op\\u0022>={</span><span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>state</span>.<span class=\\u0022at\\u0022>inputValue</span><span class=\\u0022op\\u0022>}</span> onChange<span class=\\u0022op\\u0022>={</span><span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>handleChange</span><span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-24\\u0022 title=\\u002224\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>button onClick<span class=\\u0022op\\u0022>={</span><span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>handleClick</span><span class=\\u0022op\\u0022>}</span> <span class=\\u0022op\\u0022>&gt;</span>登録&lt;/button<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-25\\u0022 title=\\u002225\\u0022>    &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-26\\u0022 title=\\u002226\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb47-27\\u0022 title=\\u002227\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<h3 id=\\u0022まとめ-reactコンポーネントの作成手順\\u0022>まとめ: Reactコンポーネントの作成手順</h3>\\u000d\\u000a<ol>\\u000d\\u000a<li>UIをコンポーネントに分割する</li>\\u000d\\u000a<li>propsやstateによって、どのようにUIが変化するかを定義する（JSXの作成）</li>\\u000d\\u000a<li>ユーザー操作によって、どのようにstateが変化するかを定義する（メソッドの作成）</li>\\u000d\\u000a<li>UIとメソッドを関連付ける（onClick属性などを設定）</li>\\u000d\\u000a</ol>\\u000d\\u000a<p>コンポーネントごとの責務を明らかにすること。</p>\\u000d\\u000a<h3 id=\\u0022ライフサイクル\\u0022>ライフサイクル</h3>\\u000d\\u000a<p>Reactコンポーネントにはライフサイクルメソッドと呼ばれる特殊なメソッドがあります。 Reactコンポーネントの状態に応じて、次の3つのうち対応するメソッドが呼ばれます。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>コンポーネントのマウントに対応して呼ばれるメソッド。</li>\\u000d\\u000a<li>コンポーネントで扱うデータの変化に対応して呼ばれるメソッド。</li>\\u000d\\u000a<li>エラーハンドリングに用いるメソッド。</li>\\u000d\\u000a</ul>\\u000d\\u000a<h4 id=\\u0022マウントに関するライフサイクルメソッド\\u0022>マウントに関するライフサイクルメソッド</h4>\\u000d\\u000a<p>Reactコンポーネントが新しく配置されるときに呼び出されるメソッドです。 コンポーネントの<code>render</code>メソッドが初めて呼ばれたときに、コンポーネントがマウントされた状態となります。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>コンポーネントのマウント ＝ コンポーネントの<code>render</code>メソッドが初めて呼ばれたとき</li>\\u000d\\u000a<li>コンポーネントのアップデート ＝ 2回目以降の<code>render</code>メソッドの呼び出し</li>\\u000d\\u000a<li>コンポーネントのアンマウント ＝ DOM上からなくなったとき</li>\\u000d\\u000a</ul>\\u000d\\u000a<p>componentWillMount : コンポーネントがマウントされる直前に呼ばれます。 コンポーネントを描画する<code>render</code>メソッドよりも先に呼ばれます。</p>\\u000d\\u000a<pre><code>ただ、コンストラクターも`render`メソッドより先に呼ばれるので、マウント前にしたい処理はここではなくコンストラクターで実行すれば十分です。\\u000d\\u000a</code></pre>\\u000d\\u000a<p>componentDidMount : コンポーネントがマウントされた直後に呼ばれます。 DOMがブラウザにレンダリングされたあとなので、DOMに対してイベントリスナーを設定したりサブスクライブなどの処理をしたりします。</p>\\u000d\\u000a<pre><code>TODO: サブスクライブって何でしょう？？\\u000d\\u000a\\u000d\\u000a`setState`は行わないこと。\\u000d\\u000a\\u000d\\u000astateが変更されるとrenderメソッドが実行されます。\\u000d\\u000arender → componentDidMount → setState → renderとなり、renderメソッドが2回実行されてしまうためです。\\u000d\\u000a</code></pre>\\u000d\\u000a<p>componentWillUnmount : コンポーネントがアンマウントされる直前に呼ばれます。 各種コンポーネントに関連付けた処理の後始末をします。</p>\\u000d\\u000a<pre><code>たとえば、setInterval関数に対するclearIntervalの実行や、APIリクエストのキャンセルなどです。\\u000d\\u000a</code></pre>\\u000d\\u000a<h4 id=\\u0022データのアップデートに関するライフサイクルメソッド\\u0022>データのアップデートに関するライフサイクルメソッド</h4>\\u000d\\u000a<p>アップデートはコンポーネントのpropsかstateが変更されたときに行われます。 初回のレンダリングはマウントとして扱われるため、マウント時にはこれらのメソッドは実行されません。</p>\\u000d\\u000a<p>componentWillReceiveProps : 引数に受け取る予定のpropsをとります。</p>\\u000d\\u000a<pre><code>~~~javascript\\u000d\\u000acomponentWillReceiveProps(nextProps)\\u000d\\u000a~~~\\u000d\\u000a\\u000d\\u000apropsがアップデートされようとしているときのみ実行されます。\\u000d\\u000apropsの受け取りで実行されるため、変更の有無は関係なく実行されます。\\u000d\\u000a\\u000d\\u000athis.propsには以前に受け取ったpropsが入っています。\\u000d\\u000a引数のnextPropsと比較する処理をすることができます。\\u000d\\u000a\\u000d\\u000asetStateをすることも可能です。\\u000d\\u000a</code></pre>\\u000d\\u000a<p>shouldComponentUpdate : propsやstateに変更が合った場合に呼ばれます。 引数は次に受け取るpropsとstateです。 this.propsとthis.stateには前回の内容が入っています。</p>\\u000d\\u000a<pre><code>~~~javascript\\u000d\\u000ashouldComponentUpdate(nextProps, nextStaet)\\u000d\\u000a~~~\\u000d\\u000a\\u000d\\u000arenderを行うべきかどうかをtrue/falseで返す必要があります。\\u000d\\u000a\\u000d\\u000aこのメソッドを指定しなかった場合、どのような変更でもrenderメソッドが呼び出されます（常にtrueを返すように指定したのと同じ）。\\u000d\\u000a\\u000d\\u000aこのメソッドはパフォーマンスチューニングをする際に利用します。\\u000d\\u000a表示に使っていないpropを受け取ったときや、そもそもpropsやstateに変更がなかったときは不要なrenderを行わないようにします。\\u000d\\u000a\\u000d\\u000a変更がないpropやstateを受け取ったときに再描画させないようにするもう一つの方法。\\u000d\\u000a\\u000d\\u000a`React.Component`を継承する代わりに`React.PureComponent`を継承すると、Reactが自動的に浅い比較（オブジェクトや配列の中身までは確認しない比較）を行うので、通常はこちらを利用する方が便利です。\\u000d\\u000aなにか特別な比較を行い、renderの有無を決めるときだけ`shouldComponentUpdate`を利用することを推奨します。\\u000d\\u000a</code></pre>\\u000d\\u000a<p>componentWillUpdate : renderが呼ばれる前に呼ばれる最後のメソッドです。</p>\\u000d\\u000a<pre><code>引数は次に受け取るpropsとstateです。\\u000d\\u000athis.propsとthis.stateには前回の内容が入っています。\\u000d\\u000a\\u000d\\u000a~~~javascript\\u000d\\u000acomponentWillUpdate(nextProps, nextStaet)\\u000d\\u000a~~~\\u000d\\u000a\\u000d\\u000a`setState`などコンポーネントの再レンダリングを促すような処理はしないこと。\\u000d\\u000a変更に対して`componentWillUpdate`、`render`が実行され、処理がループする可能性があるためです。\\u000d\\u000a\\u000d\\u000apropsの値を使ってstateを変更したいときは`componentWillReceiveProps`メソッドを使います。\\u000d\\u000a\\u000d\\u000a`shouldComponentUpdate`でfalseを返した場合、このメソッドは呼ばれません。\\u000d\\u000a</code></pre>\\u000d\\u000a<p>componentDidUpdate : renderの直後に呼ばれます。</p>\\u000d\\u000a<pre><code>引数は前のpropsとstateです。\\u000d\\u000athis.propsとthis.stateは、いまの値（renderに使った内容）が格納されています。\\u000d\\u000a\\u000d\\u000a~~~javascript\\u000d\\u000acomponentDidUpdate(prevProps, prevStaet)\\u000d\\u000a~~~\\u000d\\u000a\\u000d\\u000aアップデート後のDOMにアクセスするときや、変更が完了したことをAPIに通知するときなどに利用します。\\u000d\\u000a\\u000d\\u000a`shouldComponentUpdate`でfalseを返した場合、このメソッドは呼ばれません。\\u000d\\u000a</code></pre>\\u000d\\u000a<h4 id=\\u0022エラーハンドリングに関するライフサイクルメソッド\\u0022>エラーハンドリングに関するライフサイクルメソッド</h4>\\u000d\\u000a<p>エラーが起きたときだけ呼ばれるライフサイクルメソッドです。 React v16 から実装されています。</p>\\u000d\\u000a<p>componentDidCatch : 子コンポーネントでエラーが起こったときに呼ばれます。</p>\\u000d\\u000a<pre><code>~~~Javascript\\u000d\\u000acomponentDidCatch(error, info)\\u000d\\u000a~~~\\u000d\\u000a\\u000d\\u000a引数にスタックとレースが入ったerror、その他の情報が入ったinfoをとります。\\u000d\\u000a\\u000d\\u000ainfoはオブジェクトで、現時点では`componentStack`プロパティしか持っていません。\\u000d\\u000aこれにはどのコンポーネントでエラーが発生したかが入っています。\\u000d\\u000a\\u000d\\u000aエラー解析の手がかりとなるので、どちらもログとして送信するようにしておくと便利。\\u000d\\u000a\\u000d\\u000a`setState`などの処理を行うことも可能。\\u000d\\u000a\\u000d\\u000aこのメソッドを記述したコンポーネント自体のエラーは検知できません。\\u000d\\u000a子コンポーネントのエラーを検知するためのメソッドです。\\u000d\\u000a</code></pre>\\u000d\\u000a<h2 id=\\u0022reduxによるアプリケーションの状態管理\\u0022>Reduxによるアプリケーションの状態管理</h2>\\u000d\\u000a<p><code>create-react-app</code>で新しいアプリケーションを作成します。</p>\\u000d\\u000a<h3 id=\\u0022reduxのインストール\\u0022>Reduxのインストール</h3>\\u000d\\u000a<pre><code>&gt; npm install --save redux\\u000d\\u000a</code></pre>\\u000d\\u000a<h3 id=\\u0022reduxの構成\\u0022>Reduxの構成</h3>\\u000d\\u000a<p>Store : アプリケーションの状態（<code>state</code>）とロジックを保持している居場所。</p>\\u000d\\u000a<p>Reducer : Storeが保持している状態を変化させるための関数。</p>\\u000d\\u000a<p>Action : 何らかの状態変化を引き起こす現象。たとえば、ユーザー入力、APIから取得した情報。</p>\\u000d\\u000a<pre><code>Actionの形式を標準化した〝Flux Standard Action〟というものがあります。\\u000d\\u000aActionを扱うライブラリ（`redux-actions`や`redux-promise`など）でも、これを採用したものが多いので、この形式に沿っておくのがよいでしょう。\\u000d\\u000a\\u000d\\u000aActionオブジェクトには、次のプロパティを持たせることができます。\\u000d\\u000a\\u000d\\u000a- type\\u000d\\u000a  \\u000d\\u000a  必須プロパティです。\\u000d\\u000a  どのような操作をしたのかが分かる内容を指定します。\\u000d\\u000a\\u000d\\u000a- payload\\u000d\\u000a  \\u000d\\u000a  Actionに伴うデータ。オブジェクト形式で扱うのが一般的。\\u000d\\u000a  errorプロパティがtrueのときはErrorオブジェクトを返すべき。\\u000d\\u000a  \\u000d\\u000a- error\\u000d\\u000a  \\u000d\\u000a  エラーを表現するときはtrueにします。\\u000d\\u000a  \\u000d\\u000a- meta\\u000d\\u000a  \\u000d\\u000a  payloadとは別に、ほかの情報をActionとして含めたいときに使う項目です。\\u000d\\u000a</code></pre>\\u000d\\u000a<h3 id=\\u0022reducerの定義\\u0022>Reducerの定義</h3>\\u000d\\u000a<p>Storeの初期状態［index.js］</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb58\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb58-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> initialState <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb58-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> []</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb58-3\\u0022 title=\\u00223\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p>tasksReducerの定義［index.js］</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb59\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// Reducerの定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-2\\u0022 title=\\u00222\\u0022><span class=\\u0022co\\u0022>// 第1引数は、現在の状態を表すstateオブジェクト</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-3\\u0022 title=\\u00223\\u0022><span class=\\u0022co\\u0022>// 第2引数は、どのような操作をしたのかを示すActionオブジェクト</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-4\\u0022 title=\\u00224\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>tasksReducer</span>(state <span class=\\u0022op\\u0022>=</span> initialState<span class=\\u0022op\\u0022>,</span> action) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022cf\\u0022>switch</span> (<span class=\\u0022va\\u0022>action</span>.<span class=\\u0022at\\u0022>type</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-6\\u0022 title=\\u00226\\u0022>    <span class=\\u0022cf\\u0022>case</span> <span class=\\u0022st\\u0022>&#39;ADD_TASK&#39;</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-7\\u0022 title=\\u00227\\u0022>      <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-8\\u0022 title=\\u00228\\u0022>        ...<span class=\\u0022at\\u0022>state</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-9\\u0022 title=\\u00229\\u0022>        <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>state</span>.<span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>concat</span>([<span class=\\u0022va\\u0022>action</span>.<span class=\\u0022at\\u0022>task</span>])    <span class=\\u0022co\\u0022>// </span><span class=\\u0022al\\u0022>TODO</span><span class=\\u0022co\\u0022>: action.payload.taskでは？　→　そのとおりでした。</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-10\\u0022 title=\\u002210\\u0022>      <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-11\\u0022 title=\\u002211\\u0022>    <span class=\\u0022dt\\u0022>default</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-12\\u0022 title=\\u002212\\u0022>      <span class=\\u0022cf\\u0022>return</span> state<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-13\\u0022 title=\\u002213\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb59-14\\u0022 title=\\u002214\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>Actionオブジェクトのイメージ</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb60\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb60-1\\u0022 title=\\u00221\\u0022><span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb60-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&#39;ADD_TASK&#39;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb60-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb60-4\\u0022 title=\\u00224\\u0022>    <span class=\\u0022dt\\u0022>task</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&#39;Study Reducer&#39;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb60-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb60-6\\u0022 title=\\u00226\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<h3 id=\\u0022actioncreatorの定義\\u0022>ActionCreatorの定義</h3>\\u000d\\u000a<p>ActionCreatorとはActionを生成するための関数です。</p>\\u000d\\u000a<p>Actionを生成する関数の定義［index.js］</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb61\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb61-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// ActionCreatorの定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb61-2\\u0022 title=\\u00222\\u0022><span class=\\u0022co\\u0022>// 追加するtaskを引数に取り、Actionオブジェクトを返す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb61-3\\u0022 title=\\u00223\\u0022><span class=\\u0022kw\\u0022>const</span> addTask <span class=\\u0022op\\u0022>=</span> (task) <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb61-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&#39;ADD_TASK&#39;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb61-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb61-6\\u0022 title=\\u00226\\u0022>    task</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb61-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb61-8\\u0022 title=\\u00228\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<h3 id=\\u0022storeの定義\\u0022>Storeの定義</h3>\\u000d\\u000a<p>Reduxの<code>createStore</code>関数を使ってStoreを生成します。 生成したStoreはアプリケーション内で唯一のものです。 アプリケーション全体のさまざまな状態をこのStoreで集約管理します。</p>\\u000d\\u000a<p>ReduxのStoreを生成するにはReducerが必要となります。</p>\\u000d\\u000a<p>Storeの作成［index.js］</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb62\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb62-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> createStore <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb62-2\\u0022 title=\\u00222\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb62-3\\u0022 title=\\u00223\\u0022><span class=\\u0022co\\u0022>// Reducerの定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb62-4\\u0022 title=\\u00224\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>tasksReducer</span>(state <span class=\\u0022op\\u0022>=</span> initialState<span class=\\u0022op\\u0022>,</span> action) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb62-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022co\\u0022>// ...略</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb62-6\\u0022 title=\\u00226\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb62-7\\u0022 title=\\u00227\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb62-8\\u0022 title=\\u00228\\u0022><span class=\\u0022co\\u0022>// Storeの生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb62-9\\u0022 title=\\u00229\\u0022><span class=\\u0022kw\\u0022>const</span> store <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createStore</span>(tasksReducer)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb63\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb63-1\\u0022 title=\\u00221\\u0022><span class=\\u0022at\\u0022>createStore</span>(reducer<span class=\\u0022op\\u0022>,</span> [preloadedState]<span class=\\u0022op\\u0022>,</span> [enhancer])</a></code></pre></div>\\u000d\\u000a<p>引数</p>\\u000d\\u000a<p>reducer : Reducerを指定します。</p>\\u000d\\u000a<p>preloadedState : Storeの初期値を指定します。 サーバーサイドやユーザーセッションで事前にデータを保持しているときに利用することが想定されます。</p>\\u000d\\u000a<p>enhancer : Storeの機能を拡張するサードパーティ製のツールを指定できます。</p>\\u000d\\u000a<p>戻り値</p>\\u000d\\u000a<p>Storeオブジェクト</p>\\u000d\\u000a<p>Storeオブジェクトは次の4つのメソッドを持ちます。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li><p>dispatch</p>\\u000d\\u000a<p>ActionCreatorで生成したActionを発行します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb64\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb64-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// ActionCreatorの定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb64-2\\u0022 title=\\u00222\\u0022><span class=\\u0022kw\\u0022>const</span> addTask <span class=\\u0022op\\u0022>=</span> (task) <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb64-3\\u0022 title=\\u00223\\u0022>  ... <span class=\\u0022at\\u0022>略</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb64-4\\u0022 title=\\u00224\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb64-5\\u0022 title=\\u00225\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb64-6\\u0022 title=\\u00226\\u0022><span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>addTask</span>(<span class=\\u0022st\\u0022>&quot;Study Store&quot;</span>))<span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>getState</p>\\u000d\\u000a<p>Storeの現在の状態を取得します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb65\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb65-1\\u0022 title=\\u00221\\u0022><span class=\\u0022va\\u0022>console</span>.<span class=\\u0022at\\u0022>log</span>(<span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>getState</span>())<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb65-2\\u0022 title=\\u00222\\u0022>↓</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb65-3\\u0022 title=\\u00223\\u0022><span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb65-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> [<span class=\\u0022st\\u0022>&#39;Study Store&#39;</span>]</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb65-5\\u0022 title=\\u00225\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div></li>\\u000d\\u000a<li><p>subscribe</p>\\u000d\\u000a<p>Storeの状態が変更されたときに呼び出されるコールバック関数を指定します。</p>\\u000d\\u000a<p>ActionのdispatchによってStoreの状態が変わったときに、その変換を監視する役目を担う処理。</p>\\u000d\\u000a<p><code>store.subscribe</code>で監視を開始します。 <code>store.subscribe</code>の戻り値である<code>unsubscribe</code>を実行することで、<code>subscribe</code>を解除することができます。</p>\\u000d\\u000a<p>実際にReactと組み合わせるときは、<code>react-redux</code>というライブラリを使います。 <code>react-redux</code>が<code>subscribe</code>の仕組みを隠蔽するため、Storeの状態が変化するとReactのViewが更新されるというシンプルな流れになります。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb66\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb66-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>handleChange</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb66-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022va\\u0022>console</span>.<span class=\\u0022at\\u0022>log</span>(<span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>getState</span>())<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb66-3\\u0022 title=\\u00223\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb66-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb66-5\\u0022 title=\\u00225\\u0022><span class=\\u0022co\\u0022>// Storeの状態が変化したときに handleChange 関数が呼ばれる。</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb66-6\\u0022 title=\\u00226\\u0022><span class=\\u0022co\\u0022>// subscribeの戻り値は unsubscribe という関数。</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb66-7\\u0022 title=\\u00227\\u0022><span class=\\u0022co\\u0022>// これを実行すると状態変化の通知が解除され、handleChange 関数は呼ばれなくなる。</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb66-8\\u0022 title=\\u00228\\u0022><span class=\\u0022kw\\u0022>const</span> unsubscribe <span class=\\u0022op\\u0022>=</span> <span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>subscribe</span>(handleChange)<span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>replaceReducer</p>\\u000d\\u000a<p>createStoreで関連付けたReducerを、別のReducerに差し替えるメソッドです。</p>\\u000d\\u000a<p>createStoreで関連付けることができるReducerは1つだけです。 複数あるReducerを動的にロードしたいときにこのメソッドで差し替えをします。</p>\\u000d\\u000a<p>Storeに関連付けられているReducerのみしか適用されないので、特別な理由がない限り、combineReducerによって一つにまとめたReducerを関連付けてしまう方が楽。</p>\\u000d\\u000a<p>combineReducer : Reduxに備わっているメソッドで、複数のReducerを合成します。</p>\\u000d\\u000a<pre><code>  通常、一つのReducer内で処理分岐して定義して問題ありませんが、規模が大きくなってくると見通しが悪くなってくるのでReducerを分割したくなります。\\u000d\\u000a  そんなときにどうぞ。\\u000d\\u000a  \\u000d\\u000a  Storeはアプリケーション内で一つということに変わりはありませんが、Reducerを分割することで、Storeを擬似的に分割できる点がメリットです。\\u000d\\u000a</code></pre></li>\\u000d\\u000a</ul>\\u000d\\u000a<h3 id=\\u0022reactと組み合わせる\\u0022>Reactと組み合わせる</h3>\\u000d\\u000a<p>次の機能を持たせます。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>Reactを使って状態の変化をViewに反映する。</li>\\u000d\\u000a<li>ブラウザからのタスク入力を可能にする。</li>\\u000d\\u000a</ul>\\u000d\\u000a<ol>\\u000d\\u000a<li><p>タスク入力用のActionCreatorの定義</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb68\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb68-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// タスク入力用のActionCreator</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb68-2\\u0022 title=\\u00222\\u0022><span class=\\u0022kw\\u0022>const</span> inputTask <span class=\\u0022op\\u0022>=</span> (task) <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb68-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;INPUT_TASK&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb68-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb68-5\\u0022 title=\\u00225\\u0022>    task</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb68-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb68-7\\u0022 title=\\u00227\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>タスク入力用のActionを受け取りStoreを変更できるように、Reducerを変更する</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb69\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> initialState <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022dt\\u0022>task</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;&quot;</span><span class=\\u0022op\\u0022>,</span>       <span class=\\u0022co\\u0022>// ←追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> []</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-4\\u0022 title=\\u00224\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-5\\u0022 title=\\u00225\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-6\\u0022 title=\\u00226\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>tasksReducer</span>(state <span class=\\u0022op\\u0022>=</span> initialState<span class=\\u0022op\\u0022>,</span> action) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022cf\\u0022>switch</span> (<span class=\\u0022va\\u0022>action</span>.<span class=\\u0022at\\u0022>type</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-8\\u0022 title=\\u00228\\u0022>    <span class=\\u0022cf\\u0022>case</span> <span class=\\u0022st\\u0022>&#39;INPUT_TASK&#39;</span><span class=\\u0022op\\u0022>:</span>    <span class=\\u0022co\\u0022>// INPUT_TASKのCaseを追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-9\\u0022 title=\\u00229\\u0022>      <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-10\\u0022 title=\\u002210\\u0022>        ...<span class=\\u0022at\\u0022>state</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-11\\u0022 title=\\u002211\\u0022>        <span class=\\u0022dt\\u0022>task</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>action</span>.<span class=\\u0022va\\u0022>payload</span>.<span class=\\u0022at\\u0022>task</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-12\\u0022 title=\\u002212\\u0022>      <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-13\\u0022 title=\\u002213\\u0022>    <span class=\\u0022cf\\u0022>case</span> <span class=\\u0022st\\u0022>&#39;ADD_TASK&#39;</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-14\\u0022 title=\\u002214\\u0022>      <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-15\\u0022 title=\\u002215\\u0022>        ...<span class=\\u0022at\\u0022>state</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-16\\u0022 title=\\u002216\\u0022>        <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>state</span>.<span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>concat</span>([<span class=\\u0022va\\u0022>action</span>.<span class=\\u0022va\\u0022>payload</span>.<span class=\\u0022at\\u0022>task</span>])</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-17\\u0022 title=\\u002217\\u0022>      <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-18\\u0022 title=\\u002218\\u0022>    <span class=\\u0022dt\\u0022>default</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-19\\u0022 title=\\u002219\\u0022>      <span class=\\u0022cf\\u0022>return</span> state<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-20\\u0022 title=\\u002220\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb69-21\\u0022 title=\\u002221\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div></li>\\u000d\\u000a<li><p>Reactコンポーネントの定義を追加する</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb70\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>TodoApp</span>(<span class=\\u0022op\\u0022>{</span> store <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022kw\\u0022>const</span> <span class=\\u0022op\\u0022>{</span> task<span class=\\u0022op\\u0022>,</span> tasks <span class=\\u0022op\\u0022>}</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>getState</span>()<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-4\\u0022 title=\\u00224\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-5\\u0022 title=\\u00225\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;text&quot;</span> onChange<span class=\\u0022op\\u0022>={</span>(e) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>inputTask</span>(<span class=\\u0022va\\u0022>e</span>.<span class=\\u0022va\\u0022>target</span>.<span class=\\u0022at\\u0022>value</span>))<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-6\\u0022 title=\\u00226\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;button&quot;</span> value<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;add&quot;</span> onClick<span class=\\u0022op\\u0022>={</span>() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>addTask</span>(task))<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-7\\u0022 title=\\u00227\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-8\\u0022 title=\\u00228\\u0022>        <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-9\\u0022 title=\\u00229\\u0022>          <span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>map</span>(<span class=\\u0022kw\\u0022>function</span>(item<span class=\\u0022op\\u0022>,</span> i) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-10\\u0022 title=\\u002210\\u0022>            <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-11\\u0022 title=\\u002211\\u0022>              <span class=\\u0022op\\u0022>&lt;</span>li key<span class=\\u0022op\\u0022>={</span>i<span class=\\u0022op\\u0022>}&gt;{</span>item<span class=\\u0022op\\u0022>}</span>&lt;/li<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-12\\u0022 title=\\u002212\\u0022>            )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-13\\u0022 title=\\u002213\\u0022>          <span class=\\u0022op\\u0022>}</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-14\\u0022 title=\\u002214\\u0022>        <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-15\\u0022 title=\\u002215\\u0022>      &lt;/ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-16\\u0022 title=\\u002216\\u0022>    &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-17\\u0022 title=\\u002217\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb70-18\\u0022 title=\\u002218\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div></li>\\u000d\\u000a<li><p>Reactコンポーネントを描画する関数の準備</p>\\u000d\\u000a<p>importを次のように変更する。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb71\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb71-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> ReactDOM <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>↓</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb72\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb72-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> render <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>Viewを描画する関数を追加する。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb73\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb73-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>renderApp</span>(store) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb73-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb73-3\\u0022 title=\\u00223\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>TodoApp store<span class=\\u0022op\\u0022>={</span>store<span class=\\u0022op\\u0022>}</span> /&gt;<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb73-4\\u0022 title=\\u00224\\u0022>    <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&#39;root&#39;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb73-5\\u0022 title=\\u00225\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb73-6\\u0022 title=\\u00226\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>もともとあった描画の処理は削除する。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb74\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb74-1\\u0022 title=\\u00221\\u0022><span class=\\u0022va\\u0022>ReactDOM</span>.<span class=\\u0022at\\u0022>render</span>(<span class=\\u0022op\\u0022>&lt;</span>App /<span class=\\u0022op\\u0022>&gt;,</span> <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&#39;root&#39;</span>))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb74-2\\u0022 title=\\u00222\\u0022><span class=\\u0022at\\u0022>registerServiceWorker</span>()<span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>Viewに反映する関数の準備</p>\\u000d\\u000a<p>Storeの状態変化に応じてViewを変化させる関数を定義します。 Storeの<code>subscribe</code>メソッドを使います。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb75\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb75-1\\u0022 title=\\u00221\\u0022><span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>subscribe</span>(() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>renderApp</span>(store))<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>上記処理の次に描画する関数の呼び出しを追加する。<br />\\u000d\\u000a初期表示用？</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb76\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb76-1\\u0022 title=\\u00221\\u0022><span class=\\u0022at\\u0022>renderApp</span>(store)<span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a</ol>\\u000d\\u000a<h3 id=\\u0022indexjsの全体\\u0022>index.jsの全体</h3>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb77\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> render <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> createStore <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-5\\u0022 title=\\u00225\\u0022><span class=\\u0022co\\u0022>// Note: 使わないのでコメント化 &gt;&gt;&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-6\\u0022 title=\\u00226\\u0022><span class=\\u0022co\\u0022>// import &#39;./index.css&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-7\\u0022 title=\\u00227\\u0022><span class=\\u0022co\\u0022>// import App from &#39;./App&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-8\\u0022 title=\\u00228\\u0022><span class=\\u0022co\\u0022>// import registerServiceWorker from &#39;./registerServiceWorker&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-9\\u0022 title=\\u00229\\u0022><span class=\\u0022co\\u0022>/// Note: &lt;&lt;&lt; 使わないのでコメント化</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-10\\u0022 title=\\u002210\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-11\\u0022 title=\\u002211\\u0022><span class=\\u0022kw\\u0022>const</span> initialState <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-12\\u0022 title=\\u002212\\u0022>  <span class=\\u0022dt\\u0022>task</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-13\\u0022 title=\\u002213\\u0022>  <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> []</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-14\\u0022 title=\\u002214\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-15\\u0022 title=\\u002215\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-16\\u0022 title=\\u002216\\u0022><span class=\\u0022co\\u0022>// Reducerの定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-17\\u0022 title=\\u002217\\u0022><span class=\\u0022co\\u0022>// 第1引数は、現在の状態を表すstateオブジェクト</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-18\\u0022 title=\\u002218\\u0022><span class=\\u0022co\\u0022>// 第2引数は、どのような操作をしたのかを示すActionオブジェクト</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-19\\u0022 title=\\u002219\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>tasksReducer</span>(state <span class=\\u0022op\\u0022>=</span> initialState<span class=\\u0022op\\u0022>,</span> action) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-20\\u0022 title=\\u002220\\u0022>  <span class=\\u0022cf\\u0022>switch</span> (<span class=\\u0022va\\u0022>action</span>.<span class=\\u0022at\\u0022>type</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-21\\u0022 title=\\u002221\\u0022>    <span class=\\u0022cf\\u0022>case</span> <span class=\\u0022st\\u0022>&#39;INPUT_TASK&#39;</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-22\\u0022 title=\\u002222\\u0022>      <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-23\\u0022 title=\\u002223\\u0022>        ...<span class=\\u0022at\\u0022>state</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-24\\u0022 title=\\u002224\\u0022>        <span class=\\u0022dt\\u0022>task</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>action</span>.<span class=\\u0022va\\u0022>payload</span>.<span class=\\u0022at\\u0022>task</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-25\\u0022 title=\\u002225\\u0022>      <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-26\\u0022 title=\\u002226\\u0022>    <span class=\\u0022cf\\u0022>case</span> <span class=\\u0022st\\u0022>&#39;ADD_TASK&#39;</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-27\\u0022 title=\\u002227\\u0022>      <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-28\\u0022 title=\\u002228\\u0022>        ...<span class=\\u0022at\\u0022>state</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-29\\u0022 title=\\u002229\\u0022>        <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>state</span>.<span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>concat</span>([<span class=\\u0022va\\u0022>action</span>.<span class=\\u0022va\\u0022>payload</span>.<span class=\\u0022at\\u0022>task</span>])</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-30\\u0022 title=\\u002230\\u0022>      <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-31\\u0022 title=\\u002231\\u0022>    <span class=\\u0022dt\\u0022>default</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-32\\u0022 title=\\u002232\\u0022>      <span class=\\u0022cf\\u0022>return</span> state<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-33\\u0022 title=\\u002233\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-34\\u0022 title=\\u002234\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-35\\u0022 title=\\u002235\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-36\\u0022 title=\\u002236\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-37\\u0022 title=\\u002237\\u0022><span class=\\u0022co\\u0022>// Storeの生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-38\\u0022 title=\\u002238\\u0022><span class=\\u0022kw\\u0022>const</span> store <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createStore</span>(tasksReducer)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-39\\u0022 title=\\u002239\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-40\\u0022 title=\\u002240\\u0022><span class=\\u0022co\\u0022>// ActionCreatorの定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-41\\u0022 title=\\u002241\\u0022><span class=\\u0022co\\u0022>// 追加するtaskを引数に取り、Actionオブジェクトを返す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-42\\u0022 title=\\u002242\\u0022><span class=\\u0022kw\\u0022>const</span> addTask <span class=\\u0022op\\u0022>=</span> (task) <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-43\\u0022 title=\\u002243\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&#39;ADD_TASK&#39;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-44\\u0022 title=\\u002244\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-45\\u0022 title=\\u002245\\u0022>    task</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-46\\u0022 title=\\u002246\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-47\\u0022 title=\\u002247\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-48\\u0022 title=\\u002248\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-49\\u0022 title=\\u002249\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-50\\u0022 title=\\u002250\\u0022><span class=\\u0022co\\u0022>// タスク入力用のActionCreator</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-51\\u0022 title=\\u002251\\u0022><span class=\\u0022kw\\u0022>const</span> inputTask <span class=\\u0022op\\u0022>=</span> (task) <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-52\\u0022 title=\\u002252\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;INPUT_TASK&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-53\\u0022 title=\\u002253\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-54\\u0022 title=\\u002254\\u0022>    task</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-55\\u0022 title=\\u002255\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-56\\u0022 title=\\u002256\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-57\\u0022 title=\\u002257\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-58\\u0022 title=\\u002258\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-59\\u0022 title=\\u002259\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>TodoApp</span>(<span class=\\u0022op\\u0022>{</span> store <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-60\\u0022 title=\\u002260\\u0022>  <span class=\\u0022kw\\u0022>const</span> <span class=\\u0022op\\u0022>{</span> task<span class=\\u0022op\\u0022>,</span> tasks <span class=\\u0022op\\u0022>}</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>getState</span>()<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-61\\u0022 title=\\u002261\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-62\\u0022 title=\\u002262\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-63\\u0022 title=\\u002263\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;text&quot;</span> onChange<span class=\\u0022op\\u0022>={</span>(e) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>inputTask</span>(<span class=\\u0022va\\u0022>e</span>.<span class=\\u0022va\\u0022>target</span>.<span class=\\u0022at\\u0022>value</span>))<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-64\\u0022 title=\\u002264\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;button&quot;</span> value<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;add&quot;</span> onClick<span class=\\u0022op\\u0022>={</span>() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>addTask</span>(task))<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-65\\u0022 title=\\u002265\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-66\\u0022 title=\\u002266\\u0022>        <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-67\\u0022 title=\\u002267\\u0022>          <span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>map</span>(<span class=\\u0022kw\\u0022>function</span>(item<span class=\\u0022op\\u0022>,</span> i) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-68\\u0022 title=\\u002268\\u0022>            <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-69\\u0022 title=\\u002269\\u0022>              <span class=\\u0022op\\u0022>&lt;</span>li key<span class=\\u0022op\\u0022>={</span>i<span class=\\u0022op\\u0022>}&gt;{</span>item<span class=\\u0022op\\u0022>}</span>&lt;/li<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-70\\u0022 title=\\u002270\\u0022>            )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-71\\u0022 title=\\u002271\\u0022>          <span class=\\u0022op\\u0022>}</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-72\\u0022 title=\\u002272\\u0022>        <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-73\\u0022 title=\\u002273\\u0022>      &lt;/ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-74\\u0022 title=\\u002274\\u0022>    &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-75\\u0022 title=\\u002275\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-76\\u0022 title=\\u002276\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-77\\u0022 title=\\u002277\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-78\\u0022 title=\\u002278\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-79\\u0022 title=\\u002279\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>renderApp</span>(store) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-80\\u0022 title=\\u002280\\u0022>  <span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-81\\u0022 title=\\u002281\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>TodoApp store<span class=\\u0022op\\u0022>={</span>store<span class=\\u0022op\\u0022>}</span> /&gt;<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-82\\u0022 title=\\u002282\\u0022>    <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&#39;root&#39;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-83\\u0022 title=\\u002283\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-84\\u0022 title=\\u002284\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-85\\u0022 title=\\u002285\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-86\\u0022 title=\\u002286\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-87\\u0022 title=\\u002287\\u0022><span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>subscribe</span>(() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>renderApp</span>(store))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb77-88\\u0022 title=\\u002288\\u0022><span class=\\u0022at\\u0022>renderApp</span>(store)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<h3 id=\\u0022ファイルを機能ごとに分割する\\u0022>ファイルを機能ごとに分割する</h3>\\u000d\\u000a<p>ActionCreator、Store、Reducer、Componentの定義を、1ファイルにまとめて書きました。 これを役割ごとにファイルを分割したほうが視認性がよくなります。</p>\\u000d\\u000a<p>次のフォルダ構造でファイルを分割します。</p>\\u000d\\u000a<pre><code>src/\\u000d\\u000a+---index.js\\u000d\\u000a+---containers/\\u000d\\u000a|     ... Container Component を置く\\u000d\\u000a+---components/\\u000d\\u000a|     ... Presentational Component を置く\\u000d\\u000a+---actions/\\u000d\\u000a|     ... ActionCreator を置く\\u000d\\u000a`---reducers/\\u000d\\u000a      ... Reducer を置く\\u000d\\u000a</code></pre>\\u000d\\u000a<ol>\\u000d\\u000a<li><p>Reducerの定義を<code>src/reducers/tasks.js</code>に移動します。</p>\\u000d\\u000a<p>function には <code>export default</code> を付けてください。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb79\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> initialState <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022dt\\u0022>task</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> []</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-4\\u0022 title=\\u00224\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-5\\u0022 title=\\u00225\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-6\\u0022 title=\\u00226\\u0022><span class=\\u0022co\\u0022>// Reducerの定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-7\\u0022 title=\\u00227\\u0022><span class=\\u0022co\\u0022>// 第1引数は、現在の状態を表すstateオブジェクト</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-8\\u0022 title=\\u00228\\u0022><span class=\\u0022co\\u0022>// 第2引数は、どのような操作をしたのかを示すActionオブジェクト</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-9\\u0022 title=\\u00229\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>tasksReducer</span>(state <span class=\\u0022op\\u0022>=</span> initialState<span class=\\u0022op\\u0022>,</span> action) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022cf\\u0022>switch</span> (<span class=\\u0022va\\u0022>action</span>.<span class=\\u0022at\\u0022>type</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-11\\u0022 title=\\u002211\\u0022>    <span class=\\u0022cf\\u0022>case</span> <span class=\\u0022st\\u0022>&#39;INPUT_TASK&#39;</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-12\\u0022 title=\\u002212\\u0022>      <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-13\\u0022 title=\\u002213\\u0022>        ...<span class=\\u0022at\\u0022>state</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-14\\u0022 title=\\u002214\\u0022>        <span class=\\u0022dt\\u0022>task</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>action</span>.<span class=\\u0022va\\u0022>payload</span>.<span class=\\u0022at\\u0022>task</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-15\\u0022 title=\\u002215\\u0022>      <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-16\\u0022 title=\\u002216\\u0022>    <span class=\\u0022cf\\u0022>case</span> <span class=\\u0022st\\u0022>&#39;ADD_TASK&#39;</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-17\\u0022 title=\\u002217\\u0022>      <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-18\\u0022 title=\\u002218\\u0022>        ...<span class=\\u0022at\\u0022>state</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-19\\u0022 title=\\u002219\\u0022>        <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>state</span>.<span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>concat</span>([<span class=\\u0022va\\u0022>action</span>.<span class=\\u0022va\\u0022>payload</span>.<span class=\\u0022at\\u0022>task</span>])</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-20\\u0022 title=\\u002220\\u0022>      <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-21\\u0022 title=\\u002221\\u0022>    <span class=\\u0022dt\\u0022>default</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-22\\u0022 title=\\u002222\\u0022>      <span class=\\u0022cf\\u0022>return</span> state<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-23\\u0022 title=\\u002223\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb79-24\\u0022 title=\\u002224\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div></li>\\u000d\\u000a<li><p>ActionCreatorの定義を <code>src/actions/tasks.js</code> に移動します。</p>\\u000d\\u000a<p>const に <code>export</code> を付けてください。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb80\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// ActionCreatorの定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-2\\u0022 title=\\u00222\\u0022><span class=\\u0022co\\u0022>// 追加するtaskを引数に取り、Actionオブジェクトを返す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022kw\\u0022>const</span> addTask <span class=\\u0022op\\u0022>=</span> (task) <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&#39;ADD_TASK&#39;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-6\\u0022 title=\\u00226\\u0022>    task</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-8\\u0022 title=\\u00228\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-9\\u0022 title=\\u00229\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-10\\u0022 title=\\u002210\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-11\\u0022 title=\\u002211\\u0022><span class=\\u0022co\\u0022>// タスク入力用のActionCreator</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-12\\u0022 title=\\u002212\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022kw\\u0022>const</span> inputTask <span class=\\u0022op\\u0022>=</span> (task) <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-13\\u0022 title=\\u002213\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;INPUT_TASK&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-14\\u0022 title=\\u002214\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-15\\u0022 title=\\u002215\\u0022>    task</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb80-17\\u0022 title=\\u002217\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>Componentの定義を <code>src/components/TodoApp.js</code> に移動します。</p>\\u000d\\u000a<p>componentsからActionをDispatchするため、先ほど移動したActionCreatorのファイルをインポートします。</p>\\u000d\\u000a<p>（<code>import { inputTask, addTask } from '../actions/tasks';</code> の部分）</p>\\u000d\\u000a<p>関数には <code>export default</code> を付けてください。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb81\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> inputTask<span class=\\u0022op\\u0022>,</span> addTask <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../actions/tasks&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>TodoApp</span>(<span class=\\u0022op\\u0022>{</span> store <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022kw\\u0022>const</span> <span class=\\u0022op\\u0022>{</span> task<span class=\\u0022op\\u0022>,</span> tasks <span class=\\u0022op\\u0022>}</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>getState</span>()<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-7\\u0022 title=\\u00227\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-8\\u0022 title=\\u00228\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;text&quot;</span> onChange<span class=\\u0022op\\u0022>={</span>(e) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>inputTask</span>(<span class=\\u0022va\\u0022>e</span>.<span class=\\u0022va\\u0022>target</span>.<span class=\\u0022at\\u0022>value</span>))<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-9\\u0022 title=\\u00229\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;button&quot;</span> value<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;add&quot;</span> onClick<span class=\\u0022op\\u0022>={</span>() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>addTask</span>(task))<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-10\\u0022 title=\\u002210\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-11\\u0022 title=\\u002211\\u0022>        <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-12\\u0022 title=\\u002212\\u0022>          <span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>map</span>(<span class=\\u0022kw\\u0022>function</span>(item<span class=\\u0022op\\u0022>,</span> i) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-13\\u0022 title=\\u002213\\u0022>            <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-14\\u0022 title=\\u002214\\u0022>              <span class=\\u0022op\\u0022>&lt;</span>li key<span class=\\u0022op\\u0022>={</span>i<span class=\\u0022op\\u0022>}&gt;{</span>item<span class=\\u0022op\\u0022>}</span>&lt;/li<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-15\\u0022 title=\\u002215\\u0022>            )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-16\\u0022 title=\\u002216\\u0022>          <span class=\\u0022op\\u0022>}</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-17\\u0022 title=\\u002217\\u0022>        <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-18\\u0022 title=\\u002218\\u0022>      &lt;/ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-19\\u0022 title=\\u002219\\u0022>    &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-20\\u0022 title=\\u002220\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb81-21\\u0022 title=\\u002221\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div></li>\\u000d\\u000a<li><p><code>src\\u005cindex.js</code> は、分割したファイルをインポートするように変更します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb82\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> render <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> tasksReducer <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./reducers/tasks&#39;</span><span class=\\u0022op\\u0022>;</span>    <span class=\\u0022co\\u0022>// Reducerのインポート</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> TodoApp <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./components/TodoApp&#39;</span><span class=\\u0022op\\u0022>;</span>     <span class=\\u0022co\\u0022>// Componentのインポート</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> createStore <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-6\\u0022 title=\\u00226\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-7\\u0022 title=\\u00227\\u0022><span class=\\u0022co\\u0022>// Note: 使わないのでコメント化 &gt;&gt;&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-8\\u0022 title=\\u00228\\u0022><span class=\\u0022co\\u0022>// import &#39;./index.css&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-9\\u0022 title=\\u00229\\u0022><span class=\\u0022co\\u0022>// import App from &#39;./App&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-10\\u0022 title=\\u002210\\u0022><span class=\\u0022co\\u0022>// import registerServiceWorker from &#39;./registerServiceWorker&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-11\\u0022 title=\\u002211\\u0022><span class=\\u0022co\\u0022>/// Note: &lt;&lt;&lt; 使わないのでコメント化</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-12\\u0022 title=\\u002212\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-13\\u0022 title=\\u002213\\u0022><span class=\\u0022co\\u0022>// Storeの生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-14\\u0022 title=\\u002214\\u0022><span class=\\u0022kw\\u0022>const</span> store <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createStore</span>(tasksReducer)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-15\\u0022 title=\\u002215\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-16\\u0022 title=\\u002216\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>renderApp</span>(store) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-17\\u0022 title=\\u002217\\u0022>  <span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-18\\u0022 title=\\u002218\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>TodoApp store<span class=\\u0022op\\u0022>={</span>store<span class=\\u0022op\\u0022>}</span> /&gt;<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-19\\u0022 title=\\u002219\\u0022>    <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&#39;root&#39;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-20\\u0022 title=\\u002220\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-21\\u0022 title=\\u002221\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-22\\u0022 title=\\u002222\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-23\\u0022 title=\\u002223\\u0022><span class=\\u0022va\\u0022>store</span>.<span class=\\u0022at\\u0022>subscribe</span>(() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>renderApp</span>(store))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb82-24\\u0022 title=\\u002224\\u0022><span class=\\u0022at\\u0022>renderApp</span>(store)<span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a</ol>\\u000d\\u000a<!-- TODO: p.108 「最終的な」と書いておきつつ、サンプルコードに最後の2行がない。 -->\\u000d\\u000a\\u000d\\u000a<h3 id=\\u0022react-redux\\u0022>react-redux</h3>\\u000d\\u000a<p><code>react-redux</code>は、ReactとReduxの連携をサポートするライブラリです。 Storeの状態変化に応じて該当部分のViewを再描画するのを手助けしてくれます。</p>\\u000d\\u000a<h3 id=\\u0022react-reduxのインストール\\u0022>react-reduxのインストール</h3>\\u000d\\u000a<pre><code>&gt; npm install --save react-redux\\u000d\\u000a</code></pre>\\u000d\\u000a<!-- TODO: p109 `-save`になっている。半角ハイフンがひとつ足りない。 -->\\u000d\\u000a\\u000d\\u000a<p>ReactはViewを扱うライブラリなので、Reduxが有するStoreやActionの情報と疎結合になっていることが望ましい。 そのほうがコンポーネント単体としてもテストしやすいし、コードの可読性も上がります。</p>\\u000d\\u000a<p>Container Component : Reactコンポーネントをラップしたコンポーネント。</p>\\u000d\\u000a<pre><code>ReduxのStoreやActionを受け取り、ReactのPropsとして渡す役を担います。\\u000d\\u000aContainer Componentの責務は、ReactとReduxの橋渡しのみなので、JSXを記述するのは誤りです。\\u000d\\u000a</code></pre>\\u000d\\u000a<p>Presentational Component : Redux依存のない純粋なReactコンポーネント。</p>\\u000d\\u000a<h3 id=\\u0022react-reduxの機能\\u0022>react-reduxの機能</h3>\\u000d\\u000a<p>次の2つの機能があります。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>&lt;Provider&gt;</li>\\u000d\\u000a<li>connect</li>\\u000d\\u000a</ul>\\u000d\\u000a<h4 id=\\u0022provider-store\\u0022>&lt;Provider store&gt;</h4>\\u000d\\u000a<p>dispatchはStoreが持つメソッドなので、ReactコンポーネントからActionをdispatchさせるにはStoreが必要になります。 dispatchしたいコンポーネントすべてに対し、Storeを最上位から渡していくのは得策ではありません。</p>\\u000d\\u000a<p>&lt;Provider&gt;を使うことで<code>connect</code>という関数を使えるようになり、任意のコンポーネントに対してStoreとの紐付けができるようになります。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb85\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb85-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// 最上位のコンポーネントを&lt;Provider&gt;でラップして、propsにStoreを与える</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb85-2\\u0022 title=\\u00222\\u0022><span class=\\u0022co\\u0022>// （内部的にはReactのcontext経由でStoreを保持する仕組み）</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb85-3\\u0022 title=\\u00223\\u0022><span class=\\u0022va\\u0022>ReactDOM</span>.<span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb85-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>Provider store<span class=\\u0022op\\u0022>={</span>store<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb85-5\\u0022 title=\\u00225\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>MyRootComponent /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb85-6\\u0022 title=\\u00226\\u0022>  &lt;/Provider<span class=\\u0022op\\u0022>&gt;,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb85-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&#39;root&#39;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb85-8\\u0022 title=\\u00228\\u0022>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<h4 id=\\u0022connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\\u0022>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</h4>\\u000d\\u000a<p>特定のComponentに対して、Reactのcontextで保持しているStoreを提供します。 Storeさえあれば<code>getState</code>で状態が取得できますし、Actionの<code>dispatch</code>もできます。</p>\\u000d\\u000a<p>引数</p>\\u000d\\u000a<p>mapStateToProps(state, [ownProps]) : Storeから必要なstateを取り出し、ComponentのPropsに割り当てる関数を指定します。</p>\\u000d\\u000a<pre><code>第1引数はStoreのstate。\\u000d\\u000a複数のReducerを組み合わせている場合は、必要な部分のstateのみ取り出して返すようにすれば、不要なコンポーネントを渡さずに済みます。\\u000d\\u000a\\u000d\\u000a第2引数はオプションで、親コンポーネントから引き継がれてきたPropsが格納されています（下記の例では未使用）。\\u000d\\u000a\\u000d\\u000a~~~javascript\\u000d\\u000afunction mapStateToProps({ task, tasks }) {\\u000d\\u000a  return {\\u000d\\u000a    task,\\u000d\\u000a    tasks,\\u000d\\u000a  };\\u000d\\u000a}\\u000d\\u000a~~~\\u000d\\u000a\\u000d\\u000a戻り値のオブジェクトは、connect先のComponentのPropsとして受け取ることができます。\\u000d\\u000a</code></pre>\\u000d\\u000a<p>mapDispatchToProps(dispatch, [ownProps]) : Actionのdispatchを行う処理を指定します。そうすることでコンポーネントからdispatchの概念を隠蔽します。</p>\\u000d\\u000a<pre><code>第1引数に、Storeのdispatchメソッドが渡されてくるので、これを使ってActionをdispatchします。\\u000d\\u000a\\u000d\\u000a~~~javascript\\u000d\\u000a// ActionCreator\\u000d\\u000aconst addTask = (task) =&gt; ({\\u000d\\u000a  type: &quot;ADD_TASK&quot;,\\u000d\\u000a  payload: {\\u000d\\u000a    task\\u000d\\u000a  }\\u000d\\u000a});\\u000d\\u000a\\u000d\\u000afunction mapDispatchToProps(dispatch) {\\u000d\\u000a  return {\\u000d\\u000a    addTask(task) {\\u000d\\u000a      dispatch(addTask(task));\\u000d\\u000a    }\\u000d\\u000a  };\\u000d\\u000a}\\u000d\\u000a~~~\\u000d\\u000a\\u000d\\u000a&lt;!-- TODO: p.112 dispatch(addTask(task});　← } ではなく ) では？ --&gt;\\u000d\\u000a</code></pre>\\u000d\\u000a<p>mergeProps(stateProps, dispatchProps, ownProps) : <code>mapStateToProps</code>と<code>mapDispatchToProps</code>を経たそれぞれのPropsと、親から渡ってきた<code>ownProps</code>をマージして、コンポーネントに渡します。</p>\\u000d\\u000a<pre><code>既定では、以下のように、`Object.assign`関数を使って単純に3つをマージしたものを返す処理が設定されています。\\u000d\\u000a\\u000d\\u000a~~~javascript\\u000d\\u000afunction mergeProps(stateProps, dispatchProps, ownProps) {\\u000d\\u000a  return Object.assign({}, ownProps, stateProps, dispatchProps);\\u000d\\u000a}\\u000d\\u000a~~~\\u000d\\u000a</code></pre>\\u000d\\u000a<p>options : オプションとして次の項目を設定できます。</p>\\u000d\\u000a<pre><code>pure - Boolean\\u000d\\u000a:   規定値はtrueです。trueの場合、関連するState/Propsに変化がなければ、connectは再描画および`mapStateToProps`/`mapDispatchToProps`/`mergeProp`を呼び出しません。\\u000d\\u000a</code></pre>\\u000d\\u000a<!-- TODO: p.114 mapStateToPrupsになっている。Propsでは？ -->\\u000d\\u000a\\u000d\\u000a<pre><code>areStateEqual - Function\\u000d\\u000a:   `pure`がtrueの場合、Storeの中身の差分判定をどのようにするか指定します。\\u000d\\u000a    規定値は、strictEqual（===）です。\\u000d\\u000a\\u000d\\u000aareOwnPropsEqual - Function\\u000d\\u000a:   pureがtrueの場合、OwnPropの中身の差分判定をどのようにするか指定します。\\u000d\\u000a    規定値は、shallowEqual（==）です。\\u000d\\u000a\\u000d\\u000aareStatePropsEqual - Function\\u000d\\u000a:   pureがtrueの場合、mapStateToPropsの結果の差分判定をどのようにするか指定します。\\u000d\\u000a    規定値は、shallowEqual（==）です。\\u000d\\u000a\\u000d\\u000aareMergedPropsEqual - Function\\u000d\\u000a:   pureがtrueの場合、mergePropsの結果の差分判定をどのようにするか指定します。\\u000d\\u000a    規定値は、shallowEqual（==）です。\\u000d\\u000a\\u000d\\u000astoreKey - String\\u000d\\u000a:   もし何らかの理由でStoreを複数用意したいときに指定します。\\u000d\\u000a\\u000d\\u000a    通常であれば不要。\\u000d\\u000a</code></pre>\\u000d\\u000a<h3 id=\\u0022react-reduxの組み込み\\u0022>react-reduxの組み込み</h3>\\u000d\\u000a<h4 id=\\u0022container-componentの作成\\u0022>Container Componentの作成</h4>\\u000d\\u000a<p>ファイル<code>src\\u005ccontainers\\u005cTodoApp.js</code>を作ります。</p>\\u000d\\u000a<p>これにより TodoApp コンポーネントには Prop として次の4つが渡されるようになります。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>task - フォームに入力されたタスク</li>\\u000d\\u000a<li>tasks - タスクの配列</li>\\u000d\\u000a<li>addTask - タスクを追加する関数</li>\\u000d\\u000a<li>inputTask - タスクを入力する関数</li>\\u000d\\u000a</ul>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb91\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> connect <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> TodoApp <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../components/TodoApp&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> inputTask<span class=\\u0022op\\u0022>,</span> addTask <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../actions/tasks&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-5\\u0022 title=\\u00225\\u0022><span class=\\u0022co\\u0022>// Storeにある task と tasks という State を Props に渡す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-6\\u0022 title=\\u00226\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>mapStateToProps</span>(<span class=\\u0022op\\u0022>{</span> task<span class=\\u0022op\\u0022>,</span> tasks <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-8\\u0022 title=\\u00228\\u0022>    task<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-9\\u0022 title=\\u00229\\u0022>    tasks</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-11\\u0022 title=\\u002211\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-12\\u0022 title=\\u002212\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-13\\u0022 title=\\u002213\\u0022><span class=\\u0022co\\u0022>// 該当のActionをDispatchさせる関数を Props に渡す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-14\\u0022 title=\\u002214\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>mapDispatchToProps</span>(dispatch) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-15\\u0022 title=\\u002215\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-16\\u0022 title=\\u002216\\u0022>    <span class=\\u0022at\\u0022>addTask</span>(task) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-17\\u0022 title=\\u002217\\u0022>      <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>addTask</span>(task))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-18\\u0022 title=\\u002218\\u0022>    <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-19\\u0022 title=\\u002219\\u0022>    <span class=\\u0022at\\u0022>inputTask</span>(task) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-20\\u0022 title=\\u002220\\u0022>      <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>inputTask</span>(task))</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-21\\u0022 title=\\u002221\\u0022>    <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-22\\u0022 title=\\u002222\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-23\\u0022 title=\\u002223\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-24\\u0022 title=\\u002224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb91-25\\u0022 title=\\u002225\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022at\\u0022>connect</span>(mapStateToProps<span class=\\u0022op\\u0022>,</span> mapDispatchToProps)(TodoApp)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<h4 id=\\u0022todoappコンポーネントの修正\\u0022>TodoAppコンポーネントの修正</h4>\\u000d\\u000a<p><code>src/components/TodoApp.js</code></p>\\u000d\\u000a<p>変更前 : StoreがPropsに渡ってきて、そこからStateを取得。</p>\\u000d\\u000a<p>変更後 : containersから整形されたオブジェクトがPropsとして渡されてきます。 ActionCreatorやActionのDispatchもcontainers側でやるので、コンポーネント側はPropsで渡ってきたinputTaskとaddTaskを呼び出すだけになります。</p>\\u000d\\u000a<pre><code>これにより、コンポーネントのRedux依存が消え、再利用性も高まりました。\\u000d\\u000a</code></pre>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb93\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-2\\u0022 title=\\u00222\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-3\\u0022 title=\\u00223\\u0022><span class=\\u0022co\\u0022>// 引数を store から変更</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>TodoApp</span>(<span class=\\u0022op\\u0022>{</span> task<span class=\\u0022op\\u0022>,</span> tasks<span class=\\u0022op\\u0022>,</span> inputTask<span class=\\u0022op\\u0022>,</span> addTask <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022co\\u0022>// onChange、onClickの指定時にdispatchが不要になる</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-7\\u0022 title=\\u00227\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-8\\u0022 title=\\u00228\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;text&quot;</span> onChange<span class=\\u0022op\\u0022>={</span>(e) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>inputTask</span>(<span class=\\u0022va\\u0022>e</span>.<span class=\\u0022va\\u0022>target</span>.<span class=\\u0022at\\u0022>value</span>)<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-9\\u0022 title=\\u00229\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;button&quot;</span> value<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;add&quot;</span> onClick<span class=\\u0022op\\u0022>={</span>() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>addTask</span>(task)<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-10\\u0022 title=\\u002210\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-11\\u0022 title=\\u002211\\u0022>        <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-12\\u0022 title=\\u002212\\u0022>          <span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>map</span>(<span class=\\u0022kw\\u0022>function</span>(item<span class=\\u0022op\\u0022>,</span> i) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-13\\u0022 title=\\u002213\\u0022>            <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-14\\u0022 title=\\u002214\\u0022>              <span class=\\u0022op\\u0022>&lt;</span>li key<span class=\\u0022op\\u0022>={</span>i<span class=\\u0022op\\u0022>}&gt;{</span>item<span class=\\u0022op\\u0022>}</span>&lt;/li<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-15\\u0022 title=\\u002215\\u0022>            )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-16\\u0022 title=\\u002216\\u0022>          <span class=\\u0022op\\u0022>}</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-17\\u0022 title=\\u002217\\u0022>        <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-18\\u0022 title=\\u002218\\u0022>      &lt;/ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-19\\u0022 title=\\u002219\\u0022>    &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-20\\u0022 title=\\u002220\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb93-21\\u0022 title=\\u002221\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<h4 id=\\u0022indexjsの修正\\u0022>index.jsの修正</h4>\\u000d\\u000a<ul>\\u000d\\u000a<li>Providerのimportを追加</li>\\u000d\\u000a<li>TodoAppのimportをcomponentsではなくcontainersにする</li>\\u000d\\u000a<li>Storeのsubscribeでコンポーネントの再描画を行っていた処理を削除する</li>\\u000d\\u000a<li>function renderApp の処理を外に出す（render()をfunctionではなくする）</li>\\u000d\\u000a</ul>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb94\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Provider <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> createStore <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> render <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>import</span> tasksReducer <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./reducers/tasks&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-6\\u0022 title=\\u00226\\u0022><span class=\\u0022im\\u0022>import</span> TodoApp <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./containers/TodoApp&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-7\\u0022 title=\\u00227\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-8\\u0022 title=\\u00228\\u0022><span class=\\u0022co\\u0022>// Note: 使わないのでコメント化 &gt;&gt;&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-9\\u0022 title=\\u00229\\u0022><span class=\\u0022co\\u0022>// import &#39;./index.css&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-10\\u0022 title=\\u002210\\u0022><span class=\\u0022co\\u0022>// import App from &#39;./App&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-11\\u0022 title=\\u002211\\u0022><span class=\\u0022co\\u0022>// import registerServiceWorker from &#39;./registerServiceWorker&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-12\\u0022 title=\\u002212\\u0022><span class=\\u0022co\\u0022>/// Note: &lt;&lt;&lt; 使わないのでコメント化</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-13\\u0022 title=\\u002213\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-14\\u0022 title=\\u002214\\u0022><span class=\\u0022co\\u0022>// Storeの生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-15\\u0022 title=\\u002215\\u0022><span class=\\u0022kw\\u0022>const</span> store <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createStore</span>(tasksReducer)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-16\\u0022 title=\\u002216\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-17\\u0022 title=\\u002217\\u0022><span class=\\u0022co\\u0022>// &lt;Provider&gt;を追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-18\\u0022 title=\\u002218\\u0022><span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-19\\u0022 title=\\u002219\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>Provider store<span class=\\u0022op\\u0022>={</span>store<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-20\\u0022 title=\\u002220\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>TodoApp /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-21\\u0022 title=\\u002221\\u0022>  &lt;/Provider<span class=\\u0022op\\u0022>&gt;,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-22\\u0022 title=\\u002222\\u0022>  <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&#39;root&#39;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb94-23\\u0022 title=\\u002223\\u0022>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<h4 id=\\u0022connectadvanced\\u0022>connectAdvanced</h4>\\u000d\\u000a<p>通常の<code>connect</code>よりも自由度を高くpropsの受け渡しをしたい場合、<code>connectAdvanced</code>を使うことができます。</p>\\u000d\\u000a<p><code>mapStateToProps</code>や<code>mapDispatchToProps</code>、<code>mergeProps</code>のあたりの処理を自前で行うイメージです。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb95\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb95-1\\u0022 title=\\u00221\\u0022><span class=\\u0022at\\u0022>connectAdvanced</span>(selectorFactory<span class=\\u0022op\\u0022>,</span> [connectOptions])</a></code></pre></div>\\u000d\\u000a<p>これらについては必要なときに調べるとしましょう。</p>\\u000d\\u000a<h2 id=\\u0022ルーティング\\u0022>ルーティング</h2>\\u000d\\u000a<p>ユーザーからの入力をもとに表示させるページを出し分けることをルーティングといいます。</p>\\u000d\\u000a<p>実装の方法は、どのページにいるのかという情報（URL）をStoreで保持し、変化があった場合にViewを差し替えるようにします。</p>\\u000d\\u000a<h3 id=\\u0022実装パターン\\u0022>実装パターン</h3>\\u000d\\u000a<p>URL遷移なし : URLを使わずにアプリの内部で状態を保持する方法。</p>\\u000d\\u000a<pre><code>たとえば、Storeにpageというプロパティを用意し、ここでいまどのページにいるのかを管理します。\\u000d\\u000aですが、画面のリロードによって状態が元に戻ってしまうため現実的ではありません。\\u000d\\u000a</code></pre>\\u000d\\u000a<p>URL Hash : URL Hash（<code>#</code>)を使ってクライアントサイドのルーティングを実現する方法です。</p>\\u000d\\u000a<pre><code>aタグによるページ内移動と同じ仕組みなので、サーバーにリクエストは投げられません。\\u000d\\u000a\\u000d\\u000aHashは`location.hash`で取得できます。\\u000d\\u000ahashが変更されたときに発火する`hashchange`イベントをハンドリングしてコンポーネントを描画します。\\u000d\\u000a</code></pre>\\u000d\\u000a<p>history API : ブラウザの履歴情報を操作するAPI（history API）を使った方法です。</p>\\u000d\\u000a<pre><code>- `pushState`で履歴を追加できます。このとき、サーバーにリクエストは飛びません。\\u000d\\u000a- 画面をリロードされたときは、その時点のURLにリクエストが投げられます。そのため、URLに該当するリソースがないと404エラーになってしまいます。\\u000d\\u000a- 404エラーに対応するため、サーバーサイトで常にSPAの基点となるべきテンプレートを返すようにします。\\u000d\\u000a- `webpack-dev-server`を使っているときは、History API Fallback機能を使うとWebサーバーが返すリソースがない場合、自動で index.html を返してくれます。\\u000d\\u000a- Reduxのconnectを使っている場合は`connect-history-api-fallback`というミドルウェアを使います。\\u000d\\u000a</code></pre>\\u000d\\u000a<h3 id=\\u0022ルーティングライブラリ\\u0022>ルーティングライブラリ</h3>\\u000d\\u000a<p>React Router V4 : メジャーなルーティングライブラリ。react-nativeを使ったアプリ開発でも使うことができます。</p>\\u000d\\u000a<pre><code>Webアプリでは`react-router-dom`パッケージを使います。\\u000d\\u000a</code></pre>\\u000d\\u000a<h4 id=\\u0022インストール\\u0022>インストール</h4>\\u000d\\u000a<pre><code>&gt; npm install --save react-router-dom\\u000d\\u000a</code></pre>\\u000d\\u000a<p>react-router-redux : react-routerをReduxに最適化したもの。</p>\\u000d\\u000a<pre><code>- react-routerのみでは、URLの変更を`&lt;Link&gt;`や`&lt;Redirect&gt;`経由でしかできません。\\u000d\\u000a- react-router-reduxでは、ルーティング情報をStoreのStateで管理しつつ、pushやreplaceといったAPIを使ってURLを変更できます。\\u000d\\u000a</code></pre>\\u000d\\u000a<h4 id=\\u0022インストール-1\\u0022>インストール</h4>\\u000d\\u000a<p>react-routerも動作に必要です。react-router-domパッケージも一緒にインストールします。</p>\\u000d\\u000a<p>Note: : react-router 4.x を使う場合、react-router-redux 5.x が必要です。 react-router-reduxに〝@next〟をつけてインストールします。</p>\\u000d\\u000a<pre><code>[react-router-redux - Installation](https://github.com/ReactTraining/react-router/tree/master/packages/react-router-redux#installation) より。\\u000d\\u000a</code></pre>\\u000d\\u000a<pre><code>&gt; npm install --save react-router-dom react-router-redux@next history\\u000d\\u000a</code></pre>\\u000d\\u000a<h4 id=\\u0022特徴\\u0022>特徴</h4>\\u000d\\u000a<ul>\\u000d\\u000a<li>react-routerのAPIはそのまま利用できます。</li>\\u000d\\u000a<li>react-router-reduxがやっていることは、historyオブジェクトを強化し、その変更をStoreのStateに常に同期することです。</li>\\u000d\\u000a</ul>\\u000d\\u000a<h4 id=\\u0022導入方法\\u0022>導入方法</h4>\\u000d\\u000a<p>Storeの生成処理が複雑なので別ファイルとして切り出します。 その中にStoreを生成する関数を定義します。</p>\\u000d\\u000a<p><code>src/store/index.js</code>というファイルを作成します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb104\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022co\\u0022>// 名前が被るので別名でインポートする</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-3\\u0022 title=\\u00223\\u0022>  createStore <span class=\\u0022im\\u0022>as</span> reduxCreateStore<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-4\\u0022 title=\\u00224\\u0022>  combineReducers<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-5\\u0022 title=\\u00225\\u0022>  applyMiddleware</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-6\\u0022 title=\\u00226\\u0022><span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-7\\u0022 title=\\u00227\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> routerReducer<span class=\\u0022op\\u0022>,</span> routerMiddleware <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-8\\u0022 title=\\u00228\\u0022><span class=\\u0022im\\u0022>import</span> tasksReducer <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../reducers/tasks&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-9\\u0022 title=\\u00229\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-10\\u0022 title=\\u002210\\u0022><span class=\\u0022co\\u0022>// Storeを生成するための関数を定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-11\\u0022 title=\\u002211\\u0022><span class=\\u0022co\\u0022>// historyはsrc/index.jsからもらう</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-12\\u0022 title=\\u002212\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>createStore</span>(history) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-13\\u0022 title=\\u002213\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022at\\u0022>reduxCreateStore</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-14\\u0022 title=\\u002214\\u0022>    <span class=\\u0022at\\u0022>combineReducers</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-15\\u0022 title=\\u002215\\u0022>      <span class=\\u0022co\\u0022>// tasksReducersをtasksというキーに割り当てる</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-16\\u0022 title=\\u002216\\u0022>      <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> tasksReducer<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-17\\u0022 title=\\u002217\\u0022>      <span class=\\u0022co\\u0022>// react-router-reduxのReducer</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-18\\u0022 title=\\u002218\\u0022>      <span class=\\u0022dt\\u0022>router</span><span class=\\u0022op\\u0022>:</span> routerReducer</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-19\\u0022 title=\\u002219\\u0022>    <span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-20\\u0022 title=\\u002220\\u0022>    <span class=\\u0022at\\u0022>applyMiddleware</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-21\\u0022 title=\\u002221\\u0022>      <span class=\\u0022co\\u0022>// react-router-reduxのRedux Middleware</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-22\\u0022 title=\\u002222\\u0022>      <span class=\\u0022at\\u0022>routerMiddleware</span>(history)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-23\\u0022 title=\\u002223\\u0022>    )</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-24\\u0022 title=\\u002224\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb104-25\\u0022 title=\\u002225\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<ul>\\u000d\\u000a<li>react-router-reduxは<code>routerReducer</code>というルーティングのためのReducerを持っています。</li>\\u000d\\u000a<li>自前のReducerと一緒に使うために、combineReducerを使ってReducerを合成します。</li>\\u000d\\u000a<li>react-router-reduxはルーティングのための<code>routerMiddleware</code>というMiddlewareも提供しています。 このMiddlewareにより、ReduxのAction経由でルーティングを制御できるようになります。</li>\\u000d\\u000a<li><code>applyMiddleware</code>を使って、<code>routerMiddleware</code>を適用します。</li>\\u000d\\u000a</ul>\\u000d\\u000a<p>Storeの生成</p>\\u000d\\u000a<p><code>src/index.js</code>を変更します。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li><code>import { createStore } from 'redux';</code>を消す。</li>\\u000d\\u000a<li><code>import tasksReducer from './reducers/tasks';</code> を消す。</li>\\u000d\\u000a<li><code>react-router-redux</code>と<code>history</code>、<code>src/store/index.js</code>のインポートを追加。</li>\\u000d\\u000a<li>historyのインスタンス生成を追加。</li>\\u000d\\u000a<li>&lt;ConnectedRouter&gt;にhistoryを渡す処理を追加。</li>\\u000d\\u000a<li>createStoreの引数を<code>tasksReducer</code>から<code>history</code>に変更。</li>\\u000d\\u000a</ul>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb105\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Provider <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> render <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> ConnectedRouter <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-redux&#39;</span><span class=\\u0022op\\u0022>;</span>             <span class=\\u0022co\\u0022>// 追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>import</span> createBrowserHistory <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;history/createBrowserHistory&#39;</span><span class=\\u0022op\\u0022>;</span>  <span class=\\u0022co\\u0022>// 追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-6\\u0022 title=\\u00226\\u0022><span class=\\u0022im\\u0022>import</span> TodoApp <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./containers/TodoApp&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-7\\u0022 title=\\u00227\\u0022><span class=\\u0022im\\u0022>import</span> createStore <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./store&#39;</span><span class=\\u0022op\\u0022>;</span>                                <span class=\\u0022co\\u0022>// 追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-8\\u0022 title=\\u00228\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-9\\u0022 title=\\u00229\\u0022><span class=\\u0022co\\u0022>// Note: 使わないのでコメント化 &gt;&gt;&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-10\\u0022 title=\\u002210\\u0022><span class=\\u0022co\\u0022>// import &#39;./index.css&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-11\\u0022 title=\\u002211\\u0022><span class=\\u0022co\\u0022>// import App from &#39;./App&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-12\\u0022 title=\\u002212\\u0022><span class=\\u0022co\\u0022>// import registerServiceWorker from &#39;./registerServiceWorker&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-13\\u0022 title=\\u002213\\u0022><span class=\\u0022co\\u0022>/// Note: &lt;&lt;&lt; 使わないのでコメント化</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-14\\u0022 title=\\u002214\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-15\\u0022 title=\\u002215\\u0022><span class=\\u0022co\\u0022>// history のインスタンスを生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-16\\u0022 title=\\u002216\\u0022><span class=\\u0022kw\\u0022>const</span> history <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createBrowserHistory</span>()<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-17\\u0022 title=\\u002217\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-18\\u0022 title=\\u002218\\u0022><span class=\\u0022co\\u0022>// Storeの生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-19\\u0022 title=\\u002219\\u0022><span class=\\u0022kw\\u0022>const</span> store <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createStore</span>(history)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-20\\u0022 title=\\u002220\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-21\\u0022 title=\\u002221\\u0022><span class=\\u0022co\\u0022>// &lt;ConnectedRouter&gt;を追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-22\\u0022 title=\\u002222\\u0022><span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-23\\u0022 title=\\u002223\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>Provider store<span class=\\u0022op\\u0022>={</span>store<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-24\\u0022 title=\\u002224\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>ConnectedRouter history<span class=\\u0022op\\u0022>={</span>history<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-25\\u0022 title=\\u002225\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>TodoApp /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-26\\u0022 title=\\u002226\\u0022>    &lt;/ConnectedRouter<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-27\\u0022 title=\\u002227\\u0022>  &lt;/Provider<span class=\\u0022op\\u0022>&gt;,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-28\\u0022 title=\\u002228\\u0022>  <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&#39;root&#39;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb105-29\\u0022 title=\\u002229\\u0022>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p><code>src/store/index.js</code>でReducerの合成をしたため、Reducerの構成が変更になっています。</p>\\u000d\\u000a<p>Storeの構成</p>\\u000d\\u000a<p>↓</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb106\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb106-1\\u0022 title=\\u00221\\u0022><span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb106-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb106-3\\u0022 title=\\u00223\\u0022>    <span class=\\u0022dt\\u0022>task</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb106-4\\u0022 title=\\u00224\\u0022>    <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> []</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb106-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb106-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022dt\\u0022>router</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb106-7\\u0022 title=\\u00227\\u0022>    <span class=\\u0022dt\\u0022>location</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb106-8\\u0022 title=\\u00228\\u0022>      <span class=\\u0022co\\u0022>// ルーティング情報</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb106-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb106-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb106-11\\u0022 title=\\u002211\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>そのため、<code>src/containers/TodoApp.js</code>の<code>mapStateToProps</code>も変更する必要があります。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb107\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb107-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>mapStateToProps</span>(<span class=\\u0022op\\u0022>{</span> tasks <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb107-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb107-3\\u0022 title=\\u00223\\u0022>    <span class=\\u0022dt\\u0022>task</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>task</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb107-4\\u0022 title=\\u00224\\u0022>    <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>tasks</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb107-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb107-6\\u0022 title=\\u00226\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<h4 id=\\u0022action経由によるルーティング\\u0022>Action経由によるルーティング</h4>\\u000d\\u000a<p><code>routerMiddleware</code>を適用することで、Action経由でルーティングをすることができます。</p>\\u000d\\u000a<p><code>react-router-redux</code>が用意している次のようなActionCreatorを用いたルーティングができるようになります。</p>\\u000d\\u000a<p>push : 履歴に新しいlocationを追加します。</p>\\u000d\\u000a<p>replace : 現在の履歴を新しいlocationに置き換えます。</p>\\u000d\\u000a<p>go : 相対値（1 や -2 など）を指定して、履歴を移動します。</p>\\u000d\\u000a<p>goForward : 履歴を1つ進めます。</p>\\u000d\\u000a<p>goBack : 履歴を1つ戻ります。</p>\\u000d\\u000a<h4 id=\\u0022ボタンを押すとエラーページに移動するサンプル\\u0022>ボタンを押すとエラーページに移動するサンプル</h4>\\u000d\\u000a<p><code>src/components/Error.js</code>ファイルを作成します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb108\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb108-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb108-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Link <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb108-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb108-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>Error</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb108-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb108-6\\u0022 title=\\u00226\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb108-7\\u0022 title=\\u00227\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>h1<span class=\\u0022op\\u0022>&gt;</span>エラーページ&lt;/h1<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb108-8\\u0022 title=\\u00228\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>Link to<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/&quot;</span><span class=\\u0022op\\u0022>&gt;</span>戻る&lt;/Link<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb108-9\\u0022 title=\\u00229\\u0022>    &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb108-10\\u0022 title=\\u002210\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb108-11\\u0022 title=\\u002211\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p><code>src/index.js</code>を変更して、エラーページに移動できるようにします。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb109\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> render <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Route <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-dom&#39;</span><span class=\\u0022op\\u0022>;</span>     <span class=\\u0022co\\u0022>// 追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Provider <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> ConnectedRouter <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-6\\u0022 title=\\u00226\\u0022><span class=\\u0022im\\u0022>import</span> createBrowserHistory <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;history/createBrowserHistory&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-7\\u0022 title=\\u00227\\u0022><span class=\\u0022im\\u0022>import</span> TodoApp <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./containers/TodoApp&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-8\\u0022 title=\\u00228\\u0022><span class=\\u0022im\\u0022>import</span> Error <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./components/Error&#39;</span><span class=\\u0022op\\u0022>;</span>       <span class=\\u0022co\\u0022>// 追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-9\\u0022 title=\\u00229\\u0022><span class=\\u0022im\\u0022>import</span> createStore <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./store&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-10\\u0022 title=\\u002210\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-11\\u0022 title=\\u002211\\u0022><span class=\\u0022co\\u0022>// Note: 使わないのでコメント化 &gt;&gt;&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-12\\u0022 title=\\u002212\\u0022><span class=\\u0022co\\u0022>// import &#39;./index.css&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-13\\u0022 title=\\u002213\\u0022><span class=\\u0022co\\u0022>// import App from &#39;./App&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-14\\u0022 title=\\u002214\\u0022><span class=\\u0022co\\u0022>// import registerServiceWorker from &#39;./registerServiceWorker&#39;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-15\\u0022 title=\\u002215\\u0022><span class=\\u0022co\\u0022>/// Note: &lt;&lt;&lt; 使わないのでコメント化</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-16\\u0022 title=\\u002216\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-17\\u0022 title=\\u002217\\u0022><span class=\\u0022co\\u0022>// history のインスタンスを生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-18\\u0022 title=\\u002218\\u0022><span class=\\u0022kw\\u0022>const</span> history <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createBrowserHistory</span>()<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-19\\u0022 title=\\u002219\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-20\\u0022 title=\\u002220\\u0022><span class=\\u0022co\\u0022>// Storeの生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-21\\u0022 title=\\u002221\\u0022><span class=\\u0022kw\\u0022>const</span> store <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createStore</span>(history)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-22\\u0022 title=\\u002222\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-23\\u0022 title=\\u002223\\u0022><span class=\\u0022co\\u0022>// &lt;ConnectedRouter&gt;を追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-24\\u0022 title=\\u002224\\u0022><span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-25\\u0022 title=\\u002225\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>Provider store<span class=\\u0022op\\u0022>={</span>store<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-26\\u0022 title=\\u002226\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>ConnectedRouter history<span class=\\u0022op\\u0022>={</span>history<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-27\\u0022 title=\\u002227\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-28\\u0022 title=\\u002228\\u0022>        <span class=\\u0022op\\u0022>{</span> <span class=\\u0022co\\u0022>/* ルーティングさせる */</span> <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-29\\u0022 title=\\u002229\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>Route exact path<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/&quot;</span> component<span class=\\u0022op\\u0022>={</span>TodoApp<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-30\\u0022 title=\\u002230\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>Route exact path<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/error&quot;</span> component<span class=\\u0022op\\u0022>={</span>Error<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-31\\u0022 title=\\u002231\\u0022>      &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-32\\u0022 title=\\u002232\\u0022>    &lt;/ConnectedRouter<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-33\\u0022 title=\\u002233\\u0022>  &lt;/Provider<span class=\\u0022op\\u0022>&gt;,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-34\\u0022 title=\\u002234\\u0022>  <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&#39;root&#39;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb109-35\\u0022 title=\\u002235\\u0022>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p><code>react-router-dom</code>のRouteコンポーネントを使ってルーティングを用意しています。</p>\\u000d\\u000a<p><code>/</code> であれば、Todoアプリを表示。 <code>/error</code>であれば、エラーページを表示。</p>\\u000d\\u000a<p><code>src/containers/TodoApp.js</code>にエラーページにリダイレクトさせる処理を追加します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb110\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> connect <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> push <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-redux&#39;</span><span class=\\u0022op\\u0022>;</span>    <span class=\\u0022co\\u0022>// 追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> TodoApp <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../components/TodoApp&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> inputTask<span class=\\u0022op\\u0022>,</span> addTask <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../actions/tasks&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-5\\u0022 title=\\u00225\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-6\\u0022 title=\\u00226\\u0022><span class=\\u0022co\\u0022>// Storeにある task と tasks という State を Props に渡す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-7\\u0022 title=\\u00227\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>mapStateToProps</span>(<span class=\\u0022op\\u0022>{</span> tasks <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-8\\u0022 title=\\u00228\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022dt\\u0022>task</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>task</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-10\\u0022 title=\\u002210\\u0022>    <span class=\\u0022dt\\u0022>tasks</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>tasks</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-11\\u0022 title=\\u002211\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-12\\u0022 title=\\u002212\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-13\\u0022 title=\\u002213\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-14\\u0022 title=\\u002214\\u0022><span class=\\u0022co\\u0022>// 該当のActionをDispatchさせる関数を Props に渡す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-15\\u0022 title=\\u002215\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>mapDispatchToProps</span>(dispatch) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-17\\u0022 title=\\u002217\\u0022>    <span class=\\u0022at\\u0022>addTask</span>(task) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-18\\u0022 title=\\u002218\\u0022>      <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>addTask</span>(task))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-19\\u0022 title=\\u002219\\u0022>    <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-20\\u0022 title=\\u002220\\u0022>    <span class=\\u0022at\\u0022>inputTask</span>(task) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-21\\u0022 title=\\u002221\\u0022>      <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>inputTask</span>(task))</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-22\\u0022 title=\\u002222\\u0022>    <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-23\\u0022 title=\\u002223\\u0022>    <span class=\\u0022co\\u0022>// リダイレクト処理を追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-24\\u0022 title=\\u002224\\u0022>    <span class=\\u0022co\\u0022>// react-router-reduxが提供しているpushというActionCreatorを使う</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-25\\u0022 title=\\u002225\\u0022>    <span class=\\u0022at\\u0022>redirectToError</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-26\\u0022 title=\\u002226\\u0022>      <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>push</span>(<span class=\\u0022st\\u0022>&#39;/error&#39;</span>))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-27\\u0022 title=\\u002227\\u0022>    <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-28\\u0022 title=\\u002228\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-29\\u0022 title=\\u002229\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-30\\u0022 title=\\u002230\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb110-31\\u0022 title=\\u002231\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022at\\u0022>connect</span>(mapStateToProps<span class=\\u0022op\\u0022>,</span> mapDispatchToProps)(TodoApp)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>リダイレクトする処理を呼び出せるように、<code>src/components/TodoApp.js</code>を変更します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb111\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-2\\u0022 title=\\u00222\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-3\\u0022 title=\\u00223\\u0022><span class=\\u0022co\\u0022>// 引数に redirectToError を追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>TodoApp</span>(<span class=\\u0022op\\u0022>{</span> task<span class=\\u0022op\\u0022>,</span> tasks<span class=\\u0022op\\u0022>,</span> inputTask<span class=\\u0022op\\u0022>,</span> addTask<span class=\\u0022op\\u0022>,</span> redirectToError <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-6\\u0022 title=\\u00226\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-7\\u0022 title=\\u00227\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;text&quot;</span> onChange<span class=\\u0022op\\u0022>={</span>(e) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>inputTask</span>(<span class=\\u0022va\\u0022>e</span>.<span class=\\u0022va\\u0022>target</span>.<span class=\\u0022at\\u0022>value</span>)<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-8\\u0022 title=\\u00228\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;button&quot;</span> value<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;add&quot;</span> onClick<span class=\\u0022op\\u0022>={</span>() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>addTask</span>(task)<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-9\\u0022 title=\\u00229\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-10\\u0022 title=\\u002210\\u0022>        <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-11\\u0022 title=\\u002211\\u0022>          <span class=\\u0022va\\u0022>tasks</span>.<span class=\\u0022at\\u0022>map</span>(<span class=\\u0022kw\\u0022>function</span>(item<span class=\\u0022op\\u0022>,</span> i) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-12\\u0022 title=\\u002212\\u0022>            <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-13\\u0022 title=\\u002213\\u0022>              <span class=\\u0022op\\u0022>&lt;</span>li key<span class=\\u0022op\\u0022>={</span>i<span class=\\u0022op\\u0022>}&gt;{</span>item<span class=\\u0022op\\u0022>}</span>&lt;/li<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-14\\u0022 title=\\u002214\\u0022>            )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-15\\u0022 title=\\u002215\\u0022>          <span class=\\u0022op\\u0022>}</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-16\\u0022 title=\\u002216\\u0022>        <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-17\\u0022 title=\\u002217\\u0022>      &lt;/ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-18\\u0022 title=\\u002218\\u0022>      <span class=\\u0022op\\u0022>{</span> <span class=\\u0022co\\u0022>/* 追加 */</span> <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-19\\u0022 title=\\u002219\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>button onClick<span class=\\u0022op\\u0022>={</span>() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>redirectToError</span>()<span class=\\u0022op\\u0022>}&gt;</span>エラーページへ移動&lt;/button<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-20\\u0022 title=\\u002220\\u0022>    &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-21\\u0022 title=\\u002221\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb111-22\\u0022 title=\\u002222\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<h2 id=\\u0022redux-middleware\\u0022>Redux Middleware</h2>\\u000d\\u000a<p>Redux Middleware とは、Reduxの機能を拡張する仕組みです。</p>\\u000d\\u000a<p>Middleware ＝ 拡張機能</p>\\u000d\\u000a<p>Redux自体は軽量なアーキテクチャなので、単体では提供していない機能もある。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>Actionのログを取るミドルウェア</li>\\u000d\\u000a<li>非同期処理を可能にするミドルウェア</li>\\u000d\\u000a<li>クラッシュレポートを送信するためのミドルウェア</li>\\u000d\\u000a<li>ルーティングのためのミドルウェア</li>\\u000d\\u000a<li>etc...</li>\\u000d\\u000a</ul>\\u000d\\u000a<h3 id=\\u0022actionのログを取るミドルウェア\\u0022>Actionのログを取るミドルウェア</h3>\\u000d\\u000a<p><code>redux-logger</code>はActionがDispatchされる前後のstateと、DispatchされたActionをコンソールに表示します。 開発時に有用なミドルウェアなのでインストールしたほうがよいでしょう。</p>\\u000d\\u000a<h4 id=\\u0022インストール-2\\u0022>インストール</h4>\\u000d\\u000a<pre><code>&gt; npm install --save redux-logger\\u000d\\u000a</code></pre>\\u000d\\u000a<!-- TODO: p.143 install が insta'l になっている -->\\u000d\\u000a\\u000d\\u000a<h4 id=\\u0022ミドルウェアの適用\\u0022>ミドルウェアの適用</h4>\\u000d\\u000a<p>Reduxにミドルウェアを適用するには、<code>applyMiddleware</code>関数を利用します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb113\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb113-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// ミドルウェアの適用に必要な applyMiddleware 関数をインポートします</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb113-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> createStore<span class=\\u0022op\\u0022>,</span> applyMiddleware <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb113-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb113-4\\u0022 title=\\u00224\\u0022><span class=\\u0022co\\u0022>// ミドルウェアをインポートします</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb113-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>import</span> logger <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux-logger&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb113-6\\u0022 title=\\u00226\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb113-7\\u0022 title=\\u00227\\u0022><span class=\\u0022co\\u0022>// createStoreの第2引数に applyMiddleware を指定し、その引数にミドルウェアを指定します</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb113-8\\u0022 title=\\u00228\\u0022><span class=\\u0022kw\\u0022>const</span> store <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createStore</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb113-9\\u0022 title=\\u00229\\u0022>  reducer<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb113-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022at\\u0022>applyMiddleware</span>(logger)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb113-11\\u0022 title=\\u002211\\u0022>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p><code>applyMiddleware</code>の引数は可変数なので、複数のミドルウェアを指定するときは、以下のようにカンマ区切りで並べて指定します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb114\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb114-1\\u0022 title=\\u00221\\u0022><span class=\\u0022at\\u0022>applyMiddleware</span>(middleware1<span class=\\u0022op\\u0022>,</span> middleware2<span class=\\u0022op\\u0022>,</span> middleware3)</a></code></pre></div>\\u000d\\u000a<h2 id=\\u0022非同期処理\\u0022>非同期処理</h2>\\u000d\\u000a<h3 id=\\u0022同期処理と非同期処理\\u0022>同期処理と非同期処理</h3>\\u000d\\u000a<p>同期処理 : 書いた順に実行される処理</p>\\u000d\\u000a<pre><code>~~~Javascript\\u000d\\u000aconsole.log(&quot;start&quot;);\\u000d\\u000aconsole.log(1 + 1);\\u000d\\u000aconsole.log(&quot;end&quot;);\\u000d\\u000a~~~\\u000d\\u000a</code></pre>\\u000d\\u000a<p>非同期処理 : 必ずしも書いた順には実行されない処理</p>\\u000d\\u000a<pre><code>~~~javascript\\u000d\\u000aconsole.log(&quot;start&quot;);\\u000d\\u000asetTimeout(function () {\\u000d\\u000a  console.log(1 + 1);\\u000d\\u000a}, 1000);\\u000d\\u000aconsole.log(&quot;end&quot;);\\u000d\\u000a~~~\\u000d\\u000a\\u000d\\u000a非同期処理のあとに任意の処理を実行する方法として、コールバック関数やPromise、Async/Awaitなどがあります。\\u000d\\u000a</code></pre>\\u000d\\u000a<h3 id=\\u0022redux-thunkによる非同期処理\\u0022>redux-thunkによる非同期処理</h3>\\u000d\\u000a<p>ReduxではAPIから何かレスポンスが返ってきたら、これをActionとして扱うという作法があります。 これを通常のActionCreatorで記述しようとすると、実はうまく書けません。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb117\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb117-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> requestAPI <span class=\\u0022op\\u0022>=</span> (parameter) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb117-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022kw\\u0022>const</span> response <span class=\\u0022op\\u0022>=</span> </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb117-3\\u0022 title=\\u00223\\u0022>    <span class=\\u0022at\\u0022>fetch</span>(<span class=\\u0022st\\u0022>&#39;APIのURL&#39;</span><span class=\\u0022op\\u0022>,</span> parameter).<span class=\\u0022at\\u0022>then</span>((response) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb117-4\\u0022 title=\\u00224\\u0022>      <span class=\\u0022co\\u0022>// ここで返してもうまく動かない</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb117-5\\u0022 title=\\u00225\\u0022>      <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb117-6\\u0022 title=\\u00226\\u0022>        <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;REQUEST_API&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb117-7\\u0022 title=\\u00227\\u0022>        <span class=\\u0022dt\\u0022>data</span><span class=\\u0022op\\u0022>:</span> response</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb117-8\\u0022 title=\\u00228\\u0022>      <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb117-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb117-10\\u0022 title=\\u002210\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p>Action自体は単なるオブジェクトです。これをstore.dispatch()に与えることでActionが実行されます。 どうにかしてdispatch関数をコード中で使いたい。というときにこのミドルウェアの出番です。</p>\\u000d\\u000a<h3 id=\\u0022thunk-ミドルウェア\\u0022>thunk ミドルウェア</h3>\\u000d\\u000a<p>Reduxで非同期処理をする代表的なミドルウェア。</p>\\u000d\\u000a<pre><code>&gt; npm install --save redux-thunk\\u000d\\u000a</code></pre>\\u000d\\u000a<p>インストールできたらミドルウェアを適用します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb119\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> createStore<span class=\\u0022op\\u0022>,</span> applyMiddleware <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> logger <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux-logger&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> thunk <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux-thunk&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> reducers <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./reducers&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-5\\u0022 title=\\u00225\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-6\\u0022 title=\\u00226\\u0022><span class=\\u0022kw\\u0022>const</span> middlewares <span class=\\u0022op\\u0022>=</span> [logger<span class=\\u0022op\\u0022>,</span> thunk]<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-7\\u0022 title=\\u00227\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-8\\u0022 title=\\u00228\\u0022><span class=\\u0022kw\\u0022>const</span> store <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createStore</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-9\\u0022 title=\\u00229\\u0022>  reducers<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022at\\u0022>applyMiddleware</span>(...<span class=\\u0022at\\u0022>middlewares</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-11\\u0022 title=\\u002211\\u0022>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-12\\u0022 title=\\u002212\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb119-13\\u0022 title=\\u002213\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> store<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<h3 id=\\u0022非同期アクション\\u0022>非同期アクション</h3>\\u000d\\u000a<p>thunkミドルウェアの適用により、非同期で実行されるActionを書けるようになりました。</p>\\u000d\\u000a<p>次のコードサンプルで使っているshortidパッケージはユニークなIDを自動で生成してくれるものです。 インストールは <code>npm install --save shortid</code> でできます。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb120\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> shortid <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;shortid&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-2\\u0022 title=\\u00222\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>*</span> <span class=\\u0022im\\u0022>as</span> types <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../types/todo&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-5\\u0022 title=\\u00225\\u0022><span class=\\u0022co\\u0022>// 同期 ActionCreator</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-6\\u0022 title=\\u00226\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>addTodo</span>(title) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-8\\u0022 title=\\u00228\\u0022>    <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>types</span>.<span class=\\u0022at\\u0022>ADD_TODO</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-10\\u0022 title=\\u002210\\u0022>      <span class=\\u0022dt\\u0022>id</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>shortid</span>.<span class=\\u0022at\\u0022>generate</span>()<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-11\\u0022 title=\\u002211\\u0022>      title</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-12\\u0022 title=\\u002212\\u0022>    <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-13\\u0022 title=\\u002213\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-14\\u0022 title=\\u002214\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-15\\u0022 title=\\u002215\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-16\\u0022 title=\\u002216\\u0022><span class=\\u0022co\\u0022>// 非同期 ActionCreator</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-17\\u0022 title=\\u002217\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>asyncAddTodo</span>(title) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-18\\u0022 title=\\u002218\\u0022>  <span class=\\u0022cf\\u0022>return</span> (dispatch<span class=\\u0022op\\u0022>,</span> getState) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-19\\u0022 title=\\u002219\\u0022>    <span class=\\u0022at\\u0022>setTimeout</span>(() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-20\\u0022 title=\\u002220\\u0022>      <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>addTodo</span>(title))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-21\\u0022 title=\\u002221\\u0022>    <span class=\\u0022op\\u0022>},</span> <span class=\\u0022dv\\u0022>1000</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-22\\u0022 title=\\u002222\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb120-23\\u0022 title=\\u002223\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>同期 ActionCreator はActionオブジェクトを返しています。</p>\\u000d\\u000a<p>非同期 ActionCreator は関数を返しています。 thunkミドルウェアにより、通常のActionオブジェクト以外に関数を返せるようになります。 ここで返した関数は、引数としてdispatch関数とgetState関数を取ります。</p>\\u000d\\u000a<p>dispatch関数はActionオブジェクトを受け取りさえすれば、同期的にreducerに処理を移します。</p>\\u000d\\u000a<p>dispatch関数にさらに関数を渡すこともできます。このときも関数の引数としてdispatch関数とgetState関数を取ります。</p>\\u000d\\u000a<p>ポイント : Reduxアプリでは、最終的にdispatch関数にActionオブジェクトを渡せばreducerに処理が移るという原則がある。</p>\\u000d\\u000a<h3 id=\\u0022thunk-と-promiseasyncawait\\u0022>thunk と Promise、Async/Await</h3>\\u000d\\u000a<p>Promise :<br />\\u000d\\u000a~~~javascript const sleep1000ms = () =&gt; { return new Promise(resolve =&gt; { setTimeout(() =&gt; { resolve(); }, 1000); }); };</p>\\u000d\\u000a<pre><code>export function addTodo(title) {\\u000d\\u000a  return {\\u000d\\u000a    type: types.ADD_TODO,\\u000d\\u000a    payload: {\\u000d\\u000a      id: shortid.generate(),\\u000d\\u000a      title,\\u000d\\u000a    },\\u000d\\u000a  };\\u000d\\u000a}\\u000d\\u000a\\u000d\\u000a// Promise 版\\u000d\\u000aexport function asyncAddTodo(title) {\\u000d\\u000a  return (dispatch) =&gt; {\\u000d\\u000a    sleep1000ms().then(() =&gt; {\\u000d\\u000a      dispatch(addTodo(title));\\u000d\\u000a    });\\u000d\\u000a  };\\u000d\\u000a}\\u000d\\u000a~~~\\u000d\\u000a</code></pre>\\u000d\\u000a<p>Async/Await :<br />\\u000d\\u000a~~~javascript const sleep1000ms = () =&gt; { ... 上記サンプルと同じ };</p>\\u000d\\u000a<pre><code>export function addTodo(title) {\\u000d\\u000a  ... 上記サンプルと同じ\\u000d\\u000a}\\u000d\\u000a\\u000d\\u000a// Async/Await 版\\u000d\\u000aexport function asyncAddTodo(title) {\\u000d\\u000a  return async(dispatch) =&gt; {\\u000d\\u000a    await sleep1000ms();\\u000d\\u000a    dispatch(addTodo(title));\\u000d\\u000a  };\\u000d\\u000a}\\u000d\\u000a~~~\\u000d\\u000a</code></pre>\\u000d\\u000a<h3 id=\\u0022複数のアクションをまとめる\\u0022>複数のアクションをまとめる</h3>\\u000d\\u000a<p>通常のActionCreatorでは、1つの関数では1つのActionしか返せませんでした。 thunkはこれらを1つにまとめたActionとして返すことができます。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb123\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>addTodo</span>(title) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-3\\u0022 title=\\u00223\\u0022>    <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>types</span>.<span class=\\u0022at\\u0022>ADD_TODO</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-4\\u0022 title=\\u00224\\u0022>    <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-5\\u0022 title=\\u00225\\u0022>      <span class=\\u0022dt\\u0022>id</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>shortid</span>.<span class=\\u0022at\\u0022>generate</span>()<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-6\\u0022 title=\\u00226\\u0022>      title<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-7\\u0022 title=\\u00227\\u0022>    <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-8\\u0022 title=\\u00228\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-9\\u0022 title=\\u00229\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-10\\u0022 title=\\u002210\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-11\\u0022 title=\\u002211\\u0022><span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>updateInput</span>(value) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-12\\u0022 title=\\u002212\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-13\\u0022 title=\\u002213\\u0022>    <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>types</span>.<span class=\\u0022at\\u0022>UPDATE_INPUT</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-14\\u0022 title=\\u002214\\u0022>    <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-15\\u0022 title=\\u002215\\u0022>      value<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-16\\u0022 title=\\u002216\\u0022>    <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-17\\u0022 title=\\u002217\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-18\\u0022 title=\\u002218\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-19\\u0022 title=\\u002219\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-20\\u0022 title=\\u002220\\u0022><span class=\\u0022co\\u0022>// 上の2つのActionを1つにまとめる</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-21\\u0022 title=\\u002221\\u0022><span class=\\u0022co\\u0022>// これをReactコンポーネントにバインドする</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-22\\u0022 title=\\u002222\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>addTodoAndClear</span>(title) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-23\\u0022 title=\\u002223\\u0022>  <span class=\\u0022cf\\u0022>return</span> (dispatch) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-24\\u0022 title=\\u002224\\u0022>    <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>addTodo</span>(title))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-25\\u0022 title=\\u002225\\u0022>    <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>updateInput</span>(<span class=\\u0022st\\u0022>&#39;&#39;</span>))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-26\\u0022 title=\\u002226\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb123-27\\u0022 title=\\u002227\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>1つの操作で複数の処理を行うときのアプローチとして、以下が考えられます。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>ActionCreatorでまとめる。</li>\\u000d\\u000a<li>1つのActionとして記述し、reducerで2つの操作を行う。</li>\\u000d\\u000a<li>複数のActionをReactコンポーネントのボタンにバインドする。</li>\\u000d\\u000a</ul>\\u000d\\u000a<p>ActionCreatorでまとめるのがベターな方法です。 理由は次の2つです。</p>\\u000d\\u000a<ol>\\u000d\\u000a<li><p>それぞれのActionの処理を独立して考えられる。</p>\\u000d\\u000a<p>サンプルコードの場合、TODOを追加することと、フォームをクリアすることに直接の関係はありません。 TODOをコピーするときなどフォームを使わずにTODOを追加する方法を増やすときは、addTodo関数については再利用ができそうです。</p></li>\\u000d\\u000a<li><p>ActionCreatorをユーザー操作とひも付けられる。</p>\\u000d\\u000a<p>ActionCreatorはContainerコンポーネントからpropsとしてUI要素を持つプレゼンテーショナルコンポーネントに渡されるはずです。 このとき、プレゼンテーショナルコンポーネントは「このボタンを押すと何が起きるかはわからないが、渡された関数を叩けばよい」というように作られているべきです。</p>\\u000d\\u000a<p>ボタンを押したら「TODOを追加する関数を叩く」のと「フォームをクリアする関数を叩く」ことをプレゼンテーショナルコンポーネントに書いてしまうと、コンポーネントはビジネスロジックや仕様を反映し、汎用性を失ってしまいます。</p></li>\\u000d\\u000a</ol>\\u000d\\u000a<h3 id=\\u0022getstate関数\\u0022>getState関数</h3>\\u000d\\u000a<p>getState関数はstoreが持つ関数と同一で、すべてのstateを返します。 ActionCreator内でstoreの内容を知ることで、できることが広がります。</p>\\u000d\\u000a<p>たとえば、登録済みのTODOは追加しないようにする。など。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb124\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>addUniqueTodo</span>(title) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022cf\\u0022>return</span> (dispatch<span class=\\u0022op\\u0022>,</span> getState) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-3\\u0022 title=\\u00223\\u0022>    <span class=\\u0022kw\\u0022>const</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-4\\u0022 title=\\u00224\\u0022>      <span class=\\u0022dt\\u0022>todo</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-5\\u0022 title=\\u00225\\u0022>        todos<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-6\\u0022 title=\\u00226\\u0022>      <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-7\\u0022 title=\\u00227\\u0022>    <span class=\\u0022op\\u0022>}</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>getState</span>()<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-8\\u0022 title=\\u00228\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022co\\u0022>// stateに保存されたTodoに同一のタイトルがあったら登録済み</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-10\\u0022 title=\\u002210\\u0022>    <span class=\\u0022kw\\u0022>const</span> isDuplicated <span class=\\u0022op\\u0022>=</span> <span class=\\u0022va\\u0022>todos</span>.<span class=\\u0022at\\u0022>some</span>(todo <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022va\\u0022>todo</span>.<span class=\\u0022at\\u0022>title</span> <span class=\\u0022op\\u0022>===</span> title)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-11\\u0022 title=\\u002211\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-12\\u0022 title=\\u002212\\u0022>    <span class=\\u0022cf\\u0022>if</span> (isDuplicated) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-13\\u0022 title=\\u002213\\u0022>      <span class=\\u0022cf\\u0022>return</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-14\\u0022 title=\\u002214\\u0022>    <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-15\\u0022 title=\\u002215\\u0022>    <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>addTodo</span>(title))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb124-17\\u0022 title=\\u002217\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>この処理はReducerでもできますが、ActionCreatorで処理すると次のメリットがあります。</p>\\u000d\\u000a<ol>\\u000d\\u000a<li><p>すべてのstateを参照できる</p>\\u000d\\u000a<p>分割されたReducerは、ほかのReducerが持っているstateを参照することができません。 ほかのReducerが持っているstateを使ってActionの動作を振り分けたいときは、ActionCreatorでgetStateするのがよいでしょう。</p></li>\\u000d\\u000a<li><p>Action、Reducerの処理を簡潔にできる</p>\\u000d\\u000a<p>〝ActionをどうDispatchするか〟の部分をActionCreatorとして切り出しておくことで、アクションとそれに対応するReducerの処理を簡潔にできます。</p></li>\\u000d\\u000a</ol>\\u000d\\u000a<h2 id=\\u0022uiをきれいにする\\u0022>UIをきれいにする</h2>\\u000d\\u000a<h3 id=\\u0022style属性を使う方法\\u0022>style属性を使う方法</h3>\\u000d\\u000a<p>※style属性を使っての指定は非推奨です。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li><p>JSXのstyle属性を使って、直接スタイルを適用できる。</p></li>\\u000d\\u000a<li><p>オブジェクトのキーにCSSプロパティをキャメルケースで指定、オブジェクトの値にCSSの値を指定します。</p></li>\\u000d\\u000a<li><p>値にNumber型を指定したときは自動でpxが追加されます。px以外の単位を指定するときは、単位付きの値を文字列で指定します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb125\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb125-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// font-size: 20px</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb125-2\\u0022 title=\\u00222\\u0022><span class=\\u0022op\\u0022>&lt;</span>div style<span class=\\u0022op\\u0022>={{</span> <span class=\\u0022dt\\u0022>fontSize</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022dv\\u0022>20</span> <span class=\\u0022op\\u0022>}}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb125-3\\u0022 title=\\u00223\\u0022>  Hello World</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb125-4\\u0022 title=\\u00224\\u0022>&lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb125-5\\u0022 title=\\u00225\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb125-6\\u0022 title=\\u00226\\u0022><span class=\\u0022co\\u0022>// font-size: 2em</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb125-7\\u0022 title=\\u00227\\u0022><span class=\\u0022op\\u0022>&lt;</span>div style<span class=\\u0022op\\u0022>={{</span> <span class=\\u0022dt\\u0022>fontSize</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;2em&quot;</span> <span class=\\u0022op\\u0022>}}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb125-8\\u0022 title=\\u00228\\u0022>  Hello World</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb125-9\\u0022 title=\\u00229\\u0022>&lt;/div<span class=\\u0022op\\u0022>&gt;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>ベンダープレフィクスは自動で付与されません。自分で指定する必要があります。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb126\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb126-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> style <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb126-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022co\\u0022>// ベンダープレフィクス付きのスタイル</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb126-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022dt\\u0022>WebkitTransition</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;all&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb126-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022co\\u0022>// 通常のスタイル</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb126-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022dt\\u0022>transition</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;all&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb126-6\\u0022 title=\\u00226\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb126-7\\u0022 title=\\u00227\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb126-8\\u0022 title=\\u00228\\u0022><span class=\\u0022kw\\u0022>const</span> HelloWorldComponent <span class=\\u0022op\\u0022>=</span> () <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb126-9\\u0022 title=\\u00229\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>&lt;</span>div style<span class=\\u0022op\\u0022>={</span> style <span class=\\u0022op\\u0022>}&gt;</span>Hello World&lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb126-10\\u0022 title=\\u002210\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div></li>\\u000d\\u000a</ul>\\u000d\\u000a<h3 id=\\u0022classname属性を使う方法\\u0022>className属性を使う方法</h3>\\u000d\\u000a<p>JSXのclassName属性を使って、CSSクラスの指定ができます。className属性に指定した内容が、HTMLのclass属性となります。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb127\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb127-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> Button <span class=\\u0022op\\u0022>=</span> () <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb127-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>&lt;</span>button className<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;normal-button&quot;</span><span class=\\u0022op\\u0022>&gt;</span>追加&lt;/button<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb127-3\\u0022 title=\\u00223\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<!-- TODO: p.169 リスト9.4　<button>要素で始まっているのに、閉じタグが</div>　リスト9.6も同様 -->\\u000d\\u000a\\u000d\\u000a<p><code>webpack</code>、<code>css-loader</code>、<code>style-loader</code>などのライブラリを組み合わせることで、JavaScriptからCSSファイルの読み込みができるようになります。 <code>create-react-app</code>では、標準でCSSファイルのインポートがサポートされています。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb128\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb128-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022st\\u0022>&quot;./style.css&quot;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb128-2\\u0022 title=\\u00222\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb128-3\\u0022 title=\\u00223\\u0022><span class=\\u0022kw\\u0022>const</span> Button <span class=\\u0022op\\u0022>=</span> () <span class=\\u0022op\\u0022>=&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb128-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>button className<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;normal-button&quot;</span><span class=\\u0022op\\u0022>&gt;</span>追加&lt;/button<span class=\\u0022op\\u0022>&gt;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb128-5\\u0022 title=\\u00225\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb128-6\\u0022 title=\\u00226\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> Button<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<h3 id=\\u0022uiライブラリを使う\\u0022>UIライブラリを使う</h3>\\u000d\\u000a<ul>\\u000d\\u000a<li><p>Material-UI</p>\\u000d\\u000a<p>マテリアルデザインに沿って作られたUIライブラリ。</p></li>\\u000d\\u000a<li><p>React-Bootstrap</p>\\u000d\\u000a<p>BootstrapをReact向けのUIライブラリとして実装したもの。</p></li>\\u000d\\u000a<li><p>React Desktop</p>\\u000d\\u000a<p>デスクトップネイティブアプリの開発を想定したReact向けUIライブラリ。 Electronなどで利用します。</p></li>\\u000d\\u000a<li><p>Onsen UI</p>\\u000d\\u000a<p>ネイティブアプリライクなモバイルウェブアプリの作成に特化したUIライブラリ。</p></li>\\u000d\\u000a</ul>\\u000d\\u000a<h3 id=\\u0022material-ui\\u0022>Material-UI</h3>\\u000d\\u000a<p>マテリアルデザインに則ったUIを簡単に実装することができます。 ボタンやフォームなどの基本的なUIパーツが網羅されています。</p>\\u000d\\u000a<p>各UIパーツはReactコンポーネントとして実装されており、props経由でコンポーネントをカスタマイズできます。</p>\\u000d\\u000a<p>パッケージは、次のコマンドでインストールできます。</p>\\u000d\\u000a<p>こちらだと v0.20.0 がインストールされます。</p>\\u000d\\u000a<pre><code>&gt; npm install --save material-ui\\u000d\\u000a</code></pre>\\u000d\\u000a<p>最新をインストールしたければ次のコマンドにします。 2018年3月8日時点で v1.0.0-beta.36がインストールされました。</p>\\u000d\\u000a<pre><code>&gt; npm install --save material-ui@next\\u000d\\u000a</code></pre>\\u000d\\u000a<p>※以降のサンプルは<code>@next</code>でインストールしたものを対象としています。</p>\\u000d\\u000a<h4 id=\\u0022使い方\\u0022>使い方</h4>\\u000d\\u000a<p><code>src/components/TodoApp.js</code>を修正します。</p>\\u000d\\u000a<ol>\\u000d\\u000a<li><p>インポートを追加します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb131\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb131-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> Reboot <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;material-ui/Reboot&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb131-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> Button <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;material-ui/Button&#39;</span><span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>Rebootコンポーネントを追加します。 場所はどこでもよいですが、今回はルート要素の最初の子要素にしました。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb132\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb132-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>TodoApp</span>(<span class=\\u0022op\\u0022>{</span> task<span class=\\u0022op\\u0022>,</span> tasks<span class=\\u0022op\\u0022>,</span> inputTask<span class=\\u0022op\\u0022>,</span> addTask<span class=\\u0022op\\u0022>,</span> redirectToError <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb132-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb132-3\\u0022 title=\\u00223\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb132-4\\u0022 title=\\u00224\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;text&quot;</span> onChange<span class=\\u0022op\\u0022>={</span>(e) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>inputTask</span>(<span class=\\u0022va\\u0022>e</span>.<span class=\\u0022va\\u0022>target</span>.<span class=\\u0022at\\u0022>value</span>)<span class=\\u0022op\\u0022>}</span> /&gt;</a></code></pre></div>\\u000d\\u000a<p>↓</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb133\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb133-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>TodoApp</span>(<span class=\\u0022op\\u0022>{</span> task<span class=\\u0022op\\u0022>,</span> tasks<span class=\\u0022op\\u0022>,</span> inputTask<span class=\\u0022op\\u0022>,</span> addTask<span class=\\u0022op\\u0022>,</span> redirectToError <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb133-2\\u0022 title=\\u00222\\u0022> <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb133-3\\u0022 title=\\u00223\\u0022>   <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb133-4\\u0022 title=\\u00224\\u0022>     <span class=\\u0022op\\u0022>&lt;</span>Reboot /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb133-5\\u0022 title=\\u00225\\u0022>     <span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;text&quot;</span> onChange<span class=\\u0022op\\u0022>={</span>(e) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>inputTask</span>(<span class=\\u0022va\\u0022>e</span>.<span class=\\u0022va\\u0022>target</span>.<span class=\\u0022at\\u0022>value</span>)<span class=\\u0022op\\u0022>}</span> /&gt;</a></code></pre></div></li>\\u000d\\u000a<li><p>input要素で作っていたボタンを、Buttonコンポーネントに変更します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb134\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb134-1\\u0022 title=\\u00221\\u0022><span class=\\u0022op\\u0022>&lt;</span>input type<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;button&quot;</span> value<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;add&quot;</span> onClick<span class=\\u0022op\\u0022>={</span>() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>addTask</span>(task)<span class=\\u0022op\\u0022>}</span> /&gt;</a></code></pre></div>\\u000d\\u000a<p>↓</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb135\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb135-1\\u0022 title=\\u00221\\u0022><span class=\\u0022op\\u0022>&lt;</span>Button variant<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;raised&quot;</span> className<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;default&quot;</span> onClick<span class=\\u0022op\\u0022>={</span>() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022at\\u0022>addTask</span>(task)<span class=\\u0022op\\u0022>}&gt;</span>add&lt;/Button<span class=\\u0022op\\u0022>&gt;</span></a></code></pre></div></li>\\u000d\\u000a</ol>\\u000d\\u000a<h2 id=\\u0022note\\u0022>Note</h2>\\u000d\\u000a<h3 id=\\u0022reduxの三原則\\u0022>Reduxの三原則</h3>\\u000d\\u000a<p>Single source of truth : アプリケーション内のすべての状態を一つの大きなオブジェクトとして管理します。</p>\\u000d\\u000a<p>State in read-only : アプリケーションの状態はコンポーネントから直接参照できますが、直接変更することはできません。 Action（どんな動作を行ったのかを示す単純なオブジェクト）をdispatch（発行）することが、アプリケーションの状態を変更する唯一の方法です。</p>\\u000d\\u000a<p>Changes are made with pure functions : アプリケーションの状態の変更は、副作用のない純粋関数によって行われます。 〝純粋関数〟とは〝同じ入力を渡せば、同じ出力が得られる関数〟のことです。</p>\\u000d\\u000a<h3 id=\\u0022ie11-arrayprototypefind-メソッドがエラーになる\\u0022>IE11 Array.prototype.find メソッドがエラーになる</h3>\\u000d\\u000a<p>IE11 では Array.prototype.find メソッドがサポートされていないのでエラーになります。</p>\\u000d\\u000a<p>対応させるためには Polyfill で代替コードを実装する必要があります。</p>\\u000d\\u000a<h2 id=\\u0022一連の流れを通しで\\u0022>一連の流れを通しで</h2>\\u000d\\u000a<ol>\\u000d\\u000a<li><p>プロジェクトを作成して、ルートフォルダに移動します。</p>\\u000d\\u000a<pre><code>&gt; .\\u005cnode_modules\\u005c.bin\\u005ccreate-react-app app-1st\\u000d\\u000a&gt; cd app-1st\\u000d\\u000a</code></pre></li>\\u000d\\u000a<li><p>propTypesをインストールします。</p>\\u000d\\u000a<pre><code>&gt; npm install --save prop-types\\u000d\\u000a</code></pre>\\u000d\\u000a<p>propTypesはpropsの型チェック機能を持つパッケージです。</p></li>\\u000d\\u000a<li><p>アプリケーションを開発モードで起動します。</p>\\u000d\\u000a<p>ブラウザが自動で起動して、<code>http://localhost:3000/</code>にアクセスします。</p>\\u000d\\u000a<pre><code>&gt; npm start\\u000d\\u000a</code></pre></li>\\u000d\\u000a<li><p>ファイル/フォルダ構成に則り、フォルダを作ります。 あとから作り直せばいいので、構成はあまり悩まなくてよいです。</p>\\u000d\\u000a<p>今回はサンプルと同じにします。</p>\\u000d\\u000a<pre><code>src/\\u000d\\u000a+---index.js  ... エントリポイント\\u000d\\u000a+---App.js    ... ルートコンポーネント\\u000d\\u000a+---components/\\u000d\\u000a|     ... Presentational Component を置く\\u000d\\u000a+---containers/\\u000d\\u000a|     ... Container Component を置く\\u000d\\u000a+---actions/\\u000d\\u000a|     ... ActionCreator を置く\\u000d\\u000a+---reducers/\\u000d\\u000a|     ... Reducer を置く\\u000d\\u000a`---store/\\u000d\\u000a      ... Store を置く（createStore関数）\\u000d\\u000a</code></pre>\\u000d\\u000a<pre><code>&gt; mkdir .\\u005csrc\\u005ccontainers\\u000d\\u000a&gt; mkdir .\\u005csrc\\u005ccomponents\\u000d\\u000a&gt; mkdir .\\u005csrc\\u005cactions\\u000d\\u000a&gt; mkdir .\\u005csrc\\u005creducers\\u000d\\u000a&gt; mkdir .\\u005csrc\\u005cstore\\u000d\\u000a</code></pre></li>\\u000d\\u000a<li><p>Reduxをインストールします。</p>\\u000d\\u000a<p>Reduxを開発で使う場合、開発が進んでからインストールするのは導入コストが高くなるため、開発開始時に導入しておきます。</p>\\u000d\\u000a<pre><code>&gt; npm install --save redux react-redux redux-logger\\u000d\\u000a</code></pre>\\u000d\\u000a<p>ReduxのStoreの作成にはReducerが必要です。 ［<code>src\\u005creducers\\u005cindex.js</code>］にReducerを追加します。</p>\\u000d\\u000a<p>この時点では、単純に受け取ったstateをそのまま返すReducerを定義しておきます。</p>\\u000d\\u000a<p>1つのReducerでアプリケーションが完結することはまずないので、［<code>src\\u005creducers\\u005cindex.js</code>］に各Reducerの参照を束ねて、<code>import * as reducers from \\u0022./reducers\\u0022</code>でまとめてimportできる作りにしておきます。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb142\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb142-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// 受け取ったstateをそのまま返すReducer</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb142-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022kw\\u0022>const</span> noop <span class=\\u0022op\\u0022>=</span> (state <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{}</span>) <span class=\\u0022op\\u0022>=&gt;</span> state<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>[<code>src\\u005cstore\\u005cindex.js</code>]にreduxのcreateStore関数を定義します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb143\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> createStore<span class=\\u0022op\\u0022>,</span> combineReducers<span class=\\u0022op\\u0022>,</span> applyMiddleware <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> logger <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux-logger&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>*</span> <span class=\\u0022im\\u0022>as</span> reducers <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../reducers&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-5\\u0022 title=\\u00225\\u0022><span class=\\u0022co\\u0022>// Storeを生成するための関数を定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-6\\u0022 title=\\u00226\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>createStoreEx</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022at\\u0022>createStore</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-8\\u0022 title=\\u00228\\u0022>    <span class=\\u0022co\\u0022>// 複数のReducerをまとめる</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022at\\u0022>combineReducers</span>(reducers)<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-10\\u0022 title=\\u002210\\u0022>    <span class=\\u0022co\\u0022>// ミドルウェアを適用する</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-11\\u0022 title=\\u002211\\u0022>    <span class=\\u0022at\\u0022>applyMiddleware</span>(logger)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-12\\u0022 title=\\u002212\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb143-13\\u0022 title=\\u002213\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>［<code>src\\u005cindex.js</code>］でStoreを生成し、react-reduxのProviderコンポーネントでAppコンポーネントに関連付ける処理を記述します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb144\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> ReactDOM <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Provider <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> App <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./App&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>import</span> createStoreEx <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./store&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-6\\u0022 title=\\u00226\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-7\\u0022 title=\\u00227\\u0022><span class=\\u0022co\\u0022>// Storeの生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-8\\u0022 title=\\u00228\\u0022><span class=\\u0022kw\\u0022>const</span> store <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createStoreEx</span>()<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-9\\u0022 title=\\u00229\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-10\\u0022 title=\\u002210\\u0022><span class=\\u0022va\\u0022>ReactDOM</span>.<span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-11\\u0022 title=\\u002211\\u0022>  <span class=\\u0022co\\u0022>// Providerコンポーネントを使って、StoreをAppコンポーネントに関連付ける</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-12\\u0022 title=\\u002212\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>Provider store<span class=\\u0022op\\u0022>={</span>store<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-13\\u0022 title=\\u002213\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>App /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-14\\u0022 title=\\u002214\\u0022>  &lt;/Provider<span class=\\u0022op\\u0022>&gt;,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-15\\u0022 title=\\u002215\\u0022>  <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&#39;root&#39;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb144-16\\u0022 title=\\u002216\\u0022>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>ルーティングライブラリの導入</p>\\u000d\\u000a<p>こちらも開発開始時に導入しておきます。</p>\\u000d\\u000a<p>Note : 最新版の React Router （ver 4.x）に対応した react-router-redux パッケージのバージョンは ver 5.x なので、<code>@next</code>をつけてインストールします（2018年3月8日時点）。</p>\\u000d\\u000a<pre><code>&gt; npm install --save react-router-dom history react-router-redux@next\\u000d\\u000a</code></pre>\\u000d\\u000a<p>Storeを生成する関数に、routerReducerとrouterMiddlewareを追加します。</p>\\u000d\\u000a<p>[<code>src\\u005cstore\\u005cindex.js</code>]</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb146\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> createStore<span class=\\u0022op\\u0022>,</span> combineReducers<span class=\\u0022op\\u0022>,</span> applyMiddleware <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> logger <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux-logger&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>*</span> <span class=\\u0022im\\u0022>as</span> reducers <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../reducers&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> routerReducer<span class=\\u0022op\\u0022>,</span> routerMiddleware <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-5\\u0022 title=\\u00225\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-6\\u0022 title=\\u00226\\u0022><span class=\\u0022co\\u0022>// Storeを生成するための関数を定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-7\\u0022 title=\\u00227\\u0022><span class=\\u0022co\\u0022>// history は src/index.js から受け渡す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-8\\u0022 title=\\u00228\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>createStoreEx</span>(history) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-9\\u0022 title=\\u00229\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022at\\u0022>createStore</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-10\\u0022 title=\\u002210\\u0022>    <span class=\\u0022co\\u0022>// 複数のReducerをまとめる</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-11\\u0022 title=\\u002211\\u0022>    <span class=\\u0022co\\u0022>//   ・自前で定義したReducer</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-12\\u0022 title=\\u002212\\u0022>    <span class=\\u0022co\\u0022>//   ・react-router-redux の Reducer</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-13\\u0022 title=\\u002213\\u0022>    <span class=\\u0022at\\u0022>combineReducers</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-14\\u0022 title=\\u002214\\u0022>      ...<span class=\\u0022at\\u0022>reducers</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-15\\u0022 title=\\u002215\\u0022>      <span class=\\u0022dt\\u0022>router</span><span class=\\u0022op\\u0022>:</span> routerReducer<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-16\\u0022 title=\\u002216\\u0022>    <span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-17\\u0022 title=\\u002217\\u0022>    <span class=\\u0022co\\u0022>// ミドルウェアを適用する</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-18\\u0022 title=\\u002218\\u0022>    <span class=\\u0022co\\u0022>// react-router-redux の Redux Middleware</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-19\\u0022 title=\\u002219\\u0022>    <span class=\\u0022at\\u0022>applyMiddleware</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-20\\u0022 title=\\u002220\\u0022>      logger<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-21\\u0022 title=\\u002221\\u0022>      <span class=\\u0022at\\u0022>routerMiddleware</span>(history)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-22\\u0022 title=\\u002222\\u0022>    )</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-23\\u0022 title=\\u002223\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb146-24\\u0022 title=\\u002224\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>[<code>src\\u005cindex.js</code>]</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb147\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> ReactDOM <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Provider <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> ConnectedRouter <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>import</span> createBrowserHistory <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;history/createBrowserHistory&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-6\\u0022 title=\\u00226\\u0022><span class=\\u0022im\\u0022>import</span> App <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./App&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-7\\u0022 title=\\u00227\\u0022><span class=\\u0022im\\u0022>import</span> createStoreEx <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./store&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-8\\u0022 title=\\u00228\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-9\\u0022 title=\\u00229\\u0022><span class=\\u0022co\\u0022>// history のインスタンスを生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-10\\u0022 title=\\u002210\\u0022><span class=\\u0022kw\\u0022>const</span> history <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createBrowserHistory</span>()<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-11\\u0022 title=\\u002211\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-12\\u0022 title=\\u002212\\u0022><span class=\\u0022co\\u0022>// Storeの生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-13\\u0022 title=\\u002213\\u0022><span class=\\u0022kw\\u0022>const</span> store <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createStoreEx</span>(history)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-14\\u0022 title=\\u002214\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-15\\u0022 title=\\u002215\\u0022><span class=\\u0022va\\u0022>ReactDOM</span>.<span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022co\\u0022>// Providerコンポーネントを使って、StoreをAppコンポーネントに関連付ける</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-17\\u0022 title=\\u002217\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>Provider store<span class=\\u0022op\\u0022>={</span>store<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-18\\u0022 title=\\u002218\\u0022>    <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-19\\u0022 title=\\u002219\\u0022>      <span class=\\u0022co\\u0022>/* Link コンポーネントなどが動作するように、</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-20\\u0022 title=\\u002220\\u0022><span class=\\u0022co\\u0022>         react-router-dom の Router ではなく</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-21\\u0022 title=\\u002221\\u0022><span class=\\u0022co\\u0022>         react-router-redux の ConnectedRouter を使う</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-22\\u0022 title=\\u002222\\u0022><span class=\\u0022co\\u0022>       */</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-23\\u0022 title=\\u002223\\u0022>    <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-24\\u0022 title=\\u002224\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>ConnectedRouter history<span class=\\u0022op\\u0022>={</span>history<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-25\\u0022 title=\\u002225\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>App /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-26\\u0022 title=\\u002226\\u0022>    &lt;/ConnectedRouter<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-27\\u0022 title=\\u002227\\u0022>  &lt;/Provider<span class=\\u0022op\\u0022>&gt;,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-28\\u0022 title=\\u002228\\u0022>  <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&#39;root&#39;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb147-29\\u0022 title=\\u002229\\u0022>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>ルーティングの実装</p>\\u000d\\u000a<p>コンポーネントを作ります。</p>\\u000d\\u000a<p>[<code>src\\u005ccomponents\\u005cRanking.js</code>]</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb148\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> PropTypes <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;prop-types&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>Ranking</span>(<span class=\\u0022op\\u0022>{</span> categoryId <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022co\\u0022>// </span><span class=\\u0022al\\u0022>TODO</span><span class=\\u0022co\\u0022>: 最終的には categoryId をもとにAPIから情報を取得する</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-7\\u0022 title=\\u00227\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-8\\u0022 title=\\u00228\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>h2<span class=\\u0022op\\u0022>&gt;</span>Ranking Component&lt;/h2<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-9\\u0022 title=\\u00229\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>p<span class=\\u0022op\\u0022>&gt;</span>Category <span class=\\u0022dt\\u0022>Id</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span>categoryId<span class=\\u0022op\\u0022>}</span>&lt;/p<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-10\\u0022 title=\\u002210\\u0022>    &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-11\\u0022 title=\\u002211\\u0022>  )</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-12\\u0022 title=\\u002212\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-13\\u0022 title=\\u002213\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-14\\u0022 title=\\u002214\\u0022><span class=\\u0022co\\u0022>// propsのデータ型を定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-15\\u0022 title=\\u002215\\u0022><span class=\\u0022va\\u0022>Ranking</span>.<span class=\\u0022at\\u0022>propTypes</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022dt\\u0022>categoryId</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>string</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-17\\u0022 title=\\u002217\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-18\\u0022 title=\\u002218\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-19\\u0022 title=\\u002219\\u0022><span class=\\u0022co\\u0022>// 未指定時の既定値を定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-20\\u0022 title=\\u002220\\u0022><span class=\\u0022va\\u0022>Ranking</span>.<span class=\\u0022at\\u0022>defaultProps</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-21\\u0022 title=\\u002221\\u0022>  <span class=\\u0022dt\\u0022>categoryId</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;1&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb148-22\\u0022 title=\\u002222\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p>ルーティングの設定は [<code>src\\u005cApp.js</code>] に記述します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb149\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React<span class=\\u0022op\\u0022>,</span> <span class=\\u0022op\\u0022>{</span> Component <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Route<span class=\\u0022op\\u0022>,</span> Link <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> Ranking <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./components/Ranking&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-5\\u0022 title=\\u00225\\u0022><span class=\\u0022kw\\u0022>class</span> App <span class=\\u0022kw\\u0022>extends</span> Component <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022at\\u0022>render</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-7\\u0022 title=\\u00227\\u0022>    <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-8\\u0022 title=\\u00228\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>div className<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;App&quot;</span><span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-9\\u0022 title=\\u00229\\u0022>        <span class=\\u0022op\\u0022>{</span> <span class=\\u0022co\\u0022>/* カテゴリ名、IDはハードコード。本来であればAPIから取得するのが望ましい。 */</span> <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-10\\u0022 title=\\u002210\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-11\\u0022 title=\\u002211\\u0022>          <span class=\\u0022op\\u0022>&lt;</span>li<span class=\\u0022op\\u0022>&gt;&lt;</span>Link to<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/all&quot;</span><span class=\\u0022op\\u0022>&gt;</span>Category All&lt;/Link<span class=\\u0022op\\u0022>&gt;</span>&lt;/li<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-12\\u0022 title=\\u002212\\u0022>          <span class=\\u0022op\\u0022>&lt;</span>li<span class=\\u0022op\\u0022>&gt;&lt;</span>Link to<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/category/2502&quot;</span><span class=\\u0022op\\u0022>&gt;</span>Category <span class=\\u0022dv\\u0022>2502</span>&lt;/Link<span class=\\u0022op\\u0022>&gt;</span>&lt;/li<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-13\\u0022 title=\\u002213\\u0022>          <span class=\\u0022op\\u0022>&lt;</span>li<span class=\\u0022op\\u0022>&gt;&lt;</span>Link to<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/category/10002&quot;</span><span class=\\u0022op\\u0022>&gt;</span>Category <span class=\\u0022dv\\u0022>10002</span>&lt;/Link<span class=\\u0022op\\u0022>&gt;</span>&lt;/li<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-14\\u0022 title=\\u002214\\u0022>        &lt;/ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-15\\u0022 title=\\u002215\\u0022>        </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-16\\u0022 title=\\u002216\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>Route path<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/all&quot;</span> component<span class=\\u0022op\\u0022>={</span>Ranking<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-17\\u0022 title=\\u002217\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>Route</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-18\\u0022 title=\\u002218\\u0022>          path<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/category/:id&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-19\\u0022 title=\\u002219\\u0022>          render<span class=\\u0022op\\u0022>={</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-20\\u0022 title=\\u002220\\u0022>            (<span class=\\u0022op\\u0022>{</span> match <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>&lt;</span>Ranking categoryId<span class=\\u0022op\\u0022>={</span><span class=\\u0022va\\u0022>match</span>.<span class=\\u0022va\\u0022>params</span>.<span class=\\u0022at\\u0022>id</span><span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-21\\u0022 title=\\u002221\\u0022>          <span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-22\\u0022 title=\\u002222\\u0022>      &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-23\\u0022 title=\\u002223\\u0022>    )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-24\\u0022 title=\\u002224\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-25\\u0022 title=\\u002225\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-26\\u0022 title=\\u002226\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb149-27\\u0022 title=\\u002227\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> App<span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>非同期処理の実装</p>\\u000d\\u000a<p>インストール</p>\\u000d\\u000a<pre><code>&gt; npm install --save redux-thunk fetch-jsonp qs\\u000d\\u000a</code></pre>\\u000d\\u000a<p>fetch-jsonp : XMLHttpRequestの後継であるfetch関数と同じインターフェースでJSONPのAPIで通信できるライブラリ。</p>\\u000d\\u000a<p>qs : URLのクエリ文字列（URLの ? のあとにつく key=value&amp;hoge=fuga の部分）を扱うライブラリ。</p>\\u000d\\u000a<p>ミドルウェアに redux-thunk を追加するため、[<code>src\\u005cstore\\u005cindex.js</code>]を修正します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb151\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> createStore<span class=\\u0022op\\u0022>,</span> combineReducers<span class=\\u0022op\\u0022>,</span> applyMiddleware <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> logger <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux-logger&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> thunk <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux-thunk&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>*</span> <span class=\\u0022im\\u0022>as</span> reducers <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../reducers&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> routerReducer<span class=\\u0022op\\u0022>,</span> routerMiddleware <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-6\\u0022 title=\\u00226\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-7\\u0022 title=\\u00227\\u0022><span class=\\u0022co\\u0022>// Storeを生成するための関数を定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-8\\u0022 title=\\u00228\\u0022><span class=\\u0022co\\u0022>// history は src/index.js から受け渡す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-9\\u0022 title=\\u00229\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>createStoreEx</span>(history) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022at\\u0022>createStore</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-11\\u0022 title=\\u002211\\u0022>    <span class=\\u0022co\\u0022>// 複数のReducerをまとめる</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-12\\u0022 title=\\u002212\\u0022>    <span class=\\u0022co\\u0022>//   ・自前で定義したReducer</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-13\\u0022 title=\\u002213\\u0022>    <span class=\\u0022co\\u0022>//   ・react-router-redux の Reducer</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-14\\u0022 title=\\u002214\\u0022>    <span class=\\u0022at\\u0022>combineReducers</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-15\\u0022 title=\\u002215\\u0022>      ...<span class=\\u0022at\\u0022>reducers</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-16\\u0022 title=\\u002216\\u0022>      <span class=\\u0022dt\\u0022>router</span><span class=\\u0022op\\u0022>:</span> routerReducer<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-17\\u0022 title=\\u002217\\u0022>    <span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-18\\u0022 title=\\u002218\\u0022>    <span class=\\u0022co\\u0022>// ミドルウェアを適用する</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-19\\u0022 title=\\u002219\\u0022>    <span class=\\u0022co\\u0022>// react-router-redux の Redux Middleware</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-20\\u0022 title=\\u002220\\u0022>    <span class=\\u0022at\\u0022>applyMiddleware</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-21\\u0022 title=\\u002221\\u0022>      logger<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-22\\u0022 title=\\u002222\\u0022>      thunk<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-23\\u0022 title=\\u002223\\u0022>      <span class=\\u0022at\\u0022>routerMiddleware</span>(history)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-24\\u0022 title=\\u002224\\u0022>    )</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-25\\u0022 title=\\u002225\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb151-26\\u0022 title=\\u002226\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>APIからデータを取得し、ReduxのStoreを経由してコンポーネントに表示する処理を実装します。</p>\\u000d\\u000a<p>ComponentからActionを呼び出す部分。</p>\\u000d\\u000a<p>[<code>src\\u005ccomponents\\u005cRanking.js</code>]</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb152\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> PropTypes <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;prop-types&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-4\\u0022 title=\\u00224\\u0022><span class=\\u0022co\\u0022>// ライフサイクルメソッドを使うので function から class に変更</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>class</span> Ranking <span class=\\u0022kw\\u0022>extends</span> <span class=\\u0022va\\u0022>React</span>.<span class=\\u0022at\\u0022>Component</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-6\\u0022 title=\\u00226\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022at\\u0022>componentWillMount</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-8\\u0022 title=\\u00228\\u0022>    <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>onMount</span>(<span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>categoryId</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-9\\u0022 title=\\u00229\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-10\\u0022 title=\\u002210\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-11\\u0022 title=\\u002211\\u0022>  <span class=\\u0022at\\u0022>componentWillReceiveProps</span>(nextProps) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-12\\u0022 title=\\u002212\\u0022>    <span class=\\u0022cf\\u0022>if</span> (<span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>categoryId</span> <span class=\\u0022op\\u0022>!==</span> <span class=\\u0022va\\u0022>nextProps</span>.<span class=\\u0022at\\u0022>categoryId</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-13\\u0022 title=\\u002213\\u0022>      <span class=\\u0022co\\u0022>// props.categoryId に変化があるので、ページ移動が発生している</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-14\\u0022 title=\\u002214\\u0022>      <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>onUpdate</span>(<span class=\\u0022va\\u0022>nextProps</span>.<span class=\\u0022at\\u0022>categoryId</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-15\\u0022 title=\\u002215\\u0022>    <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-17\\u0022 title=\\u002217\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-18\\u0022 title=\\u002218\\u0022>  <span class=\\u0022co\\u0022>// </span><span class=\\u0022al\\u0022>TODO</span><span class=\\u0022co\\u0022>: 最終的には categoryId をもとにAPIから情報を取得する</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-19\\u0022 title=\\u002219\\u0022>  <span class=\\u0022at\\u0022>render</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-20\\u0022 title=\\u002220\\u0022>    <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-21\\u0022 title=\\u002221\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-22\\u0022 title=\\u002222\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>h2<span class=\\u0022op\\u0022>&gt;</span>Ranking Component&lt;/h2<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-23\\u0022 title=\\u002223\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>p<span class=\\u0022op\\u0022>&gt;</span>Category <span class=\\u0022dt\\u0022>Id</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span><span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>categoryId</span><span class=\\u0022op\\u0022>}</span>&lt;/p<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-24\\u0022 title=\\u002224\\u0022>      &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-25\\u0022 title=\\u002225\\u0022>    )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-26\\u0022 title=\\u002226\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-27\\u0022 title=\\u002227\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-28\\u0022 title=\\u002228\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-29\\u0022 title=\\u002229\\u0022><span class=\\u0022co\\u0022>// propsのデータ型を定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-30\\u0022 title=\\u002230\\u0022><span class=\\u0022va\\u0022>Ranking</span>.<span class=\\u0022at\\u0022>propTypes</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-31\\u0022 title=\\u002231\\u0022>  <span class=\\u0022dt\\u0022>categoryId</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>string</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-32\\u0022 title=\\u002232\\u0022>  <span class=\\u0022dt\\u0022>onMount</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>func</span>.<span class=\\u0022at\\u0022>isRequired</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-33\\u0022 title=\\u002233\\u0022>  <span class=\\u0022dt\\u0022>onUpdate</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>func</span>.<span class=\\u0022at\\u0022>isRequired</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-34\\u0022 title=\\u002234\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-35\\u0022 title=\\u002235\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-36\\u0022 title=\\u002236\\u0022><span class=\\u0022co\\u0022>// 未指定時の既定値を定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-37\\u0022 title=\\u002237\\u0022><span class=\\u0022va\\u0022>Ranking</span>.<span class=\\u0022at\\u0022>defaultProps</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-38\\u0022 title=\\u002238\\u0022>  <span class=\\u0022dt\\u0022>categoryId</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;1&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb152-39\\u0022 title=\\u002239\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p>[<code>src\\u005cactions\\u005cRanking.js</code>]</p>\\u000d\\u000a<p>ActionCreator を定義します。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>コンポーネントのprops.onMount、props.onUpdateが呼び出されたときに実行するfetchRanking ※redux-thunkを使った非同期処理</li>\\u000d\\u000a<li>リクエスト開始 Action - startRequest</li>\\u000d\\u000a<li>レスポンス受信 Action - receiveData</li>\\u000d\\u000a<li>リクエスト完了 Action - finishRequest</li>\\u000d\\u000a</ul>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb153\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> fetchJsonp <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;fetch-jsonp&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> qs <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;qs&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-4\\u0022 title=\\u00224\\u0022><span class=\\u0022kw\\u0022>const</span> API_URL <span class=\\u0022op\\u0022>=</span> <span class=\\u0022st\\u0022>&quot;http://hoge.co.jp/v1/json/hoge&quot;</span><span class=\\u0022op\\u0022>;</span> <span class=\\u0022co\\u0022>// </span><span class=\\u0022al\\u0022>TODO</span><span class=\\u0022co\\u0022>: api のURL</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-5\\u0022 title=\\u00225\\u0022><span class=\\u0022kw\\u0022>const</span> APP_ID <span class=\\u0022op\\u0022>=</span> <span class=\\u0022st\\u0022>&quot;APP_ID&quot;</span><span class=\\u0022op\\u0022>;</span>                          <span class=\\u0022co\\u0022>// </span><span class=\\u0022al\\u0022>TODO</span><span class=\\u0022co\\u0022>: 不要だが定義しておく</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-6\\u0022 title=\\u00226\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-7\\u0022 title=\\u00227\\u0022><span class=\\u0022co\\u0022>// リクエスト開始 Action</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-8\\u0022 title=\\u00228\\u0022><span class=\\u0022kw\\u0022>const</span> startRequest <span class=\\u0022op\\u0022>=</span> categoryId <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-9\\u0022 title=\\u00229\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;START_REQUEST&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span> categoryId <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-11\\u0022 title=\\u002211\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-12\\u0022 title=\\u002212\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-13\\u0022 title=\\u002213\\u0022><span class=\\u0022co\\u0022>// レスポンス受信 Action</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-14\\u0022 title=\\u002214\\u0022><span class=\\u0022kw\\u0022>const</span> receiveData <span class=\\u0022op\\u0022>=</span> (categoryId<span class=\\u0022op\\u0022>,</span> error<span class=\\u0022op\\u0022>,</span> response) <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-15\\u0022 title=\\u002215\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;RECEIVE_DATA&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span> categoryId<span class=\\u0022op\\u0022>,</span> error<span class=\\u0022op\\u0022>,</span> response <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-17\\u0022 title=\\u002217\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-18\\u0022 title=\\u002218\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-19\\u0022 title=\\u002219\\u0022><span class=\\u0022co\\u0022>// リクエスト完了 Action</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-20\\u0022 title=\\u002220\\u0022><span class=\\u0022kw\\u0022>const</span> finishRequest <span class=\\u0022op\\u0022>=</span> categoryId <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-21\\u0022 title=\\u002221\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;FINISH_REQUEST&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-22\\u0022 title=\\u002222\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span> categoryId <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-23\\u0022 title=\\u002223\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-24\\u0022 title=\\u002224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-25\\u0022 title=\\u002225\\u0022><span class=\\u0022co\\u0022>// データ取得</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-26\\u0022 title=\\u002226\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022kw\\u0022>const</span> fetchRanking <span class=\\u0022op\\u0022>=</span> categoryId <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-27\\u0022 title=\\u002227\\u0022>  <span class=\\u0022co\\u0022>// redux-thunkを使った非同期処理</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-28\\u0022 title=\\u002228\\u0022>  <span class=\\u0022cf\\u0022>return</span> async dispatch <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-29\\u0022 title=\\u002229\\u0022>    <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>startRequest</span>(categoryId))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-30\\u0022 title=\\u002230\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-31\\u0022 title=\\u002231\\u0022>    <span class=\\u0022kw\\u0022>const</span> queryString <span class=\\u0022op\\u0022>=</span> <span class=\\u0022va\\u0022>qs</span>.<span class=\\u0022at\\u0022>stringify</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-32\\u0022 title=\\u002232\\u0022>      <span class=\\u0022dt\\u0022>appid</span><span class=\\u0022op\\u0022>:</span> APP_ID<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-33\\u0022 title=\\u002233\\u0022>      <span class=\\u0022dt\\u0022>category_id</span><span class=\\u0022op\\u0022>:</span> categoryId<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-34\\u0022 title=\\u002234\\u0022>    <span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-35\\u0022 title=\\u002235\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-36\\u0022 title=\\u002236\\u0022>    <span class=\\u0022cf\\u0022>try</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-37\\u0022 title=\\u002237\\u0022>      <span class=\\u0022kw\\u0022>const</span> response <span class=\\u0022op\\u0022>=</span> await <span class=\\u0022at\\u0022>fetchJsonp</span>(<span class=\\u0022vs\\u0022>`</span><span class=\\u0022sc\\u0022>${</span>API_URL<span class=\\u0022sc\\u0022>}</span><span class=\\u0022vs\\u0022>?</span><span class=\\u0022sc\\u0022>${</span>queryString<span class=\\u0022sc\\u0022>}</span><span class=\\u0022vs\\u0022>`</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-38\\u0022 title=\\u002238\\u0022>      <span class=\\u0022kw\\u0022>const</span> data <span class=\\u0022op\\u0022>=</span> await <span class=\\u0022va\\u0022>response</span>.<span class=\\u0022at\\u0022>json</span>()<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-39\\u0022 title=\\u002239\\u0022>      <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>receiveData</span>(categoryId<span class=\\u0022op\\u0022>,</span> <span class=\\u0022kw\\u0022>null</span><span class=\\u0022op\\u0022>,</span> data))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-40\\u0022 title=\\u002240\\u0022>      </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-41\\u0022 title=\\u002241\\u0022>    <span class=\\u0022op\\u0022>}</span> <span class=\\u0022cf\\u0022>catch</span> (ex) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-42\\u0022 title=\\u002242\\u0022>      <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>receiveData</span>(categoryId<span class=\\u0022op\\u0022>,</span> ex))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-43\\u0022 title=\\u002243\\u0022>    <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-44\\u0022 title=\\u002244\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-45\\u0022 title=\\u002245\\u0022>    <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>finishRequest</span>(categoryId))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-46\\u0022 title=\\u002246\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb153-47\\u0022 title=\\u002247\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p>[<code>src\\u005ccontainers\\u005cRanking.js</code>]</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>ActionCreator をコンポーネントのprops.onMountedから呼び出すため、Container Component を定義します。</li>\\u000d\\u000a<li>mapDispatchToPropsで、props.onMountedとactions.fetchRankingを接続します。</li>\\u000d\\u000a</ul>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb154\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> connect <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> Ranking <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../components/Ranking&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>*</span> <span class=\\u0022im\\u0022>as</span> actions <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../actions/Ranking&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-5\\u0022 title=\\u00225\\u0022><span class=\\u0022co\\u0022>// </span><span class=\\u0022al\\u0022>TODO</span><span class=\\u0022co\\u0022>: Reducerを定義するまでの仮の処理</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-6\\u0022 title=\\u00226\\u0022><span class=\\u0022kw\\u0022>const</span> mapStateToProps <span class=\\u0022op\\u0022>=</span> (state<span class=\\u0022op\\u0022>,</span> ownProps) <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022dt\\u0022>categoryId</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>ownProps</span>.<span class=\\u0022at\\u0022>categoryId</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-8\\u0022 title=\\u00228\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-9\\u0022 title=\\u00229\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-10\\u0022 title=\\u002210\\u0022><span class=\\u0022kw\\u0022>const</span> mapDispatchToProps <span class=\\u0022op\\u0022>=</span> dispatch <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-11\\u0022 title=\\u002211\\u0022>  <span class=\\u0022at\\u0022>onMount</span>(categoryId) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-12\\u0022 title=\\u002212\\u0022>    <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022va\\u0022>actions</span>.<span class=\\u0022at\\u0022>fetchRanking</span>(categoryId))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-13\\u0022 title=\\u002213\\u0022>  <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-14\\u0022 title=\\u002214\\u0022>  <span class=\\u0022at\\u0022>onUpdate</span>(categoryId) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-15\\u0022 title=\\u002215\\u0022>    <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022va\\u0022>actions</span>.<span class=\\u0022at\\u0022>fetchRanking</span>(categoryId))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-17\\u0022 title=\\u002217\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-18\\u0022 title=\\u002218\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb154-19\\u0022 title=\\u002219\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022at\\u0022>connect</span>(mapStateToProps<span class=\\u0022op\\u0022>,</span> mapDispatchToProps)(Ranking)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>[<code>src\\u005cApp.js</code>]</p>\\u000d\\u000a<p>定義したContainer Componentを使うように修正します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb155\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb155-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> Ranking <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./components/Ranking&#39;</span><span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>↓</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb156\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb156-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> Ranking <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./containers/Ranking&#39;</span><span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>Reducerの実装</p>\\u000d\\u000a<p>Reducerを実装し、取得したデータを表示します。</p>\\u000d\\u000a<ul>\\u000d\\u000a<li><p><code>src\\u005creducers\\u005cshopping.js</code></p>\\u000d\\u000a<p>カテゴリ名、カテゴリIDを保持する。 ランキングページにもカテゴリ名を表示したいので、<code>src\\u005cApp.js</code>のハードコードをこちらに移動する。</p></li>\\u000d\\u000a<li><p><code>src\\u005creducers\\u005cRanking.js</code></p>\\u000d\\u000a<p>Ranking コンポーネント用のReducer。 ランキング情報を保持します。</p></li>\\u000d\\u000a</ul>\\u000d\\u000a<p>[<code>src\\u005creducers\\u005cshopping.js</code>]</p>\\u000d\\u000a<p>固定のJSONを常に返すReducerとして実装します。</p>\\u000d\\u000a<p>※本来はAPIから取得した情報を返すようにするべきです。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb157\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> initialState <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022co\\u0022>// カテゴリ情報</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022co\\u0022>// 本来はAPIから取得した情報を返すべき</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022dt\\u0022>categories</span><span class=\\u0022op\\u0022>:</span> [</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-5\\u0022 title=\\u00225\\u0022>    <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-6\\u0022 title=\\u00226\\u0022>      <span class=\\u0022dt\\u0022>id</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;1&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-7\\u0022 title=\\u00227\\u0022>      <span class=\\u0022dt\\u0022>name</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;ALL&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-8\\u0022 title=\\u00228\\u0022>    <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-10\\u0022 title=\\u002210\\u0022>      <span class=\\u0022dt\\u0022>id</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;2502&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-11\\u0022 title=\\u002211\\u0022>      <span class=\\u0022dt\\u0022>name</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;Category 2502&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-12\\u0022 title=\\u002212\\u0022>    <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-13\\u0022 title=\\u002213\\u0022>    <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-14\\u0022 title=\\u002214\\u0022>      <span class=\\u0022dt\\u0022>id</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;10002&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-15\\u0022 title=\\u002215\\u0022>      <span class=\\u0022dt\\u0022>name</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;Category 10002&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-16\\u0022 title=\\u002216\\u0022>    <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-17\\u0022 title=\\u002217\\u0022>  ]</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-18\\u0022 title=\\u002218\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-19\\u0022 title=\\u002219\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb157-20\\u0022 title=\\u002220\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> () <span class=\\u0022op\\u0022>=&gt;</span> initialState<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>[<code>src\\u005creducers\\u005cRanking.js</code>]</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>START_REQUEST Action にフックして、リクエスト開始時に状態をリセットします。</li>\\u000d\\u000a<li>RECEIVE_DATA Action にフックして、レスポンスからランキング情報を取得し、状態に設定します。 リクエストが失敗したときはエラーフラグを立てます。</li>\\u000d\\u000a<li>getRanking関数は、レスポンスから商品名、商品URL、商品画像のURLを抜き出します。</li>\\u000d\\u000a</ul>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb158\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// レスポンスからランキング情報だけを抜き出す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-2\\u0022 title=\\u00222\\u0022><span class=\\u0022kw\\u0022>const</span> getRanking <span class=\\u0022op\\u0022>=</span> response <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022kw\\u0022>const</span> ranking <span class=\\u0022op\\u0022>=</span> []<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022kw\\u0022>const</span> itemLength <span class=\\u0022op\\u0022>=</span> <span class=\\u0022va\\u0022>response</span>.<span class=\\u0022va\\u0022>ResultSet</span>.<span class=\\u0022at\\u0022>totalResultsReturned</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022co\\u0022>// </span><span class=\\u0022al\\u0022>TODO</span><span class=\\u0022co\\u0022>: p.206 ↑末尾にセミコロン必要では？</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022co\\u0022>// </span><span class=\\u0022al\\u0022>TODO</span><span class=\\u0022co\\u0022>: ダウンロードできるサンプルに第10章が含まれていない</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-7\\u0022 title=\\u00227\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-8\\u0022 title=\\u00228\\u0022>  <span class=\\u0022cf\\u0022>for</span> (<span class=\\u0022kw\\u0022>let</span> index <span class=\\u0022op\\u0022>=</span> <span class=\\u0022dv\\u0022>0</span><span class=\\u0022op\\u0022>;</span> index <span class=\\u0022op\\u0022>&lt;</span> itemLength<span class=\\u0022op\\u0022>;</span> index<span class=\\u0022op\\u0022>++</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-9\\u0022 title=\\u00229\\u0022>    <span class=\\u0022kw\\u0022>const</span> item <span class=\\u0022op\\u0022>=</span> <span class=\\u0022va\\u0022>response</span>.<span class=\\u0022at\\u0022>ResultSet</span>[<span class=\\u0022st\\u0022>&#39;0&#39;</span>].<span class=\\u0022at\\u0022>Result</span>[index <span class=\\u0022op\\u0022>+</span> <span class=\\u0022st\\u0022>&quot;&quot;</span>]<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-10\\u0022 title=\\u002210\\u0022>    <span class=\\u0022va\\u0022>ranking</span>.<span class=\\u0022at\\u0022>push</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-11\\u0022 title=\\u002211\\u0022>      <span class=\\u0022dt\\u0022>code</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>item</span>.<span class=\\u0022at\\u0022>Code</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-12\\u0022 title=\\u002212\\u0022>      <span class=\\u0022dt\\u0022>name</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>item</span>.<span class=\\u0022at\\u0022>Name</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-13\\u0022 title=\\u002213\\u0022>      <span class=\\u0022dt\\u0022>url</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>item</span>.<span class=\\u0022at\\u0022>Url</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-14\\u0022 title=\\u002214\\u0022>      <span class=\\u0022dt\\u0022>imageUrl</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>item</span>.<span class=\\u0022va\\u0022>Image</span>.<span class=\\u0022at\\u0022>Medium</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-15\\u0022 title=\\u002215\\u0022>    <span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-17\\u0022 title=\\u002217\\u0022>  <span class=\\u0022cf\\u0022>return</span> ranking<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-18\\u0022 title=\\u002218\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-19\\u0022 title=\\u002219\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-20\\u0022 title=\\u002220\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-21\\u0022 title=\\u002221\\u0022><span class=\\u0022co\\u0022>// 初期状態</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-22\\u0022 title=\\u002222\\u0022><span class=\\u0022kw\\u0022>const</span> initialState <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-23\\u0022 title=\\u002223\\u0022>  <span class=\\u0022dt\\u0022>categoryId</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022kw\\u0022>undefined</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-24\\u0022 title=\\u002224\\u0022>  <span class=\\u0022dt\\u0022>ranking</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022kw\\u0022>undefined</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-25\\u0022 title=\\u002225\\u0022>  <span class=\\u0022dt\\u0022>error</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022kw\\u0022>false</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-26\\u0022 title=\\u002226\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-27\\u0022 title=\\u002227\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-28\\u0022 title=\\u002228\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-29\\u0022 title=\\u002229\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> (state <span class=\\u0022op\\u0022>=</span> initialState<span class=\\u0022op\\u0022>,</span> action) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-30\\u0022 title=\\u002230\\u0022>  <span class=\\u0022cf\\u0022>switch</span> (<span class=\\u0022va\\u0022>action</span>.<span class=\\u0022at\\u0022>type</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-31\\u0022 title=\\u002231\\u0022>    <span class=\\u0022co\\u0022>// リクエスト開始時に状態をリセット</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-32\\u0022 title=\\u002232\\u0022>    <span class=\\u0022cf\\u0022>case</span> <span class=\\u0022st\\u0022>&quot;START_REQUEST&quot;</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-33\\u0022 title=\\u002233\\u0022>      <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-34\\u0022 title=\\u002234\\u0022>        <span class=\\u0022dt\\u0022>categoryId</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>action</span>.<span class=\\u0022va\\u0022>payload</span>.<span class=\\u0022at\\u0022>categoryId</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-35\\u0022 title=\\u002235\\u0022>        <span class=\\u0022dt\\u0022>ranking</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022kw\\u0022>undefined</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-36\\u0022 title=\\u002236\\u0022>        <span class=\\u0022dt\\u0022>error</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022kw\\u0022>false</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-37\\u0022 title=\\u002237\\u0022>      <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-38\\u0022 title=\\u002238\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-39\\u0022 title=\\u002239\\u0022>    <span class=\\u0022co\\u0022>// データ受信</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-40\\u0022 title=\\u002240\\u0022>    <span class=\\u0022cf\\u0022>case</span> <span class=\\u0022st\\u0022>&quot;RECEIVE_DATA&quot;</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-41\\u0022 title=\\u002241\\u0022>      <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022va\\u0022>action</span>.<span class=\\u0022va\\u0022>payload</span>.<span class=\\u0022at\\u0022>error</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-42\\u0022 title=\\u002242\\u0022>        <span class=\\u0022op\\u0022>?</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-43\\u0022 title=\\u002243\\u0022>            ...<span class=\\u0022at\\u0022>state</span><span class=\\u0022op\\u0022>,</span> </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-44\\u0022 title=\\u002244\\u0022>            <span class=\\u0022dt\\u0022>error</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022kw\\u0022>true</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-45\\u0022 title=\\u002245\\u0022>          <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-46\\u0022 title=\\u002246\\u0022>        : <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-47\\u0022 title=\\u002247\\u0022>            ...<span class=\\u0022at\\u0022>state</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-48\\u0022 title=\\u002248\\u0022>            <span class=\\u0022dt\\u0022>ranking</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022at\\u0022>getRanking</span>(<span class=\\u0022va\\u0022>action</span>.<span class=\\u0022va\\u0022>payload</span>.<span class=\\u0022at\\u0022>response</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-49\\u0022 title=\\u002249\\u0022>          <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-50\\u0022 title=\\u002250\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-51\\u0022 title=\\u002251\\u0022>    <span class=\\u0022dt\\u0022>default</span><span class=\\u0022op\\u0022>:</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-52\\u0022 title=\\u002252\\u0022>      <span class=\\u0022cf\\u0022>return</span> state<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-53\\u0022 title=\\u002253\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb158-54\\u0022 title=\\u002254\\u0022><span class=\\u0022op\\u0022>}</span></a></code></pre></div>\\u000d\\u000a<p>2つのReducerの参照を [<code>src\\u005creducers\\u005cindex.js</code>] に追加します。</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb159\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb159-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// 受け取ったstateをそのまま返すReducer</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb159-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022kw\\u0022>const</span> noop <span class=\\u0022op\\u0022>=</span> (state <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{}</span>) <span class=\\u0022op\\u0022>=&gt;</span> state<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb159-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb159-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022op\\u0022>{</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022im\\u0022>as</span> shopping <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./shopping&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb159-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022op\\u0022>{</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022im\\u0022>as</span> Ranking <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./Ranking&#39;</span><span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>[<code>src\\u005cApp.js</code>] のリンクの部分を Nav コンポーネントに移動する。</p>\\u000d\\u000a<p>[<code>src\\u005ccomponents\\u005cNav.js</code>]</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb160\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> PropTypes <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;prop-types&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Link <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>function</span> <span class=\\u0022at\\u0022>Nav</span>(<span class=\\u0022op\\u0022>{</span> categories <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022co\\u0022>// 移動先パスの生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022co\\u0022>//   カテゴリID = &quot;1&quot; であれば &quot;/all&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-8\\u0022 title=\\u00228\\u0022>  <span class=\\u0022co\\u0022>//   上記以外であれば &quot;/category/&lt;カテゴリID&gt;&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-9\\u0022 title=\\u00229\\u0022>  <span class=\\u0022kw\\u0022>const</span> to <span class=\\u0022op\\u0022>=</span> category <span class=\\u0022op\\u0022>=&gt;</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-10\\u0022 title=\\u002210\\u0022>    <span class=\\u0022va\\u0022>category</span>.<span class=\\u0022at\\u0022>id</span> <span class=\\u0022op\\u0022>===</span> <span class=\\u0022st\\u0022>&quot;1&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-11\\u0022 title=\\u002211\\u0022>      <span class=\\u0022op\\u0022>?</span> <span class=\\u0022st\\u0022>&quot;/all&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-12\\u0022 title=\\u002212\\u0022>      : <span class=\\u0022vs\\u0022>`/category/</span><span class=\\u0022sc\\u0022>${</span><span class=\\u0022va\\u0022>category</span>.<span class=\\u0022at\\u0022>id</span><span class=\\u0022sc\\u0022>}</span><span class=\\u0022vs\\u0022>`</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-13\\u0022 title=\\u002213\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-14\\u0022 title=\\u002214\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-15\\u0022 title=\\u002215\\u0022>  <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-16\\u0022 title=\\u002216\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-17\\u0022 title=\\u002217\\u0022>      <span class=\\u0022op\\u0022>{</span> <span class=\\u0022co\\u0022>/* props.categories からリンク一覧を生成 */</span> <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-18\\u0022 title=\\u002218\\u0022>      <span class=\\u0022op\\u0022>{</span><span class=\\u0022va\\u0022>categories</span>.<span class=\\u0022at\\u0022>map</span>(category <span class=\\u0022op\\u0022>=&gt;</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-19\\u0022 title=\\u002219\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>li key<span class=\\u0022op\\u0022>={</span><span class=\\u0022vs\\u0022>`nav-item-</span><span class=\\u0022sc\\u0022>${</span><span class=\\u0022va\\u0022>category</span>.<span class=\\u0022at\\u0022>id</span><span class=\\u0022sc\\u0022>}</span><span class=\\u0022vs\\u0022>`</span><span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-20\\u0022 title=\\u002220\\u0022>          <span class=\\u0022op\\u0022>&lt;</span>Link to<span class=\\u0022op\\u0022>={</span><span class=\\u0022at\\u0022>to</span>(category)<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-21\\u0022 title=\\u002221\\u0022>            <span class=\\u0022op\\u0022>{</span><span class=\\u0022va\\u0022>category</span>.<span class=\\u0022at\\u0022>name</span><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-22\\u0022 title=\\u002222\\u0022>          &lt;/Link<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-23\\u0022 title=\\u002223\\u0022>        &lt;/li<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-24\\u0022 title=\\u002224\\u0022>      ))<span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-25\\u0022 title=\\u002225\\u0022>    &lt;/ul<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-26\\u0022 title=\\u002226\\u0022>  )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-27\\u0022 title=\\u002227\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-28\\u0022 title=\\u002228\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-29\\u0022 title=\\u002229\\u0022><span class=\\u0022va\\u0022>Nav</span>.<span class=\\u0022at\\u0022>propTypes</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-30\\u0022 title=\\u002230\\u0022>  <span class=\\u0022co\\u0022>// state.shopping.categories の構造</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-31\\u0022 title=\\u002231\\u0022>  <span class=\\u0022dt\\u0022>categories</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>arrayOf</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-32\\u0022 title=\\u002232\\u0022>    <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>shape</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-33\\u0022 title=\\u002233\\u0022>      <span class=\\u0022dt\\u0022>id</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>string</span>.<span class=\\u0022at\\u0022>isRequired</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-34\\u0022 title=\\u002234\\u0022>      <span class=\\u0022dt\\u0022>name</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>string</span>.<span class=\\u0022at\\u0022>isRequired</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-35\\u0022 title=\\u002235\\u0022>    <span class=\\u0022op\\u0022>}</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-36\\u0022 title=\\u002236\\u0022>  ).<span class=\\u0022at\\u0022>isRequired</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb160-37\\u0022 title=\\u002237\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p>Nav コンポーネントの Container Component を作成します。</p>\\u000d\\u000a<p>[<code>src\\u005ccontainers\\u005cNav.js</code>]</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb161\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb161-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> connect <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb161-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> Nav <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;../components/Nav&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb161-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb161-4\\u0022 title=\\u00224\\u0022><span class=\\u0022kw\\u0022>const</span> mapStateToProps <span class=\\u0022op\\u0022>=</span> state <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb161-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022co\\u0022>// state.shopping.categories を props.categories に関連付ける</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb161-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022dt\\u0022>categories</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>state</span>.<span class=\\u0022va\\u0022>shopping</span>.<span class=\\u0022at\\u0022>categories</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb161-7\\u0022 title=\\u00227\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb161-8\\u0022 title=\\u00228\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb161-9\\u0022 title=\\u00229\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022at\\u0022>connect</span>(mapStateToProps)(Nav)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>App コンポーネントに Nav コンポーネントを組み込みます。</p>\\u000d\\u000a<p>[<code>src\\u005cApp.js</code>]</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb162\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React<span class=\\u0022op\\u0022>,</span> <span class=\\u0022op\\u0022>{</span> Component <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Route<span class=\\u0022op\\u0022>,</span> Switch<span class=\\u0022op\\u0022>,</span> Redirect <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-dom&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> Ranking <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./containers/Ranking&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> Nav <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./containers/Nav&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-5\\u0022 title=\\u00225\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-6\\u0022 title=\\u00226\\u0022><span class=\\u0022kw\\u0022>class</span> App <span class=\\u0022kw\\u0022>extends</span> Component <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022at\\u0022>render</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-8\\u0022 title=\\u00228\\u0022>    <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-9\\u0022 title=\\u00229\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>div className<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;App&quot;</span><span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-10\\u0022 title=\\u002210\\u0022>        <span class=\\u0022op\\u0022>{</span> <span class=\\u0022co\\u0022>/* Nav コンポーネントに差し替える */</span> <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-11\\u0022 title=\\u002211\\u0022>        <span class=\\u0022op\\u0022>{</span> <span class=\\u0022co\\u0022>/*</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-12\\u0022 title=\\u002212\\u0022><span class=\\u0022co\\u0022>        &lt;ul&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-13\\u0022 title=\\u002213\\u0022><span class=\\u0022co\\u0022>          &lt;li&gt;&lt;Link to=&quot;/all&quot;&gt;Category All&lt;/Link&gt;&lt;/li&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-14\\u0022 title=\\u002214\\u0022><span class=\\u0022co\\u0022>          &lt;li&gt;&lt;Link to=&quot;/category/2502&quot;&gt;Category 2502&lt;/Link&gt;&lt;/li&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-15\\u0022 title=\\u002215\\u0022><span class=\\u0022co\\u0022>          &lt;li&gt;&lt;Link to=&quot;/category/10002&quot;&gt;Category 10002&lt;/Link&gt;&lt;/li&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-16\\u0022 title=\\u002216\\u0022><span class=\\u0022co\\u0022>        &lt;/ul&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-17\\u0022 title=\\u002217\\u0022><span class=\\u0022co\\u0022>        */</span> <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-18\\u0022 title=\\u002218\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>Nav /<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-19\\u0022 title=\\u002219\\u0022>        </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-20\\u0022 title=\\u002220\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>Switch<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-21\\u0022 title=\\u002221\\u0022>          <span class=\\u0022op\\u0022>&lt;</span>Route path<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/all&quot;</span> component<span class=\\u0022op\\u0022>={</span>Ranking<span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-22\\u0022 title=\\u002222\\u0022>          <span class=\\u0022op\\u0022>&lt;</span>Route</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-23\\u0022 title=\\u002223\\u0022>            path<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/category/1&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-24\\u0022 title=\\u002224\\u0022>            render<span class=\\u0022op\\u0022>={</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-25\\u0022 title=\\u002225\\u0022>              () <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>&lt;</span>Redirect to<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/all&quot;</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-26\\u0022 title=\\u002226\\u0022>            <span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-27\\u0022 title=\\u002227\\u0022>          <span class=\\u0022op\\u0022>&lt;</span>Route</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-28\\u0022 title=\\u002228\\u0022>            path<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/category/:id&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-29\\u0022 title=\\u002229\\u0022>            render<span class=\\u0022op\\u0022>={</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-30\\u0022 title=\\u002230\\u0022>              (<span class=\\u0022op\\u0022>{</span> match <span class=\\u0022op\\u0022>}</span>) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>&lt;</span>Ranking categoryId<span class=\\u0022op\\u0022>={</span><span class=\\u0022va\\u0022>match</span>.<span class=\\u0022va\\u0022>params</span>.<span class=\\u0022at\\u0022>id</span><span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-31\\u0022 title=\\u002231\\u0022>            <span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-32\\u0022 title=\\u002232\\u0022>        &lt;/Switch<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-33\\u0022 title=\\u002233\\u0022>      &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-34\\u0022 title=\\u002234\\u0022>    )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-35\\u0022 title=\\u002235\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-36\\u0022 title=\\u002236\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-37\\u0022 title=\\u002237\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb162-38\\u0022 title=\\u002238\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> App<span class=\\u0022op\\u0022>;</span></a></code></pre></div></li>\\u000d\\u000a<li><p>機能拡張</p>\\u000d\\u000a<ul>\\u000d\\u000a<li>state.shopping.categoriesにないカテゴリIDへのアクセスは、トップページにリダイレクトする。</li>\\u000d\\u000a<li>カテゴリ名を表示</li>\\u000d\\u000a<li>ランキング情報の表示</li>\\u000d\\u000a</ul>\\u000d\\u000a<p>[<code>src\\u005cactions\\u005cRanking.js</code>]</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb163\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> fetchJsonp <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;fetch-jsonp&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> qs <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;qs&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-3\\u0022 title=\\u00223\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> replace <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-redux&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-4\\u0022 title=\\u00224\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-5\\u0022 title=\\u00225\\u0022><span class=\\u0022kw\\u0022>const</span> API_URL <span class=\\u0022op\\u0022>=</span> <span class=\\u0022st\\u0022>&quot;http://hoge.co.jp/v1/json/hoge&quot;</span><span class=\\u0022op\\u0022>;</span> <span class=\\u0022co\\u0022>// </span><span class=\\u0022al\\u0022>TODO</span><span class=\\u0022co\\u0022>: api のURL</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-6\\u0022 title=\\u00226\\u0022><span class=\\u0022kw\\u0022>const</span> APP_ID <span class=\\u0022op\\u0022>=</span> <span class=\\u0022st\\u0022>&quot;APP_ID&quot;</span><span class=\\u0022op\\u0022>;</span>                          <span class=\\u0022co\\u0022>// </span><span class=\\u0022al\\u0022>TODO</span><span class=\\u0022co\\u0022>: 不要だが定義しておく</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-7\\u0022 title=\\u00227\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-8\\u0022 title=\\u00228\\u0022><span class=\\u0022co\\u0022>// リクエスト開始 Action</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-9\\u0022 title=\\u00229\\u0022><span class=\\u0022co\\u0022>// categoryId ではなく category を含めるように変更</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-10\\u0022 title=\\u002210\\u0022><span class=\\u0022kw\\u0022>const</span> startRequest <span class=\\u0022op\\u0022>=</span> category <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-11\\u0022 title=\\u002211\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;START_REQUEST&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-12\\u0022 title=\\u002212\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span> category <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-13\\u0022 title=\\u002213\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-14\\u0022 title=\\u002214\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-15\\u0022 title=\\u002215\\u0022><span class=\\u0022co\\u0022>// レスポンス受信 Action</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-16\\u0022 title=\\u002216\\u0022><span class=\\u0022co\\u0022>// categoryId ではなく category を含めるように変更</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-17\\u0022 title=\\u002217\\u0022><span class=\\u0022kw\\u0022>const</span> receiveData <span class=\\u0022op\\u0022>=</span> (category<span class=\\u0022op\\u0022>,</span> error<span class=\\u0022op\\u0022>,</span> response) <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-18\\u0022 title=\\u002218\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;RECEIVE_DATA&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-19\\u0022 title=\\u002219\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span> category<span class=\\u0022op\\u0022>,</span> error<span class=\\u0022op\\u0022>,</span> response <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-20\\u0022 title=\\u002220\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-21\\u0022 title=\\u002221\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-22\\u0022 title=\\u002222\\u0022><span class=\\u0022co\\u0022>// リクエスト完了 Action</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-23\\u0022 title=\\u002223\\u0022><span class=\\u0022co\\u0022>// categoryId ではなく category を含めるように変更</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-24\\u0022 title=\\u002224\\u0022><span class=\\u0022kw\\u0022>const</span> finishRequest <span class=\\u0022op\\u0022>=</span> category <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-25\\u0022 title=\\u002225\\u0022>  <span class=\\u0022dt\\u0022>type</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;FINISH_REQUEST&quot;</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-26\\u0022 title=\\u002226\\u0022>  <span class=\\u0022dt\\u0022>payload</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022op\\u0022>{</span> category <span class=\\u0022op\\u0022>},</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-27\\u0022 title=\\u002227\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-28\\u0022 title=\\u002228\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-29\\u0022 title=\\u002229\\u0022><span class=\\u0022co\\u0022>// データ取得</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-30\\u0022 title=\\u002230\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022kw\\u0022>const</span> fetchRanking <span class=\\u0022op\\u0022>=</span> categoryId <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-31\\u0022 title=\\u002231\\u0022>  <span class=\\u0022co\\u0022>// redux-thunkを使った非同期処理</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-32\\u0022 title=\\u002232\\u0022>  <span class=\\u0022co\\u0022>// getState関数を引数に追加する</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-33\\u0022 title=\\u002233\\u0022>  <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022at\\u0022>async</span> (dispatch<span class=\\u0022op\\u0022>,</span> getState) <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-34\\u0022 title=\\u002234\\u0022>    <span class=\\u0022co\\u0022>// カテゴリIDに対応する state.shopping.categories の要素を取得</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-35\\u0022 title=\\u002235\\u0022>    <span class=\\u0022kw\\u0022>const</span> categories <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>getState</span>().<span class=\\u0022va\\u0022>shopping</span>.<span class=\\u0022at\\u0022>categories</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-36\\u0022 title=\\u002236\\u0022>    <span class=\\u0022kw\\u0022>const</span> category <span class=\\u0022op\\u0022>=</span> <span class=\\u0022va\\u0022>categories</span>.<span class=\\u0022at\\u0022>find</span>(category <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022va\\u0022>category</span>.<span class=\\u0022at\\u0022>id</span> <span class=\\u0022op\\u0022>===</span> categoryId))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-37\\u0022 title=\\u002237\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-38\\u0022 title=\\u002238\\u0022>    <span class=\\u0022co\\u0022>// 対応する情報がなければトップページへリダイレクト</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-39\\u0022 title=\\u002239\\u0022>    <span class=\\u0022cf\\u0022>if</span> (<span class=\\u0022kw\\u0022>typeof</span> category <span class=\\u0022op\\u0022>===</span> <span class=\\u0022st\\u0022>&quot;undefined&quot;</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-40\\u0022 title=\\u002240\\u0022>      <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>replace</span>(<span class=\\u0022st\\u0022>&quot;/&quot;</span>))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-41\\u0022 title=\\u002241\\u0022>      <span class=\\u0022cf\\u0022>return</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-42\\u0022 title=\\u002242\\u0022>    <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-43\\u0022 title=\\u002243\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-44\\u0022 title=\\u002244\\u0022>    <span class=\\u0022co\\u0022>// startRequest Action の引数に category を受け渡す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-45\\u0022 title=\\u002245\\u0022>    <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>startRequest</span>(category))<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-46\\u0022 title=\\u002246\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-47\\u0022 title=\\u002247\\u0022>    <span class=\\u0022kw\\u0022>const</span> queryString <span class=\\u0022op\\u0022>=</span> <span class=\\u0022va\\u0022>qs</span>.<span class=\\u0022at\\u0022>stringify</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-48\\u0022 title=\\u002248\\u0022>      <span class=\\u0022dt\\u0022>appid</span><span class=\\u0022op\\u0022>:</span> APP_ID<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-49\\u0022 title=\\u002249\\u0022>      <span class=\\u0022dt\\u0022>category_id</span><span class=\\u0022op\\u0022>:</span> categoryId<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-50\\u0022 title=\\u002250\\u0022>    <span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-51\\u0022 title=\\u002251\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-52\\u0022 title=\\u002252\\u0022>    <span class=\\u0022cf\\u0022>try</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-53\\u0022 title=\\u002253\\u0022>      <span class=\\u0022kw\\u0022>const</span> response <span class=\\u0022op\\u0022>=</span> await <span class=\\u0022at\\u0022>fetchJsonp</span>(<span class=\\u0022vs\\u0022>`</span><span class=\\u0022sc\\u0022>${</span>API_URL<span class=\\u0022sc\\u0022>}</span><span class=\\u0022vs\\u0022>?</span><span class=\\u0022sc\\u0022>${</span>queryString<span class=\\u0022sc\\u0022>}</span><span class=\\u0022vs\\u0022>`</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-54\\u0022 title=\\u002254\\u0022>      <span class=\\u0022kw\\u0022>const</span> data <span class=\\u0022op\\u0022>=</span> await <span class=\\u0022va\\u0022>response</span>.<span class=\\u0022at\\u0022>json</span>()<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-55\\u0022 title=\\u002255\\u0022>      <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>receiveData</span>(category<span class=\\u0022op\\u0022>,</span> <span class=\\u0022kw\\u0022>null</span><span class=\\u0022op\\u0022>,</span> data))<span class=\\u0022op\\u0022>;</span>  <span class=\\u0022co\\u0022>// categoryId ではなく category を受け渡す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-56\\u0022 title=\\u002256\\u0022>      </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-57\\u0022 title=\\u002257\\u0022>    <span class=\\u0022op\\u0022>}</span> <span class=\\u0022cf\\u0022>catch</span> (ex) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-58\\u0022 title=\\u002258\\u0022>      <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>receiveData</span>(category<span class=\\u0022op\\u0022>,</span> ex))<span class=\\u0022op\\u0022>;</span>  <span class=\\u0022co\\u0022>// categoryId ではなく category を受け渡す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-59\\u0022 title=\\u002259\\u0022>    <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-60\\u0022 title=\\u002260\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-61\\u0022 title=\\u002261\\u0022>    <span class=\\u0022at\\u0022>dispatch</span>(<span class=\\u0022at\\u0022>finishRequest</span>(category))<span class=\\u0022op\\u0022>;</span>      <span class=\\u0022co\\u0022>// categoryId ではなく category を受け渡す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-62\\u0022 title=\\u002262\\u0022>  <span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb163-63\\u0022 title=\\u002263\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p>修正したActionに対応できるように、Reducerを変更します。</p>\\u000d\\u000a<p>[<code>src\\u005creducers\\u005cRanking.js</code>] （変更する initialState の部分のみ抜粋）</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb164\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb164-1\\u0022 title=\\u00221\\u0022><span class=\\u0022co\\u0022>// 初期状態</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb164-2\\u0022 title=\\u00222\\u0022><span class=\\u0022kw\\u0022>const</span> initialState <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb164-3\\u0022 title=\\u00223\\u0022>  <span class=\\u0022co\\u0022>// categoryId → category</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb164-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022dt\\u0022>category</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022kw\\u0022>undefined</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb164-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022dt\\u0022>ranking</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022kw\\u0022>undefined</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb164-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022dt\\u0022>error</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022kw\\u0022>false</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb164-7\\u0022 title=\\u00227\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a<p>Rankingコンポーネントと Store の状態を関連付けます。</p>\\u000d\\u000a<p>[<code>src\\u005ccontainers\\u005cRanking.js</code>] （mapStateToProps の部分のみ抜粋）</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb165\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb165-1\\u0022 title=\\u00221\\u0022><span class=\\u0022kw\\u0022>const</span> mapStateToProps <span class=\\u0022op\\u0022>=</span> (state<span class=\\u0022op\\u0022>,</span> ownProps) <span class=\\u0022op\\u0022>=&gt;</span> (<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb165-2\\u0022 title=\\u00222\\u0022>  <span class=\\u0022dt\\u0022>categoryId</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>ownProps</span>.<span class=\\u0022at\\u0022>categoryId</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb165-3\\u0022 title=\\u00223\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb165-4\\u0022 title=\\u00224\\u0022>  <span class=\\u0022co\\u0022>// カテゴリ情報、ランキング情報を Ranking コンポーネントに渡す</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb165-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022dt\\u0022>category</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>state</span>.<span class=\\u0022va\\u0022>Ranking</span>.<span class=\\u0022at\\u0022>category</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb165-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022dt\\u0022>ranking</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>state</span>.<span class=\\u0022va\\u0022>Ranking</span>.<span class=\\u0022at\\u0022>ranking</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb165-7\\u0022 title=\\u00227\\u0022>  <span class=\\u0022dt\\u0022>error</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>state</span>.<span class=\\u0022va\\u0022>Ranking</span>.<span class=\\u0022at\\u0022>error</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb165-8\\u0022 title=\\u00228\\u0022><span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>;</span></a></code></pre></div>\\u000d\\u000a<p>Rankingコンポーネントは、受け取ったカテゴリ情報、ランキング情報、エラーフラグを表示します。</p>\\u000d\\u000a<p>[<code>src\\u005ccomponents\\u005cRanking.js</code>]</p>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb166\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> PropTypes <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;prop-types&#39;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>export</span> <span class=\\u0022im\\u0022>default</span> <span class=\\u0022kw\\u0022>class</span> Ranking <span class=\\u0022kw\\u0022>extends</span> <span class=\\u0022va\\u0022>React</span>.<span class=\\u0022at\\u0022>Component</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-5\\u0022 title=\\u00225\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-6\\u0022 title=\\u00226\\u0022>  <span class=\\u0022at\\u0022>componentWillMount</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-7\\u0022 title=\\u00227\\u0022>    <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>onMount</span>(<span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>categoryId</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-8\\u0022 title=\\u00228\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-9\\u0022 title=\\u00229\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-10\\u0022 title=\\u002210\\u0022>  <span class=\\u0022at\\u0022>componentWillReceiveProps</span>(nextProps) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-11\\u0022 title=\\u002211\\u0022>    <span class=\\u0022cf\\u0022>if</span> (<span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>categoryId</span> <span class=\\u0022op\\u0022>!==</span> <span class=\\u0022va\\u0022>nextProps</span>.<span class=\\u0022at\\u0022>categoryId</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-12\\u0022 title=\\u002212\\u0022>      <span class=\\u0022co\\u0022>// props.categoryId に変化があるので、ページ移動が発生している</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-13\\u0022 title=\\u002213\\u0022>      <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022va\\u0022>props</span>.<span class=\\u0022at\\u0022>onUpdate</span>(<span class=\\u0022va\\u0022>nextProps</span>.<span class=\\u0022at\\u0022>categoryId</span>)<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-14\\u0022 title=\\u002214\\u0022>    <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-15\\u0022 title=\\u002215\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-16\\u0022 title=\\u002216\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-17\\u0022 title=\\u002217\\u0022>  <span class=\\u0022at\\u0022>render</span>() <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-18\\u0022 title=\\u002218\\u0022>    <span class=\\u0022kw\\u0022>const</span> <span class=\\u0022op\\u0022>{</span> category<span class=\\u0022op\\u0022>,</span> ranking<span class=\\u0022op\\u0022>,</span> error <span class=\\u0022op\\u0022>}</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022kw\\u0022>this</span>.<span class=\\u0022at\\u0022>props</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-19\\u0022 title=\\u002219\\u0022>    </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-20\\u0022 title=\\u002220\\u0022>    <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-21\\u0022 title=\\u002221\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-22\\u0022 title=\\u002222\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>h2<span class=\\u0022op\\u0022>&gt;{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-23\\u0022 title=\\u002223\\u0022>          <span class=\\u0022kw\\u0022>typeof</span> category <span class=\\u0022op\\u0022>!==</span> <span class=\\u0022st\\u0022>&quot;undefined&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-24\\u0022 title=\\u002224\\u0022>            <span class=\\u0022op\\u0022>?</span> <span class=\\u0022vs\\u0022>`Ranking: </span><span class=\\u0022sc\\u0022>${</span><span class=\\u0022va\\u0022>category</span>.<span class=\\u0022at\\u0022>name</span><span class=\\u0022sc\\u0022>}</span><span class=\\u0022vs\\u0022>`</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-25\\u0022 title=\\u002225\\u0022>            : <span class=\\u0022st\\u0022>&quot;&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-26\\u0022 title=\\u002226\\u0022>        <span class=\\u0022op\\u0022>}</span>&lt;/h2<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-27\\u0022 title=\\u002227\\u0022>        </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-28\\u0022 title=\\u002228\\u0022>        <span class=\\u0022op\\u0022>{</span>(() <span class=\\u0022op\\u0022>=&gt;</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-29\\u0022 title=\\u002229\\u0022>          <span class=\\u0022cf\\u0022>if</span> (error) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-30\\u0022 title=\\u002230\\u0022>            <span class=\\u0022co\\u0022>// エラー表示</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-31\\u0022 title=\\u002231\\u0022>            <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>&lt;</span>p<span class=\\u0022op\\u0022>&gt;</span>エラーが発生しました。リロードしてください。&lt;/p<span class=\\u0022op\\u0022>&gt;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-32\\u0022 title=\\u002232\\u0022>            </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-33\\u0022 title=\\u002233\\u0022>          <span class=\\u0022op\\u0022>}</span> <span class=\\u0022cf\\u0022>else</span> <span class=\\u0022cf\\u0022>if</span> (<span class=\\u0022kw\\u0022>typeof</span> ranking <span class=\\u0022op\\u0022>===</span> <span class=\\u0022st\\u0022>&quot;undefined&quot;</span>) <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-34\\u0022 title=\\u002234\\u0022>            <span class=\\u0022co\\u0022>// リクエスト完了前</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-35\\u0022 title=\\u002235\\u0022>            <span class=\\u0022cf\\u0022>return</span> <span class=\\u0022op\\u0022>&lt;</span>p<span class=\\u0022op\\u0022>&gt;</span><span class=\\u0022va\\u0022>読み込み中</span>...&lt;/p<span class=\\u0022op\\u0022>&gt;;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-36\\u0022 title=\\u002236\\u0022>            </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-37\\u0022 title=\\u002237\\u0022>          <span class=\\u0022op\\u0022>}</span> <span class=\\u0022cf\\u0022>else</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-38\\u0022 title=\\u002238\\u0022>            <span class=\\u0022co\\u0022>// ランキングの表示</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-39\\u0022 title=\\u002239\\u0022>            <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-40\\u0022 title=\\u002240\\u0022>              <span class=\\u0022op\\u0022>&lt;</span>ol<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-41\\u0022 title=\\u002241\\u0022>                <span class=\\u0022op\\u0022>{</span><span class=\\u0022va\\u0022>ranking</span>.<span class=\\u0022at\\u0022>map</span>(item <span class=\\u0022op\\u0022>=&gt;</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-42\\u0022 title=\\u002242\\u0022>                  <span class=\\u0022op\\u0022>&lt;</span>li key<span class=\\u0022op\\u0022>={</span><span class=\\u0022vs\\u0022>`ranking-item-</span><span class=\\u0022sc\\u0022>${</span><span class=\\u0022va\\u0022>item</span>.<span class=\\u0022at\\u0022>code</span><span class=\\u0022sc\\u0022>}</span><span class=\\u0022vs\\u0022>`</span><span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-43\\u0022 title=\\u002243\\u0022>                    <span class=\\u0022op\\u0022>&lt;</span>img alt<span class=\\u0022op\\u0022>={</span><span class=\\u0022va\\u0022>item</span>.<span class=\\u0022at\\u0022>name</span><span class=\\u0022op\\u0022>}</span> src<span class=\\u0022op\\u0022>={</span><span class=\\u0022va\\u0022>item</span>.<span class=\\u0022at\\u0022>imageUrl</span><span class=\\u0022op\\u0022>}</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-44\\u0022 title=\\u002244\\u0022>                    <span class=\\u0022op\\u0022>&lt;</span>a href<span class=\\u0022op\\u0022>={</span><span class=\\u0022va\\u0022>item</span>.<span class=\\u0022at\\u0022>url</span><span class=\\u0022op\\u0022>}</span> target<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;_blank&quot;</span><span class=\\u0022op\\u0022>&gt;{</span><span class=\\u0022va\\u0022>item</span>.<span class=\\u0022at\\u0022>name</span><span class=\\u0022op\\u0022>}</span>&lt;/a<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-45\\u0022 title=\\u002245\\u0022>                  &lt;/li<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-46\\u0022 title=\\u002246\\u0022>                ))<span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-47\\u0022 title=\\u002247\\u0022>              &lt;/ol<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-48\\u0022 title=\\u002248\\u0022>            )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-49\\u0022 title=\\u002249\\u0022>          <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-50\\u0022 title=\\u002250\\u0022>        <span class=\\u0022op\\u0022>}</span>)()<span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-51\\u0022 title=\\u002251\\u0022>      &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-52\\u0022 title=\\u002252\\u0022>    )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-53\\u0022 title=\\u002253\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-54\\u0022 title=\\u002254\\u0022><span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-55\\u0022 title=\\u002255\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-56\\u0022 title=\\u002256\\u0022><span class=\\u0022co\\u0022>// propsのデータ型を定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-57\\u0022 title=\\u002257\\u0022><span class=\\u0022va\\u0022>Ranking</span>.<span class=\\u0022at\\u0022>propTypes</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-58\\u0022 title=\\u002258\\u0022>  <span class=\\u0022dt\\u0022>categoryId</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>string</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-59\\u0022 title=\\u002259\\u0022>  <span class=\\u0022dt\\u0022>onMount</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>func</span>.<span class=\\u0022at\\u0022>isRequired</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-60\\u0022 title=\\u002260\\u0022>  <span class=\\u0022dt\\u0022>onUpdate</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>func</span>.<span class=\\u0022at\\u0022>isRequired</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-61\\u0022 title=\\u002261\\u0022>  </a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-62\\u0022 title=\\u002262\\u0022>  <span class=\\u0022co\\u0022>// category, ranking, error の型を追加</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-63\\u0022 title=\\u002263\\u0022>  <span class=\\u0022dt\\u0022>category</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>shape</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-64\\u0022 title=\\u002264\\u0022>    <span class=\\u0022dt\\u0022>id</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>string</span>.<span class=\\u0022at\\u0022>isRequired</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-65\\u0022 title=\\u002265\\u0022>    <span class=\\u0022dt\\u0022>name</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>string</span>.<span class=\\u0022at\\u0022>isRequired</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-66\\u0022 title=\\u002266\\u0022>  <span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-67\\u0022 title=\\u002267\\u0022>  <span class=\\u0022dt\\u0022>ranking</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>arrayOf</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-68\\u0022 title=\\u002268\\u0022>    <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022at\\u0022>shape</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-69\\u0022 title=\\u002269\\u0022>      <span class=\\u0022dt\\u0022>code</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>string</span>.<span class=\\u0022at\\u0022>isRequired</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-70\\u0022 title=\\u002270\\u0022>      <span class=\\u0022dt\\u0022>name</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>string</span>.<span class=\\u0022at\\u0022>isRequired</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-71\\u0022 title=\\u002271\\u0022>      <span class=\\u0022dt\\u0022>url</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>string</span>.<span class=\\u0022at\\u0022>isRequired</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-72\\u0022 title=\\u002272\\u0022>      <span class=\\u0022dt\\u0022>imageUrl</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>string</span>.<span class=\\u0022at\\u0022>isRequired</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-73\\u0022 title=\\u002273\\u0022>    <span class=\\u0022op\\u0022>}</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-74\\u0022 title=\\u002274\\u0022>  )<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-75\\u0022 title=\\u002275\\u0022>  <span class=\\u0022dt\\u0022>error</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022va\\u0022>PropTypes</span>.<span class=\\u0022va\\u0022>bool</span>.<span class=\\u0022at\\u0022>isRequired</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-76\\u0022 title=\\u002276\\u0022><span class=\\u0022op\\u0022>};</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-77\\u0022 title=\\u002277\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-78\\u0022 title=\\u002278\\u0022><span class=\\u0022co\\u0022>// 未指定時の既定値を定義</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-79\\u0022 title=\\u002279\\u0022><span class=\\u0022va\\u0022>Ranking</span>.<span class=\\u0022at\\u0022>defaultProps</span> <span class=\\u0022op\\u0022>=</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-80\\u0022 title=\\u002280\\u0022>  <span class=\\u0022dt\\u0022>categoryId</span><span class=\\u0022op\\u0022>:</span> <span class=\\u0022st\\u0022>&quot;1&quot;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb166-81\\u0022 title=\\u002281\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div></li>\\u000d\\u000a</ol>\\u000d\\u000a<h2 id=\\u0022日付を扱う\\u0022>日付を扱う</h2>\\u000d\\u000a<p><code>react-moment</code>を使います。 <code>moment</code>を使ったReactコンポーネントです。</p>\\u000d\\u000a<h3 id=\\u0022インストール-3\\u0022>インストール</h3>\\u000d\\u000a<pre><code>npm install --save moment react-moment\\u000d\\u000a</code></pre>\\u000d\\u000a<p>タイムゾーンを指定するのであれば、こちらのパッケージもインストールします。</p>\\u000d\\u000a<pre><code>npm install --save moment-timezone\\u000d\\u000a</code></pre>\\u000d\\u000a<h2 id=\\u0022note-react-router\\u0022>Note: React Router</h2>\\u000d\\u000a<p>Router : すべてのRouterコンポーネントに共通する低レベルインターフェース。根底クラスみたいなもんだと思えばよいでしょう。</p>\\u000d\\u000a<pre><code>一般的にアプリでは次のRouterのうち、ひとつを使います。\\u000d\\u000a\\u000d\\u000a- BrowserRouter\\u000d\\u000a- HashRouter\\u000d\\u000a- MemoryRouter\\u000d\\u000a- NativeRouter\\u000d\\u000a- StaticRouter\\u000d\\u000a</code></pre>\\u000d\\u000a<p>BrowserRouter : HTML5 の history API を使って、URLとUIを同期するRouterコンポーネント。</p>\\u000d\\u000a<p>HashRouter : URLのハッシュ（＝window.location.hash）を使って、URLとUIを同期するRouterコンポーネント。</p>\\u000d\\u000a<p>Link : ナビゲーションコンポーネント。</p>\\u000d\\u000a<p>NavLink : 見た目（スタイルの属性）ができるLinkコンポーネント。</p>\\u000d\\u000a<p>Route : パスと一致するときに、コンポーネントを描画するコンポーネント。</p>\\u000d\\u000a<pre><code>Renderコンポーネントを使って、コンポーネントを描画するには次の3つの方法があります。\\u000d\\u000aが、ほとんどのケースで使うことになるのは、`&lt;Route component&gt;`でしょう。\\u000d\\u000a\\u000d\\u000a- `&lt;Route component&gt;`\\u000d\\u000a\\u000d\\u000a    パスが一致したときに、指定したコンポーネントを描画します。\\u000d\\u000a    \\u000d\\u000a    ~~~javascript\\u000d\\u000a    // Helloコンポーネントを描画\\u000d\\u000a    &lt;Route path=&quot;/hello&quot; component={Hello}/&gt;\\u000d\\u000a    ~~~\\u000d\\u000a\\u000d\\u000a- `&lt;Route render&gt;`\\u000d\\u000a\\u000d\\u000a    パスが一致したときに、render関数に従い描画します。\\u000d\\u000a    \\u000d\\u000a    ~~~javascript\\u000d\\u000a    &lt;Route path=&quot;/hello&quot; render={() =&gt; &lt;div&gt;Hello&lt;/div&gt;}/&gt;\\u000d\\u000a    ~~~\\u000d\\u000a\\u000d\\u000a- `&lt;Route children&gt;`\\u000d\\u000a\\u000d\\u000a    パスが一致するかどうかを描画するときに使います。\\u000d\\u000a    \\u000d\\u000a    `children`の関数の引数 `match`には、パスが一致したときはオブジェクト、それ以外は null が渡されます。\\u000d\\u000a    \\u000d\\u000a    [`match`の詳細は公式ドキュメントを参照。](https://reacttraining.com/react-router/web/api/match){target=&quot;_blank&quot;}\\u000d\\u000a    \\u000d\\u000a    ~~~javascript\\u000d\\u000a    &lt;ul&gt;\\u000d\\u000a      &lt;ListItemLink to=&quot;/somewhere&quot;/&gt;\\u000d\\u000a      &lt;ListItemLink to=&quot;/somewhere-else&quot;/&gt;\\u000d\\u000a    &lt;/ul&gt;\\u000d\\u000a\\u000d\\u000a    const ListItemLink = ({ to, ...rest }) =&gt; (\\u000d\\u000a      &lt;Route path={to} children={({ match }) =&gt; (\\u000d\\u000a        &lt;li className={match ? &#39;active&#39; : &#39;&#39;}&gt;\\u000d\\u000a          &lt;Link to={to} {...rest}/&gt;\\u000d\\u000a        &lt;/li&gt;\\u000d\\u000a      )}/&gt;\\u000d\\u000a    )\\u000d\\u000a    ~~~\\u000d\\u000a\\u000d\\u000a\\u000d\\u000aすべての方法で、次の3つのpropsが渡されます。\\u000d\\u000a\\u000d\\u000a- match\\u000d\\u000a- location\\u000d\\u000a- history\\u000d\\u000a</code></pre>\\u000d\\u000a<h2 id=\\u0022react-router-redux\\u0022>React Router Redux</h2>\\u000d\\u000a<h3 id=\\u0022基本的な考え方\\u0022>基本的な考え方</h3>\\u000d\\u000a<ol>\\u000d\\u000a<li><p>history を作ります。<br />\\u000d\\u000aHTML5 の history API を使うか、URLハッシュを使うか選べます。</p></li>\\u000d\\u000a<li><p>ミドルウェアを構築します。<br />\\u000d\\u000aナビゲーションアクションのインターセプトとディスパッチのためのミドルウェアを構築。 噛み砕いて言うと？</p></li>\\u000d\\u000a<li><p><code>createStore</code>関数にReducerとMiddlewareを適用します。<br />\\u000d\\u000aReducerの指定は「router」キーに「routerReducer」を指定します。</p></li>\\u000d\\u000a</ol>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb171\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react&#39;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> ReactDOM <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-dom&#39;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-4\\u0022 title=\\u00224\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> createStore<span class=\\u0022op\\u0022>,</span> combineReducers<span class=\\u0022op\\u0022>,</span> applyMiddleware <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;redux&#39;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-5\\u0022 title=\\u00225\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Provider <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-redux&#39;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-6\\u0022 title=\\u00226\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-7\\u0022 title=\\u00227\\u0022><span class=\\u0022im\\u0022>import</span> createHistory <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;history/createBrowserHistory&#39;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-8\\u0022 title=\\u00228\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> Route <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router&#39;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-9\\u0022 title=\\u00229\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-10\\u0022 title=\\u002210\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span> ConnectedRouter<span class=\\u0022op\\u0022>,</span> routerReducer<span class=\\u0022op\\u0022>,</span> routerMiddleware<span class=\\u0022op\\u0022>,</span> push <span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;react-router-redux&#39;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-11\\u0022 title=\\u002211\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-12\\u0022 title=\\u002212\\u0022><span class=\\u0022im\\u0022>import</span> reducers <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&#39;./reducers&#39;</span> <span class=\\u0022co\\u0022>// Or wherever you keep your reducers</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-13\\u0022 title=\\u002213\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-14\\u0022 title=\\u002214\\u0022><span class=\\u0022co\\u0022>// (1) history の生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-15\\u0022 title=\\u002215\\u0022><span class=\\u0022kw\\u0022>const</span> history <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createHistory</span>()</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-16\\u0022 title=\\u002216\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-17\\u0022 title=\\u002217\\u0022><span class=\\u0022co\\u0022>// (2) ミドルウェアを構築</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-18\\u0022 title=\\u002218\\u0022><span class=\\u0022kw\\u0022>const</span> middleware <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>routerMiddleware</span>(history)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-19\\u0022 title=\\u002219\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-20\\u0022 title=\\u002220\\u0022><span class=\\u0022co\\u0022>// (3) storeの生成</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-21\\u0022 title=\\u002221\\u0022><span class=\\u0022co\\u0022>//      ・Reducerを指定します。router キーに routerReducer を指定します。</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-22\\u0022 title=\\u002222\\u0022><span class=\\u0022co\\u0022>//      ・構築したミドルウェアを適用します。</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-23\\u0022 title=\\u002223\\u0022><span class=\\u0022kw\\u0022>const</span> store <span class=\\u0022op\\u0022>=</span> <span class=\\u0022at\\u0022>createStore</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-24\\u0022 title=\\u002224\\u0022>  <span class=\\u0022at\\u0022>combineReducers</span>(<span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-25\\u0022 title=\\u002225\\u0022>    ...<span class=\\u0022at\\u0022>reducers</span><span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-26\\u0022 title=\\u002226\\u0022>    <span class=\\u0022dt\\u0022>router</span><span class=\\u0022op\\u0022>:</span> routerReducer</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-27\\u0022 title=\\u002227\\u0022>  <span class=\\u0022op\\u0022>}</span>)<span class=\\u0022op\\u0022>,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-28\\u0022 title=\\u002228\\u0022>  <span class=\\u0022at\\u0022>applyMiddleware</span>(middleware)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-29\\u0022 title=\\u002229\\u0022>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-30\\u0022 title=\\u002230\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-31\\u0022 title=\\u002231\\u0022><span class=\\u0022co\\u0022>// これでどこからでもナビゲーションのアクションを送信できます。</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-32\\u0022 title=\\u002232\\u0022><span class=\\u0022co\\u0022>// store.dispatch(push(&#39;/foo&#39;))</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-33\\u0022 title=\\u002233\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-34\\u0022 title=\\u002234\\u0022><span class=\\u0022va\\u0022>ReactDOM</span>.<span class=\\u0022at\\u0022>render</span>(</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-35\\u0022 title=\\u002235\\u0022>  <span class=\\u0022op\\u0022>&lt;</span>Provider store<span class=\\u0022op\\u0022>={</span>store<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-36\\u0022 title=\\u002236\\u0022>    <span class=\\u0022op\\u0022>{</span> <span class=\\u0022co\\u0022>/* ConnectedRouter は Provider コンポーネントに store を自動で使います */</span> <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-37\\u0022 title=\\u002237\\u0022>    <span class=\\u0022op\\u0022>&lt;</span>ConnectedRouter history<span class=\\u0022op\\u0022>={</span>history<span class=\\u0022op\\u0022>}&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-38\\u0022 title=\\u002238\\u0022>      <span class=\\u0022op\\u0022>&lt;</span>div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-39\\u0022 title=\\u002239\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>Route exact path<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/&quot;</span> component<span class=\\u0022op\\u0022>={</span>Home<span class=\\u0022op\\u0022>}</span>/&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-40\\u0022 title=\\u002240\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>Route path<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/about&quot;</span> component<span class=\\u0022op\\u0022>={</span>About<span class=\\u0022op\\u0022>}</span>/&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-41\\u0022 title=\\u002241\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>Route path<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;/topics&quot;</span> component<span class=\\u0022op\\u0022>={</span>Topics<span class=\\u0022op\\u0022>}</span>/&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-42\\u0022 title=\\u002242\\u0022>      &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-43\\u0022 title=\\u002243\\u0022>    &lt;/ConnectedRouter<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-44\\u0022 title=\\u002244\\u0022>  &lt;/Provider<span class=\\u0022op\\u0022>&gt;,</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-45\\u0022 title=\\u002245\\u0022>  <span class=\\u0022va\\u0022>document</span>.<span class=\\u0022at\\u0022>getElementById</span>(<span class=\\u0022st\\u0022>&#39;root&#39;</span>)</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb171-46\\u0022 title=\\u002246\\u0022>)</a></code></pre></div>\\u000d\\u000a<h2 id=\\u0022head要素内の各要素を書き換える\\u0022>head要素内の各要素を書き換える</h2>\\u000d\\u000a<p>React Helmet パッケージを使います。</p>\\u000d\\u000a<h3 id=\\u0022実施環境-1\\u0022>実施環境</h3>\\u000d\\u000a<ul>\\u000d\\u000a<li>react-helmet 5.2.0</li>\\u000d\\u000a</ul>\\u000d\\u000a<h3 id=\\u0022インストール-4\\u0022>インストール</h3>\\u000d\\u000a<pre><code>&gt; npm install --save react-helmet\\u000d\\u000a</code></pre>\\u000d\\u000a<h3 id=\\u0022使い方-1\\u0022>使い方</h3>\\u000d\\u000a<ul>\\u000d\\u000a<li><code>react-helmet</code>パッケージをインポートします。</li>\\u000d\\u000a<li><code>Helmet</code>コンポーネントの子要素に書き換える要素を指定します。</li>\\u000d\\u000a</ul>\\u000d\\u000a<div class=\\u0022sourceCode\\u0022 id=\\u0022cb173\\u0022><pre class=\\u0022sourceCode javascript\\u0022><code class=\\u0022sourceCode javascript\\u0022><a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-1\\u0022 title=\\u00221\\u0022><span class=\\u0022im\\u0022>import</span> React <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&quot;react&quot;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-2\\u0022 title=\\u00222\\u0022><span class=\\u0022im\\u0022>import</span> <span class=\\u0022op\\u0022>{</span>Helmet<span class=\\u0022op\\u0022>}</span> <span class=\\u0022im\\u0022>from</span> <span class=\\u0022st\\u0022>&quot;react-helmet&quot;</span><span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-3\\u0022 title=\\u00223\\u0022></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-4\\u0022 title=\\u00224\\u0022><span class=\\u0022kw\\u0022>class</span> Application <span class=\\u0022kw\\u0022>extends</span> <span class=\\u0022va\\u0022>React</span>.<span class=\\u0022at\\u0022>Component</span> <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-5\\u0022 title=\\u00225\\u0022>  <span class=\\u0022at\\u0022>render</span> () <span class=\\u0022op\\u0022>{</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-6\\u0022 title=\\u00226\\u0022>    <span class=\\u0022cf\\u0022>return</span> (</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-7\\u0022 title=\\u00227\\u0022>        <span class=\\u0022op\\u0022>&lt;</span>div className<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;application&quot;</span><span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-8\\u0022 title=\\u00228\\u0022>            <span class=\\u0022op\\u0022>&lt;</span>Helmet<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-9\\u0022 title=\\u00229\\u0022>                <span class=\\u0022op\\u0022>&lt;</span>meta charSet<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;utf-8&quot;</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-10\\u0022 title=\\u002210\\u0022>                <span class=\\u0022op\\u0022>&lt;</span>title<span class=\\u0022op\\u0022>&gt;</span>My Title&lt;/title<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-11\\u0022 title=\\u002211\\u0022>                <span class=\\u0022op\\u0022>&lt;</span>link rel<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;canonical&quot;</span> href<span class=\\u0022op\\u0022>=</span><span class=\\u0022st\\u0022>&quot;http://mysite.com/example&quot;</span> /&gt;</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-12\\u0022 title=\\u002212\\u0022>            &lt;/Helmet<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-13\\u0022 title=\\u002213\\u0022>            ...</a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-14\\u0022 title=\\u002214\\u0022>        &lt;/div<span class=\\u0022op\\u0022>&gt;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-15\\u0022 title=\\u002215\\u0022>    )<span class=\\u0022op\\u0022>;</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-16\\u0022 title=\\u002216\\u0022>  <span class=\\u0022op\\u0022>}</span></a>\\u000d\\u000a<a class=\\u0022sourceLine\\u0022 id=\\u0022cb173-17\\u0022 title=\\u002217\\u0022><span class=\\u0022op\\u0022>};</span></a></code></pre></div>\\u000d\\u000a\";\n  } else if (postId === \"3rd\") {\n    pageContent.datePublished = \"2019-01-21T07:04+09:00\";\n    pageContent.title = \"[CSS3] ボックスに影をつける box-shadow プロパティ\";\n    pageContent.body = \"<h2>概要</h2><p><code>box-shadow</code>プロパティは、ボックスに1つまたは複数の影をつけるときに使います。<code>box-shadow</code>プロパティでは、たとえば以下のように影を指定します。</p><h2>コードサンプル</h2><p><code>box-shadow: 10px 10px;</code></p><h3>補足説明</h3><p>影は２～４つの長さの値で定義されますが、任意で色、insetキーワードを指定することもできます。 insetキーワードを付けると、影がボックスの外側ではなく内側につくようになります。 長さの指定を省略すると0となり、色の指定を省略するとユーザーエージェントが選んだ色になります。 複数の影を指定する場合には、カンマ（ , ）区切りで影のリストを複数指定します。</p><p>影を定義する指定内容は、以下のように解釈されます。</p><ul><li>•１番目の長さの値は、水平方向の影のオフセット距離です。正の値を指定すると右へ、負の値を指定すると左へ影が移動します。</li><li>•２番目の長さの値は、垂直方向の影のオフセット距離です。正の値を指定すると下へ、負の値を指定すると上へ影が移動します。</li><li>：</li></ul>\";\n  }\n\n  return data;\n};\n\n/*\n\n複数の構造化データを使うときは、オブジェクトの配列にすればよい。\n（たとえば、ロゴ＋記事とか、記事＋パンくずとか）\n\nロゴのサンプル\n\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"Organization\",\n  \"url\": \"http://www.example.com\",\n  \"logo\": \"http://www.example.com/images/logo.png\"\n}\n\n記事のサンプル\n\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"NewsArticle\",\n  \"mainEntityOfPage\": {\n    \"@type\": \"WebPage\",\n    \"@id\": \"https://google.com/article\"\n  },\n  \"headline\": \"Article headline\",\n  \"image\": [\n    \"https://example.com/photos/1x1/photo.jpg\",\n    \"https://example.com/photos/4x3/photo.jpg\",\n    \"https://example.com/photos/16x9/photo.jpg\"\n   ],\n  \"datePublished\": \"2015-02-05T08:00:00+08:00\",\n  \"dateModified\": \"2015-02-05T09:20:00+08:00\",\n  \"author\": {\n    \"@type\": \"Person\",\n    \"name\": \"John Doe\"\n  },\n   \"publisher\": {\n    \"@type\": \"Organization\",\n    \"name\": \"Google\",\n    \"logo\": {\n      \"@type\": \"ImageObject\",\n      \"url\": \"https://google.com/logo.jpg\"\n    }\n  },\n  \"description\": \"A most wonderful article\"\n}\n</script>\n\nパンくずのサンプル\n\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"http://schema.org\",\n  \"@type\": \"BreadcrumbList\",\n  \"itemListElement\": [{\n    \"@type\": \"ListItem\",\n    \"position\": 1,\n    \"name\": \"Books\",\n    \"item\": \"https://example.com/books\"\n  },{\n    \"@type\": \"ListItem\",\n    \"position\": 2,\n    \"name\": \"Authors\",\n    \"item\": \"https://example.com/books/authors\"\n  },{\n    \"@type\": \"ListItem\",\n    \"position\": 3,\n    \"name\": \"Ann Leckie\",\n    \"item\": \"https://example.com/books/authors/annleckie\"\n  },{\n    \"@type\": \"ListItem\",\n    \"position\": 4,\n    \"name\": \"Ancillary Justice\",\n    \"item\": \"https://example.com/books/authors/ancillaryjustice\"\n  }]\n}\n</script>\n\n*/\n\n\nexport default Post;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AAAA;AAAA;AAAA;AAoFA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAqCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}