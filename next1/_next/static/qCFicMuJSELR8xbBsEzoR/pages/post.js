(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{116:function(s,a,n){s.exports=n(43)},16:function(s,a,n){s.exports=n(71)},239:function(s,a,n){__NEXT_REGISTER_PAGE("/post",function(){return s.exports=n(240),{page:s.exports.default}})},240:function(s,a,n){"use strict";n.r(a);var p=n(16),c=n.n(p),e=n(23),l=n.n(e),t=n(0),o=n.n(t),r=n(22),i=n.n(r),d=(n(13),n(12)),u=n.n(d),b=n(116),L=n(35);function m(){return(m=Object.assign||function(s){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var p in n)Object.prototype.hasOwnProperty.call(n,p)&&(s[p]=n[p])}return s}).apply(this,arguments)}function v(s,a,n,p,c,e,l){try{var t=s[e](l),o=t.value}catch(s){return void n(s)}t.done?a(o):Promise.resolve(o).then(p,c)}function g(s){return function(){var a=this,n=arguments;return new Promise(function(p,c){var e=s.apply(a,n);function l(s){v(e,p,c,l,t,"next",s)}function t(s){v(e,p,c,l,t,"throw",s)}l(void 0)})}}var h=function(s){console.log("ContentBase Props",s);var a="";s.pageContent.datePublished&&s.pageContent.datePublished.substr&&(a="".concat(s.pageContent.datePublished.substr(0,4),".").concat(("00"+s.pageContent.datePublished.substr(5,2)).slice(-2),".").concat(("00"+s.pageContent.datePublished.substr(8,2)).slice(-2)));var n="";return s.pageContent.datePublished&&(n=s.pageContent.datePublished),o.a.createElement(o.a.Fragment,null,o.a.createElement(i.a,null,o.a.createElement("title",{className:"jsx-3273275265"},s.pageContent.title," | ",s.siteName),o.a.createElement("meta",{name:"description",content:s.pageContent.description,className:"jsx-3273275265"})),o.a.createElement("article",{className:"jsx-3273275265 p2 md-pt3 md-px3 bg-white"},o.a.createElement("header",{className:"jsx-3273275265 article-header mb3"},o.a.createElement("h1",{className:"jsx-3273275265"},s.pageContent.title),o.a.createElement("div",{className:"jsx-3273275265 flex flex-wrap"},o.a.createElement("div",{className:"jsx-3273275265"},o.a.createElement("time",{dateTime:n,className:"jsx-3273275265 "},a)))),o.a.createElement("div",{dangerouslySetInnerHTML:{__html:s.pageContent.body},className:"jsx-3273275265 article-body"})),o.a.createElement(l.a,{styleId:"3273275265",css:["body{word-wrap:break-word;}",".article-header h1{font-size:2rem;line-height:1.25;}",".article-body h2{font-size:1.5rem;line-height:1.3333333333;margin-top:3rem;padding-top:1rem;padding-bottom:1rem;border-top:solid 1px #000;border-bottom:solid 1px #000;}",".article-body h3{font-size:1.25rem;line-height:1.4;padding-top:.75rem;}",".article-body h4{font-size:1rem;line-height:1.5;padding-top:1rem;}",".article-body h5{font-size:.875rem;line-height:1.5714285714;padding-top:1.125rem;}",".article-body h6{font-size:.75rem;line-height:1.6666666667;padding-top:1.25rem;}",".article-body div.sourceCode{margin:0;margin-left:-1rem;margin-right:-1rem;margin-bottom:1rem;padding:0;}",".article-body pre.sourceCode{madgin:0;padding:1rem;overflow-x:auto;color:#333;background:#f8f8f8;border:1px solid #ddd;border-radius:.25rem;font-size:.75rem;max-width:100%;}",".article-body code.sourceCode,pre>code{background-color:transparent;padding:0;}","@media all and (min-width:50em){.article-body div.sourceCode{margin-left:-2rem;margin-right:-2rem;}.article-body pre.sourceCode{padding-left:2rem;padding-right:2rem;}}"]}))};h.getInitialProps=function(){var s=g(c.a.mark(function s(a){return c.a.wrap(function(s){for(;;)switch(s.prev=s.next){case 0:return console.log("ContentBase getInitialProps",a),s.abrupt("return",{});case 2:case"end":return s.stop()}},s,this)}));return function(a){return s.apply(this,arguments)}}();var k=Object(b.withRouter)(h),C=function(s){var a=u()().publicRuntimeConfig;return o.a.createElement(L.a,null,o.a.createElement(k,m({pageContent:s.pageContent},a)))};C.getInitialProps=function(){var s=g(c.a.mark(function s(a){var n,p,e,l;return c.a.wrap(function(s){for(;;)switch(s.prev=s.next){case 0:return console.log("Post getInitialProps",a),n=a.query.id,p="/"===(n||"").substr(0,1)?n.substr(1):n||"",l=(e={pageContent:{}}).pageContent,"1st"===p?(l.datePublished="2019-01-07T15:34+09:00",l.dateModified="2019-01-20T14:31+09:00",l.description="",l.title="String",l.body="<h2>String.prototype.substring()</h2>\r\n<p><strong><code>substring()</code></strong>メソッドは、0 インデックスやそのほか、または文字列の最後までの String オブジェクトの部分集合を返します。</p>\r\n<h2>String.prototype.codePointAt()</h2>\r\n<p><strong><code>codePointAt()</code></strong>メソッドは、Unicode ポイント値である負でない整数を返します。</p>"):"2nd"===p?(l.datePublished="2019-01-15T16:39+09:00",l.title="JavaScript で\r\nabc\\",l.body='<p>abc\r\nを"<code>dangerouslySetInnerHTML</code>"に指定したとき、どのように表示されるか。確かめてください。</p><h2 id="実施環境">実施環境</h2>\r\n<ul>\r\n<li>Windows 7 Professional Service Pack 1</li>\r\n<li>node v8.9.4</li>\r\n<li>npm 4.0.5</li>\r\n<li>create-react-app 1.5.2</li>\r\n</ul>\r\n<h2 id="はじめに">はじめに</h2>\r\n<p>React : Webの見た目を作ることに特化したJavaScriptライブラリ。 Viewに関連する機能だけを持つ。</p>\r\n<p>Flux : 次のように、データの流れを一方向に限定する設計パターン。 不整合が発生しにくい仕組みになっている。</p>\r\n<pre><code>                  ┌─── Action ←─┐\r\n                  ↓                  ｜\r\n    Action → Dispatcher → Store → View\r\n\r\n&lt;!-- --&gt;\r\n\r\n1. View はユーザーの入力から Action を作成する。\r\n2. Action を Dispatch することで Store にデータを保存する。\r\n3. Store を View に反映する。\r\n</code></pre>\r\n<p>Redux : Fluxアーキテクチャの実装。</p>\r\n\x3c!--\r\n- View\r\n- Action\r\n- Store\r\n- Dispatcher\r\n- Reducer\r\n    状態を変化させるための関数です。Actionの内容によって既存の状態を変化させます。\r\n--\x3e\r\n\r\n<p>オブジェクトや配列の操作を行う場合は、基本的には参照渡しでなく値のコピーを渡します。 参照を切る方法としてES2015で標準化された<code>Object.assign()</code>メソッドを使ってもよいです。</p>\r\n<p>Spread Operatorでも可。</p>\r\n<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb2-1" title="1"><span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb2-2" title="2">  ...<span class="at">state</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb2-3" title="3">  <span class="dt">status</span><span class="op">:</span> <span class="dv">1</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb2-4" title="4"><span class="op">};</span></a></code></pre></div>\r\n<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb3-1" title="1"><span class="cf">return</span> <span class="va">Object</span>.<span class="at">assign</span>(<span class="op">{},</span> state<span class="op">,</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb3-2" title="2">  <span class="dt">state</span><span class="op">:</span> <span class="dv">1</span></a>\r\n<a class="sourceLine" id="cb3-3" title="3"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>\r\n<h2 id="create-react-app">Create React App</h2>\r\n<p><a href="https://github.com/facebook/create-react-app">GitHub - facebook/create-react-app</a></p>\r\n<h2 id="環境構築">環境構築</h2>\r\n<h3 id="nodejsのインストール">node.jsのインストール</h3>\r\n<p>割愛します。</p>\r\n<p>Windowsユーザーであれば nodist を入れればよいかと。</p>\r\n<h3 id="create-react-app-のインストール">create-react-app のインストール</h3>\r\n<p>作業フォルダを作りその中にインストールします。</p>\r\n<pre><code>&gt; mkdir react1st &amp; cd react1st\r\n&gt; npm install create-react-app\r\n</code></pre>\r\n<h3 id="アプリケーションの作成">アプリケーションの作成</h3>\r\n<p><code>create-react-app</code>コマンドを使ってアプリケーションを作成します。</p>\r\n<p>構文 : <code>create-react-app &lt;application-name&gt;</code></p>\r\n<p><code>my-app</code>アプリケーションを作成してみます。</p>\r\n<pre><code>&gt; .\\node_modules\\.bin\\create-react-app my-app\r\n</code></pre>\r\n<p>作成されたアプリケーションの構成は以下のようになっています。</p>\r\n<pre><code>.\r\n+---node_modules\r\n+---public\r\n|   +---favicon.ico\r\n|   +---index.html\r\n|   `---manifest.json\r\n+---src\r\n|   +---App.css\r\n|   +---App.js\r\n|   +---App.test.js\r\n|   +---index.css\r\n|   +---index.js\r\n|   +---logo.svg\r\n|   `---registerServiceWorker.js\r\n+---.gitignore\r\n+---package.json\r\n`---README.md\r\n</code></pre>\r\n<h3 id="開発モードでアプリケーションを起動">開発モードでアプリケーションを起動</h3>\r\n<p>アプリケーションのルートフォルダ（<code>my-app</code>フォルダ）に移動し、<code>npm start</code>コマンドを実行します。 ブラウザが自動で起動し、アプリケーションが表示されます。 もし、ブラウザが起動しなかったときは自分で起動して<code>http://localhost:3000/</code>にアクセスしてください。</p>\r\n<pre><code>&gt; cd my-app\r\n&gt; npm start\r\n</code></pre>\r\n<h4 id="開発モードの機能">開発モードの機能</h4>\r\n<p>開発モードは次の動作になります。 開発モードを終了するには、Control＋Cキーを押します。</p>\r\n<ul>\r\n<li>ソースコードの変更を監視し、アプリケーションを自動でビルドする。</li>\r\n<li>ブラウザを自動でリロードする。</li>\r\n<li>コンソールにビルドエラーとlintの警告を表示する。</li>\r\n</ul>\r\n<h3 id="hello-world-の表示">Hello, World! の表示</h3>\r\n<p><code>src\\App.js</code>ファイルを以下のように編集します。</p>\r\n<div class="sourceCode" id="cb8"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb8-1" title="1"><span class="op">&lt;</span>h1 className<span class="op">=</span><span class="st">&quot;App-title&quot;</span><span class="op">&gt;</span>Welcome to React&lt;/h1<span class="op">&gt;</span></a></code></pre></div>\r\n<p>↓</p>\r\n<div class="sourceCode" id="cb9"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb9-1" title="1"><span class="op">&lt;</span>h1 className<span class="op">=</span><span class="st">&quot;App-title&quot;</span><span class="op">&gt;</span>Hello<span class="op">,</span> World<span class="op">!</span>&lt;/h1<span class="op">&gt;</span></a></code></pre></div>\r\n<p>保存に伴い、ブラウザが自動でリロードされ、修正内容が反映されます。</p>\r\n<h2 id="jsx">JSX</h2>\r\n<p>JSX : JavaScriptを拡張した言語。 ReactとJSXを一緒に使うことが推奨されています（必須ではない）。</p>\r\n<ul>\r\n<li>JSXでは、JavaScriptのなかにHTMLのタグや属性を（ほぼ）同じように書くことができる。</li>\r\n<li>最終的にトランスパイラでJavaScriptに変換して使う。 このとき、JSXに書いたタグは、<code>React.createElement</code>関数の呼び出しに変換される。</li>\r\n</ul>\r\n<p>トランスパイラ : ソースコードを別のソースコードに変換するツールのことです。 BabelのほかCoffeeScriptやTypeScriptなどがあります。</p>\r\n<h3 id="jsxの使い方">JSXの使い方</h3>\r\n<ul>\r\n<li><p>JSXのタグは<code>React.createElement</code>に変換されるため、Reactのインポートが必要です。</p>\r\n<pre><code>  import React from &#39;react&#39;;\r\n</code></pre></li>\r\n<li><p><code>{}</code>で囲むと式をJSXに埋め込むことができます。</p>\r\n<pre><code>  const fullnames = {\r\n    ryoma: &#39;坂本竜馬&#39;\r\n  };\r\n  const getFullname = nickname =&gt; fullnames[nickname];\r\n  const element = &lt;h1&gt;Hello, {getFullname(&#39;ryoma&#39;)}&lt;/h1&gt;;\r\n</code></pre></li>\r\n</ul>\r\n<h2 id="babelのインストール">babelのインストール</h2>\r\n<ol>\r\n<li><p>作業ディレクトリを作り、その中に移動します。</p>\r\n<pre><code> &gt; mkdir babel-cli-example &amp; cd babel-cli-example\r\n</code></pre></li>\r\n<li><p>空のpackage.jsonを作ります。</p>\r\n<pre><code> &gt; echo {} &gt; package.json\r\n</code></pre></li>\r\n<li><p>Babel関連のパッケージをインストールします。</p>\r\n<pre><code> &gt; npm install --save-dev babel-cli babel-preset-react\r\n</code></pre></li>\r\n</ol>\r\n<p>babel-cli BabelをCLI上で動作させるためのパッケージです。 Babelを使ったソースコードの変換を行うbabelコマンドと、変換に加えて変換後のソースコードをそのままNode.jsで実行するbabel-nodeコマンドを含んでいます。</p>\r\n<h3 id="react向けに変換するコマンド">react向けに変換するコマンド</h3>\r\n<pre><code>.\\node_modules\\.bin\\babel [Options...] target-file\r\n</code></pre>\r\n<p>e.g.,</p>\r\n<pre><code>.\\node_modules\\.bin\\babel --presets=react input.js\r\n</code></pre>\r\n<p>標準出力ではなくファイルに出力するときは、<code>--out-file</code>オプションにファイル名を指定します。</p>\r\n<pre><code>.\\node_modules\\.bin\\babel --presets=react input.js --out-file output.js\r\n</code></pre>\r\n<p>webpack : モジュールバンドラー。<br />\r\nES ModulesやNode.jsで利用されているCommonJSのモジュール方式で記述されたソースファイルを束ねて、ブラウザで実行可能な静的なJavaScriptファイルを出力します。</p>\r\n<ol>\r\n<li><p>作業ディレクトリを作り、その中に移動します。</p>\r\n<pre><code> &gt; mkdir webpack-example &amp; cd webpack-example\r\n</code></pre></li>\r\n<li><p>空のpackage.jsonを作ります。</p>\r\n<pre><code> &gt; echo {} &gt; package.json\r\n</code></pre></li>\r\n<li><p>開発に使うパッケージをインストールします（<code>--save-dev</code>オプションをつけます）。</p>\r\n<pre><code> &gt; npm install --save-dev ^\r\n   webpack ^\r\n   webpack-cli ^\r\n   babel-loader ^\r\n   babel-core ^\r\n   babel-preset-react\r\n</code></pre></li>\r\n<li><p>実行に使うパッケージをインストールします（<code>--save</code>オプションをつけます）。</p>\r\n<pre><code> &gt; npm install --save ^\r\n   react ^\r\n   react-dom\r\n</code></pre></li>\r\n</ol>\r\n\x3c!--\r\n--save-devインストール\r\n\r\n- webpack\r\n- webpack-cli\r\n- babel-loader\r\n- babel-core\r\n- babel-preset-react\r\n\r\n--saveインストール\r\n\r\n- react\r\n- react-dom\r\n--\x3e\r\n\r\n<p>Webpackのバージョンを表示</p>\r\n<pre><code>.\\node_modules\\.bin\\webpack --version\r\n4.1.0\r\n</code></pre>\r\n<p>Hello.js :</p>\r\n<pre><code>~~~javascript\r\nimport React from &#39;react&#39;;\r\n\r\n// export default function で\r\n// Hello コンポーネントを持っていることを外部に知らせる\r\nexport default function Hello() {\r\n  return &lt;h1&gt;Hello! webpack&lt;/h1&gt;;\r\n}\r\n~~~\r\n</code></pre>\r\n<p>entry.js :</p>\r\n<pre><code>~~~javascript\r\nimport React from &#39;react&#39;;\r\nimport ReactDOM from &#39;react-dom&#39;;\r\nimport Hello from &#39;./Hello&#39;;    // ← Hello.js の読み込み\r\n\r\nReactDOM.render(\r\n  &lt;Hello /&gt;,\r\n  document.getElementById(&#39;root&#39;)\r\n);\r\n~~~\r\n</code></pre>\r\n<p>importのパスが絶対パスでも相対パスでもない場合、webpackはnpmモジュールから読み込みます。</p>\r\n<p>webpack.config.js</p>\r\n<p>webpackの設定ファイルは、JSON、XML、YAMLなどのフォーマットを記述できます。<br />\r\nフォーマットの判別は設定ファイルの拡張子で行います。</p>\r\n<p>JavaScriptであれば、Node.jsのモジュールとして扱うので、<code>module.exports</code>に代入しているオブジェクトが設定ファイルとして利用されます。</p>\r\n<div class="sourceCode" id="cb25"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb25-1" title="1"><span class="va">module</span>.<span class="at">exports</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb25-2" title="2">  <span class="co">// entryフィールド</span></a>\r\n<a class="sourceLine" id="cb25-3" title="3">  <span class="co">// 実行の起点となるファイルの指定</span></a>\r\n<a class="sourceLine" id="cb25-4" title="4">  <span class="dt">entry</span><span class="op">:</span> <span class="st">&#39;./entry.js&#39;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb25-5" title="5">  </a>\r\n<a class="sourceLine" id="cb25-6" title="6">  <span class="co">// outputフィールド</span></a>\r\n<a class="sourceLine" id="cb25-7" title="7">  <span class="co">// 出力に関する設定</span></a>\r\n<a class="sourceLine" id="cb25-8" title="8">  <span class="dt">output</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb25-9" title="9">    <span class="dt">filename</span><span class="op">:</span> <span class="st">&#39;output.js&#39;</span></a>\r\n<a class="sourceLine" id="cb25-10" title="10">  <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb25-11" title="11">  </a>\r\n<a class="sourceLine" id="cb25-12" title="12">  <span class="dt">module</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb25-13" title="13">    <span class="dt">rules</span><span class="op">:</span> [</a>\r\n<a class="sourceLine" id="cb25-14" title="14">      <span class="co">// babel-loader の設定</span></a>\r\n<a class="sourceLine" id="cb25-15" title="15">      <span class="co">// ファイルごとに適応するLoaderの設定を書く</span></a>\r\n<a class="sourceLine" id="cb25-16" title="16">      <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb25-17" title="17">        <span class="dt">loader</span><span class="op">:</span> <span class="st">&#39;babel-loader&#39;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb25-18" title="18">        <span class="dt">test</span><span class="op">:</span> <span class="ss">/</span><span class="sc">\\.</span><span class="ss">js</span><span class="sc">$</span><span class="ss">/</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb25-19" title="19">        <span class="dt">options</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb25-20" title="20">          <span class="dt">presets</span><span class="op">:</span> [<span class="st">&#39;react&#39;</span>]</a>\r\n<a class="sourceLine" id="cb25-21" title="21">        <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb25-22" title="22">      <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb25-23" title="23">    ]</a>\r\n<a class="sourceLine" id="cb25-24" title="24">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb25-25" title="25"><span class="op">};</span></a></code></pre></div>\r\n<p>webpackを実行</p>\r\n<p><code>dist\\output.js</code>が出力されます。</p>\r\n<pre><code>&gt; .\\node_modules\\.bin\\webpack --config webpack.config.js\r\n</code></pre>\r\n<p><code>dist\\index.html</code>を作成します。</p>\r\n<div class="sourceCode" id="cb27"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb27-1" title="1"><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span></a>\r\n<a class="sourceLine" id="cb27-2" title="2"><span class="kw">&lt;html</span><span class="ot"> lang=</span><span class="st">&quot;ja&quot;</span><span class="kw">&gt;</span></a>\r\n<a class="sourceLine" id="cb27-3" title="3"><span class="kw">&lt;head&gt;</span></a>\r\n<a class="sourceLine" id="cb27-4" title="4"><span class="kw">&lt;meta</span><span class="ot"> http-equiv=</span><span class="st">&quot;X-UA-Compatible&quot;</span><span class="ot"> content=</span><span class="st">&quot;IE=edge&quot;</span><span class="kw">&gt;</span></a>\r\n<a class="sourceLine" id="cb27-5" title="5"><span class="kw">&lt;title&gt;</span>webpack test<span class="kw">&lt;/title&gt;</span></a>\r\n<a class="sourceLine" id="cb27-6" title="6"><span class="kw">&lt;meta</span><span class="ot"> charset=</span><span class="st">&quot;utf-8&quot;</span><span class="kw">&gt;</span></a>\r\n<a class="sourceLine" id="cb27-7" title="7"><span class="kw">&lt;meta</span><span class="ot"> name=</span><span class="st">&quot;viewport&quot;</span><span class="ot"> content=</span><span class="st">&quot;width=device-width, initial-scale=1&quot;</span><span class="kw">&gt;</span></a>\r\n<a class="sourceLine" id="cb27-8" title="8"><span class="kw">&lt;/head&gt;</span></a>\r\n<a class="sourceLine" id="cb27-9" title="9"><span class="kw">&lt;body&gt;</span></a>\r\n<a class="sourceLine" id="cb27-10" title="10">  <span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;root&quot;</span><span class="kw">&gt;&lt;/div&gt;</span></a>\r\n<a class="sourceLine" id="cb27-11" title="11">  <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;./output.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></a>\r\n<a class="sourceLine" id="cb27-12" title="12"><span class="kw">&lt;/body&gt;</span></a>\r\n<a class="sourceLine" id="cb27-13" title="13"><span class="kw">&lt;/html&gt;</span></a></code></pre></div>\r\n<p>ブラウザで表示。</p>\r\n<p><code>output.js</code>の読み込みだけで表示されました。 動作に必要なスクリプト（<code>react.min.js</code>や<code>react-dom.min.js</code>）が、webpackによってすべて<code>output.js</code>に束ねられているからです。</p>\r\n<h2 id="reactコンポーネント">Reactコンポーネント</h2>\r\n<p>create-react-app による開発は、自動作成された「src\\index.js」や、その中で読み込んでいる「src\\App.js」を編集して動作を確かめます。 ファイルやフォルダを分けてコードを管理するのもありです。</p>\r\n<h3 id="reactコンポーネントの種類">Reactコンポーネントの種類</h3>\r\n<h4 id="functional-component">Functional Component</h4>\r\n<p>関数によって定義されるコンポーネント。</p>\r\n<div class="sourceCode" id="cb28"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb28-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb28-2" title="2"></a>\r\n<a class="sourceLine" id="cb28-3" title="3"><span class="kw">const</span> Hello <span class="op">=</span> (props) <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb28-4" title="4">  <span class="cf">return</span> <span class="op">&lt;</span>div<span class="op">&gt;</span>こんにちは、<span class="op">{</span><span class="va">props</span>.<span class="at">name</span><span class="op">}</span>さん&lt;/div<span class="op">&gt;;</span></a>\r\n<a class="sourceLine" id="cb28-5" title="5"><span class="op">};</span></a></code></pre></div>\r\n<h4 id="class-component">Class Component</h4>\r\n<p>クラスによって定義されるコンポーネント。</p>\r\n<div class="sourceCode" id="cb29"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb29-1" title="1"><span class="kw">class</span> Hello <span class="kw">extends</span> <span class="va">React</span>.<span class="at">Component</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb29-2" title="2">  <span class="at">render</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb29-3" title="3">    <span class="cf">return</span> <span class="op">&lt;</span>div<span class="op">&gt;</span>こんにちは、<span class="op">{</span><span class="kw">this</span>.<span class="va">props</span>.<span class="at">name</span><span class="op">}</span>さん&lt;/div<span class="op">&gt;;</span></a>\r\n<a class="sourceLine" id="cb29-4" title="4">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb29-5" title="5"><span class="op">};</span></a></code></pre></div>\r\n<h5 id="functional-componentとの違い">Functional Componentとの違い</h5>\r\n<ul>\r\n<li><code>React.Component</code>を明示的に継承している。</li>\r\n<li>propsの受け取り方がthis.propsとなっている。</li>\r\n<li>コンポーネントの状態を記録する仕組みがある（state）。</li>\r\n<li>ライフサイクルメソッドという特殊なメソッドが定義できる。</li>\r\n</ul>\r\n<h3 id="コンポーネントの再利用">コンポーネントの再利用</h3>\r\n<div class="sourceCode" id="cb30"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb30-1" title="1"><span class="kw">const</span> Hello <span class="op">=</span> () <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb30-2" title="2">  <span class="cf">return</span> <span class="op">&lt;</span>div<span class="op">&gt;</span>こんにちは、坂本竜馬さん&lt;/div<span class="op">&gt;;</span></a>\r\n<a class="sourceLine" id="cb30-3" title="3"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb30-4" title="4"></a>\r\n<a class="sourceLine" id="cb30-5" title="5"><span class="va">ReactDOM</span>.<span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb30-6" title="6">  <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb30-7" title="7">    <span class="op">&lt;</span>Hello /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb30-8" title="8">    <span class="op">&lt;</span>Hello /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb30-9" title="9">    <span class="op">&lt;</span>Hello /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb30-10" title="10">  &lt;/div<span class="op">&gt;,</span></a>\r\n<a class="sourceLine" id="cb30-11" title="11">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&quot;root&quot;</span>)</a>\r\n<a class="sourceLine" id="cb30-12" title="12">)<span class="op">;</span></a></code></pre></div>\r\n<p>Reactコンポーネント : 設計図のようなもの。 オブジェクト指向でいえば〝クラス〟にあたる。</p>\r\n<p>Reactエレメント : 設計図（Reactコンポーネント）を元に作られた実体のこと。 オブジェクト指向でいえば〝インスタンス〟にあたる。</p>\r\n<div class="sourceCode" id="cb31"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb31-1" title="1"><span class="co">// こちらはReactコンポーネント</span></a>\r\n<a class="sourceLine" id="cb31-2" title="2"><span class="kw">const</span> Hello <span class="op">=</span> () <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb31-3" title="3">  <span class="cf">return</span> <span class="op">&lt;</span>div<span class="op">&gt;</span>こんにちは、坂本竜馬さん&lt;/div<span class="op">&gt;;</span></a>\r\n<a class="sourceLine" id="cb31-4" title="4"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb31-5" title="5"></a>\r\n<a class="sourceLine" id="cb31-6" title="6"><span class="va">ReactDOM</span>.<span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb31-7" title="7">  <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb31-8" title="8">    <span class="op">{</span> <span class="co">/* 以下のHello3つはどれも React エレメント */</span> <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb31-9" title="9">    <span class="op">&lt;</span>Hello /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb31-10" title="10">    <span class="op">&lt;</span>Hello /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb31-11" title="11">    <span class="op">&lt;</span>Hello /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb31-12" title="12">  &lt;/div<span class="op">&gt;,</span></a>\r\n<a class="sourceLine" id="cb31-13" title="13">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&quot;root&quot;</span>)</a>\r\n<a class="sourceLine" id="cb31-14" title="14">)<span class="op">;</span></a></code></pre></div>\r\n<h3 id="fragmentコンポーネント">Fragmentコンポーネント</h3>\r\n<p>Reactコンポーネントは単一の親からなる要素しか表現できません。 複数の要素をラップする要素を使ってもよいのですが、これではもともと表現したかったHTML構造にならないことがあります。</p>\r\n<p>React.Fragmentコンポーネントを使うとこの制約をクリアすることができます。</p>\r\n<p>↓ ダメな例</p>\r\n<div class="sourceCode" id="cb32"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb32-1" title="1"><span class="kw">const</span> Hello <span class="op">=</span> () <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb32-2" title="2">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb32-3" title="3">    <span class="op">&lt;</span>div<span class="op">&gt;</span>こんにちは&lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb32-4" title="4">    <span class="op">&lt;</span>div<span class="op">&gt;</span>坂本竜馬さん&lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb32-5" title="5">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb32-6" title="6"><span class="op">};</span></a></code></pre></div>\r\n<p>↓ ラップして対処する方法</p>\r\n<div class="sourceCode" id="cb33"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb33-1" title="1"><span class="kw">const</span> Hello <span class="op">=</span> () <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb33-2" title="2">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb33-3" title="3">    <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb33-4" title="4">      <span class="op">&lt;</span>div<span class="op">&gt;</span>こんにちは&lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb33-5" title="5">      <span class="op">&lt;</span>div<span class="op">&gt;</span>坂本竜馬さん&lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb33-6" title="6">    &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb33-7" title="7">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb33-8" title="8"><span class="op">};</span></a></code></pre></div>\r\n<p>↓ <code>React.Fragment</code>で対処する方法</p>\r\n<div class="sourceCode" id="cb34"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb34-1" title="1"><span class="kw">const</span> Hello <span class="op">=</span> () <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb34-2" title="2">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb34-3" title="3">    <span class="op">&lt;</span><span class="va">React</span>.<span class="at">Fragment</span><span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb34-4" title="4">      <span class="op">&lt;</span>div<span class="op">&gt;</span>こんにちは&lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb34-5" title="5">      <span class="op">&lt;</span>div<span class="op">&gt;</span>坂本竜馬さん&lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb34-6" title="6">    &lt;/<span class="va">React</span>.<span class="at">Fragment</span><span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb34-7" title="7">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb34-8" title="8"><span class="op">};</span></a></code></pre></div>\r\n<h3 id="データの受け渡しprops">データの受け渡し（props）</h3>\r\n<div class="sourceCode" id="cb35"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb35-1" title="1"><span class="kw">const</span> Hello <span class="op">=</span> (props) <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb35-2" title="2">  <span class="cf">return</span> <span class="op">&lt;</span>div<span class="op">&gt;</span>こんにちは、<span class="op">{</span><span class="va">props</span>.<span class="at">name</span><span class="op">}</span>さん&lt;/div<span class="op">&gt;;</span></a>\r\n<a class="sourceLine" id="cb35-3" title="3"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb35-4" title="4"></a>\r\n<a class="sourceLine" id="cb35-5" title="5"><span class="va">ReactDOM</span>.<span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb35-6" title="6">  <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb35-7" title="7">    <span class="op">&lt;</span>Hello name<span class="op">=</span><span class="st">&quot;A&quot;</span> /&gt;</a>\r\n<a class="sourceLine" id="cb35-8" title="8">    <span class="op">&lt;</span>Hello name<span class="op">=</span><span class="st">&quot;B&quot;</span> /&gt;</a>\r\n<a class="sourceLine" id="cb35-9" title="9">    <span class="op">&lt;</span>Hello name<span class="op">=</span><span class="st">&quot;C&quot;</span> /&gt;</a>\r\n<a class="sourceLine" id="cb35-10" title="10">  &lt;/div<span class="op">&gt;,</span></a>\r\n<a class="sourceLine" id="cb35-11" title="11">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&quot;root&quot;</span>)</a>\r\n<a class="sourceLine" id="cb35-12" title="12">)<span class="op">;</span></a></code></pre></div>\r\n<p>Helloの関数の引数に<code>props</code>を追加します。引数の名前はなんでもいいですが、<code>props</code>にするのが一般的。</p>\r\n<p><code>props</code>の引数にはコンポーネントを使う側で指定した内容が入ります。</p>\r\n<p>上記でいえば、<code>&lt;Hello name="A" /&gt;</code>として使っているので、<code>props</code>には<code>name</code>というプロパティが追加され、「A」が格納されます。同様に<code>&lt;Hello name="B" /&gt;</code>であれば、<code>props.name</code>の値は「B」になります。</p>\r\n<p><code>props</code>には文字列、数値、配列、オブジェクト、関数など任意の値を指定できます。 渡す値は<code>{}</code>で囲みます。</p>\r\n<div class="sourceCode" id="cb36"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb36-1" title="1"><span class="co">// 文字列</span></a>\r\n<a class="sourceLine" id="cb36-2" title="2"><span class="op">&lt;</span>Component stringValue<span class="op">={</span> <span class="st">&quot;坂本竜馬&quot;</span> <span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb36-3" title="3"></a>\r\n<a class="sourceLine" id="cb36-4" title="4"><span class="co">// 数値</span></a>\r\n<a class="sourceLine" id="cb36-5" title="5"><span class="op">&lt;</span>Component numberValue<span class="op">={</span><span class="dv">42</span><span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb36-6" title="6"></a>\r\n<a class="sourceLine" id="cb36-7" title="7"><span class="co">// 真偽値</span></a>\r\n<a class="sourceLine" id="cb36-8" title="8"><span class="op">&lt;</span>Component boolValue<span class="op">={</span><span class="kw">true</span><span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb36-9" title="9"></a>\r\n<a class="sourceLine" id="cb36-10" title="10"><span class="co">// 配列</span></a>\r\n<a class="sourceLine" id="cb36-11" title="11"><span class="op">&lt;</span>Component arrayValue<span class="op">={</span>[<span class="st">&quot;Aさん&quot;</span><span class="op">,</span> <span class="st">&quot;Bさん&quot;</span><span class="op">,</span> <span class="st">&quot;Cさん&quot;</span>]<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb36-12" title="12"></a>\r\n<a class="sourceLine" id="cb36-13" title="13"><span class="co">// オブジェクト</span></a>\r\n<a class="sourceLine" id="cb36-14" title="14"><span class="op">&lt;</span>Component objectValue<span class="op">={{</span><span class="dt">name</span><span class="op">:</span> <span class="st">&quot;Aさん&quot;</span><span class="op">,</span> <span class="dt">birthDay</span><span class="op">:</span> <span class="st">&quot;1836/01/03&quot;</span><span class="op">}}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb36-15" title="15"></a>\r\n<a class="sourceLine" id="cb36-16" title="16"><span class="co">// 関数</span></a>\r\n<a class="sourceLine" id="cb36-17" title="17"><span class="op">&lt;</span>Component funcValue<span class="op">={</span>(name) <span class="op">=&gt;</span> <span class="va">console</span>.<span class="at">log</span>(name)<span class="op">;}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb36-18" title="18"></a>\r\n<a class="sourceLine" id="cb36-19" title="19"><span class="co">// 変数</span></a>\r\n<a class="sourceLine" id="cb36-20" title="20"><span class="kw">const</span> name <span class="op">=</span> <span class="st">&quot;Aさん&quot;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb36-21" title="21"><span class="op">&lt;</span>Component value<span class="op">={</span>name<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb36-22" title="22"></a>\r\n<a class="sourceLine" id="cb36-23" title="23"><span class="co">// 複数の値も渡せます</span></a>\r\n<a class="sourceLine" id="cb36-24" title="24"><span class="op">&lt;</span>Component name<span class="op">={</span> <span class="st">&quot;Aさん&quot;</span> <span class="op">}</span> birthDay<span class="op">={</span> <span class="kw">new</span> <span class="at">Date</span>(<span class="dv">1836</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">3</span>) <span class="op">}</span> /&gt;</a></code></pre></div>\r\n<p><code>props.children</code></p>\r\n<p>Reactコンポーネントの子要素が渡されるプロパティです。</p>\r\n<p>次の場合、<code>props.children</code>には「坂本竜馬」が渡されます。</p>\r\n<div class="sourceCode" id="cb37"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb37-1" title="1"><span class="kw">const</span> Hello <span class="op">=</span> (props) <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb37-2" title="2">  <span class="cf">return</span> <span class="op">&lt;</span>div<span class="op">&gt;</span>こんにちは、<span class="op">{</span><span class="va">props</span>.<span class="at">children</span><span class="op">}</span>さん&lt;/div<span class="op">&gt;;</span></a>\r\n<a class="sourceLine" id="cb37-3" title="3"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb37-4" title="4"></a>\r\n<a class="sourceLine" id="cb37-5" title="5"><span class="va">ReactDOM</span>.<span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb37-6" title="6">  <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb37-7" title="7">    <span class="op">&lt;</span>Hello<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb37-8" title="8">      坂本竜馬      ←Helloコンポーネントの子要素が渡される</a>\r\n<a class="sourceLine" id="cb37-9" title="9">    &lt;/Hello<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb37-10" title="10">  &lt;/div<span class="op">&gt;,</span></a>\r\n<a class="sourceLine" id="cb37-11" title="11">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&quot;root&quot;</span>)</a>\r\n<a class="sourceLine" id="cb37-12" title="12">)<span class="op">;</span></a></code></pre></div>\r\n<h3 id="propsの型チェック">propsの型チェック</h3>\r\n<p>コンポーネントがどのようなpropsを受け取るのか記述することができます。 インターフェイスに合わない値が渡されたときに、エディタや実行時に警告を受け取ることができます。</p>\r\n<p>別パッケージになっているので追加でインストールします。</p>\r\n<pre><code>&gt; npm install --save prop-types\r\n</code></pre>\r\n<p>ReactコンポーネントのpropTypesプロパティに型情報を記述します。 Functional Component/Class Componentのどちらでも記述できます。</p>\r\n<div class="sourceCode" id="cb39"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb39-1" title="1"><span class="im">import</span> PropTypes <span class="im">from</span> <span class="st">&#39;prop-types&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb39-2" title="2"></a>\r\n<a class="sourceLine" id="cb39-3" title="3"><span class="kw">const</span> Hello <span class="op">=</span> (props) <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb39-4" title="4">  <span class="cf">return</span> <span class="op">&lt;</span>div<span class="op">&gt;</span>こんにちは、<span class="op">{</span><span class="va">props</span>.<span class="at">name</span><span class="op">}</span>さん&lt;/div<span class="op">&gt;;</span></a>\r\n<a class="sourceLine" id="cb39-5" title="5"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb39-6" title="6"></a>\r\n<a class="sourceLine" id="cb39-7" title="7"><span class="co">// ここに型情報を書きます</span></a>\r\n<a class="sourceLine" id="cb39-8" title="8"><span class="co">// ↓</span></a>\r\n<a class="sourceLine" id="cb39-9" title="9"><span class="va">Hello</span>.<span class="at">propTypes</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb39-10" title="10">  <span class="dt">name</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">string</span>    <span class="co">// nameの型はstring</span></a>\r\n<a class="sourceLine" id="cb39-11" title="11"><span class="op">}</span></a></code></pre></div>\r\n<p>propTypesの種類</p>\r\n<div class="sourceCode" id="cb40"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb40-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb40-2" title="2"><span class="im">import</span> PropTypes <span class="im">from</span> <span class="st">&#39;prop-types&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb40-3" title="3"></a>\r\n<a class="sourceLine" id="cb40-4" title="4"><span class="kw">class</span> SomeComponent <span class="kw">extends</span> <span class="va">React</span>.<span class="at">Component</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb40-5" title="5"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb40-6" title="6"></a>\r\n<a class="sourceLine" id="cb40-7" title="7"><span class="va">SomeComponent</span>.<span class="at">propTypes</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb40-8" title="8">  <span class="dt">someString</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">string</span><span class="op">,</span> <span class="co">// 文字列</span></a>\r\n<a class="sourceLine" id="cb40-9" title="9">  <span class="dt">someNumber</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">number</span><span class="op">,</span> <span class="co">// 数値</span></a>\r\n<a class="sourceLine" id="cb40-10" title="10">  <span class="dt">someBool</span><span class="op">:</span>   <span class="va">PropTypes</span>.<span class="at">bool</span><span class="op">,</span>   <span class="co">// 真偽値</span></a>\r\n<a class="sourceLine" id="cb40-11" title="11">  <span class="dt">someArray</span><span class="op">:</span>  <span class="va">PropTypes</span>.<span class="at">array</span><span class="op">,</span>  <span class="co">// 配列</span></a>\r\n<a class="sourceLine" id="cb40-12" title="12">  <span class="dt">someObject</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">object</span><span class="op">,</span> <span class="co">// オブジェクト</span></a>\r\n<a class="sourceLine" id="cb40-13" title="13">  <span class="dt">someFunc</span><span class="op">:</span>   <span class="va">PropTypes</span>.<span class="at">func</span><span class="op">,</span>   <span class="co">// 関数</span></a>\r\n<a class="sourceLine" id="cb40-14" title="14">  <span class="dt">someSymbol</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">symbol</span><span class="op">,</span> <span class="co">// シンボル</span></a>\r\n<a class="sourceLine" id="cb40-15" title="15">  </a>\r\n<a class="sourceLine" id="cb40-16" title="16">  <span class="co">// 配列の中身を指定</span></a>\r\n<a class="sourceLine" id="cb40-17" title="17">  <span class="dt">someArray2</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">arayOf</span>(<span class="va">PropTypes</span>.<span class="at">number</span>)<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-18" title="18">  </a>\r\n<a class="sourceLine" id="cb40-19" title="19">  <span class="co">// オブジェクトの中身を指定</span></a>\r\n<a class="sourceLine" id="cb40-20" title="20">  <span class="dt">someObj2</span><span class="op">:</span>   <span class="va">PropTypes</span>.<span class="at">objectOf</span>(<span class="va">PropTypes</span>.<span class="at">number</span>)<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-21" title="21">  </a>\r\n<a class="sourceLine" id="cb40-22" title="22">  <span class="co">// オブジェクトの個別のプロパティの中身を指定</span></a>\r\n<a class="sourceLine" id="cb40-23" title="23">  <span class="dt">someObj3</span><span class="op">:</span>   <span class="va">PropTypes</span>.<span class="at">shape</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb40-24" title="24">    <span class="dt">name</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">string</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-25" title="25">    <span class="dt">age</span><span class="op">:</span>  <span class="va">PropTypes</span>.<span class="at">number</span></a>\r\n<a class="sourceLine" id="cb40-26" title="26">  <span class="op">}</span>)<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-27" title="27">  </a>\r\n<a class="sourceLine" id="cb40-28" title="28">  <span class="co">// Reactエレメント</span></a>\r\n<a class="sourceLine" id="cb40-29" title="29">  <span class="dt">someElement</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">element</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-30" title="30">  </a>\r\n<a class="sourceLine" id="cb40-31" title="31">  <span class="co">// コンポーネントの子要素となるもの</span></a>\r\n<a class="sourceLine" id="cb40-32" title="32">  <span class="co">// （string, number, element, array ならOK）</span></a>\r\n<a class="sourceLine" id="cb40-33" title="33">  <span class="dt">someNode</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">node</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-34" title="34">  </a>\r\n<a class="sourceLine" id="cb40-35" title="35">  <span class="co">// Helloコンポーネントのインスタンスを指定</span></a>\r\n<a class="sourceLine" id="cb40-36" title="36">  <span class="dt">helloElement</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">instanceOf</span>(Hello)<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-37" title="37">  </a>\r\n<a class="sourceLine" id="cb40-38" title="38">  <span class="co">// 指定した値のいずれかであること</span></a>\r\n<a class="sourceLine" id="cb40-39" title="39">  <span class="dt">dayOfTheWeek</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">oneOf</span>([<span class="st">&quot;月&quot;</span><span class="op">,</span> <span class="st">&quot;火&quot;</span><span class="op">,</span> <span class="st">&quot;水&quot;</span>])<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-40" title="40">  </a>\r\n<a class="sourceLine" id="cb40-41" title="41">  <span class="co">// 配列で指定した型のいずれかであること</span></a>\r\n<a class="sourceLine" id="cb40-42" title="42">  <span class="dt">union</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">oneOfType</span>([</a>\r\n<a class="sourceLine" id="cb40-43" title="43">    <span class="va">PropTypes</span>.<span class="at">string</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-44" title="44">    <span class="va">PropTypes</span>.<span class="at">number</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-45" title="45">    <span class="va">PropTypes</span>.<span class="at">instanceOf</span>(Hello)<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-46" title="46">  ])<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-47" title="47">  </a>\r\n<a class="sourceLine" id="cb40-48" title="48">  <span class="co">// 何でもオーケー</span></a>\r\n<a class="sourceLine" id="cb40-49" title="49">  <span class="dt">any</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">any</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-50" title="50">  </a>\r\n<a class="sourceLine" id="cb40-51" title="51">  <span class="co">// 必須項目</span></a>\r\n<a class="sourceLine" id="cb40-52" title="52">  <span class="dt">requiredString</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">string</span>.<span class="at">isRequired</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-53" title="53">  </a>\r\n<a class="sourceLine" id="cb40-54" title="54">  <span class="co">// どんな型でもいいから何かしら指定</span></a>\r\n<a class="sourceLine" id="cb40-55" title="55">  <span class="dt">requiredAny</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">any</span>.<span class="at">isRequired</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb40-56" title="56"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb40-57" title="57"></a>\r\n<a class="sourceLine" id="cb40-58" title="58"><span class="co">// propsの値が undefined だったときの規定値を指定する</span></a>\r\n<a class="sourceLine" id="cb40-59" title="59"><span class="va">SomeComponent</span>.<span class="at">defaultProps</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb40-60" title="60">  <span class="dt">name</span><span class="op">:</span> <span class="st">&quot;坂本竜馬&quot;</span>    <span class="co">// name が undefined のときに設定する内容</span></a>\r\n<a class="sourceLine" id="cb40-61" title="61"><span class="op">};</span></a></code></pre></div>\r\n<p><code>Array.map</code>メソッド : 配列の各要素について、引数に与えられた関数の処理に従って処理をし、新たな配列を返すメソッド。</p>\r\n<pre><code>~~~javascript\r\n// tasksの各要素をTodoItemコンポーネントにして返す\r\nconst list = this.props.tasks.map(todo =&gt; {\r\n  return &lt;TodoItem {...todo} key={todo.id} /&gt;;\r\n});\r\n~~~\r\n</code></pre>\r\n<h3 id="stateの初期値">stateの初期値</h3>\r\n<p><code>constructor</code>で設定します。</p>\r\n<div class="sourceCode" id="cb42"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb42-1" title="1"><span class="at">constructor</span>(props) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb42-2" title="2">  <span class="kw">super</span>(props)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb42-3" title="3">  <span class="kw">this</span>.<span class="at">state</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb42-4" title="4">    <span class="dt">tasks</span><span class="op">:</span> [</a>\r\n<a class="sourceLine" id="cb42-5" title="5">      <span class="op">{</span> <span class="dt">title</span><span class="op">:</span> <span class="st">&quot;Todo-1&quot;</span><span class="op">,</span> <span class="dt">id</span><span class="op">:</span> <span class="dv">0</span> <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb42-6" title="6">      <span class="op">{</span> <span class="dt">title</span><span class="op">:</span> <span class="st">&quot;Todo-2&quot;</span><span class="op">,</span> <span class="dt">id</span><span class="op">:</span> <span class="dv">1</span> <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb42-7" title="7">    ]<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb42-8" title="8">    <span class="dt">uniqueId</span><span class="op">:</span> <span class="dv">1</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb42-9" title="9">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb42-10" title="10"><span class="op">}</span></a></code></pre></div>\r\n<ul>\r\n<li><code>state</code>の名前は変更できません。</li>\r\n<li><code>this.state</code>に直接値を入れていいのは<code>constructor</code>で初期値を設定するときだけです。 それ以外の場面で直接編集してしまうと、Reactコンポーネントに値の変更を通知することができません。</li>\r\n<li><code>this.state</code>を更新するときは<code>this.setState</code>メソッドを使います。 いまあるstateと比べて、変更があった内容を反映します。stateをごっそり置き換えるわけではありません。</li>\r\n<li><code>this.state</code>を直接参照するのはありです。</li>\r\n</ul>\r\n<div class="sourceCode" id="cb43"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb43-1" title="1"><span class="at">constructor</span>(props) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb43-2" title="2">  ...<span class="at">略</span></a>\r\n<a class="sourceLine" id="cb43-3" title="3">  </a>\r\n<a class="sourceLine" id="cb43-4" title="4">  <span class="co">// bindメソッド</span></a>\r\n<a class="sourceLine" id="cb43-5" title="5">  <span class="co">// 指定したメソッドでAppコンポーネントのstateを変更するために必要</span></a>\r\n<a class="sourceLine" id="cb43-6" title="6">  <span class="co">// ↓</span></a>\r\n<a class="sourceLine" id="cb43-7" title="7">  <span class="kw">this</span>.<span class="at">methodName</span> <span class="op">=</span> <span class="kw">this</span>.<span class="va">methodName</span>.<span class="at">bind</span>(<span class="kw">this</span>)<span class="op">;</span></a></code></pre></div>\r\n<p><code>bind</code>メソッド : 関数の中で使用する<code>this</code>を強制する（バインドする）メソッド。</p>\r\n<pre><code>methodNameメソッドを実行するのは、Appコンポーネントではない別のコンポーネントやDOMになります。\r\nそれらのコンテキストである`this`には`state`が存在しないのでエラーが発生します。\r\n</code></pre>\r\n<p>ほかのバインドの方法</p>\r\n<ul>\r\n<li><p>アロー関数を使う</p>\r\n<p>アロー関数を使うときは、constructorにbindメソッドを書く必要がありません。 ですが、同じメソッドを複数のコンポーネントに渡したい場合、その数だけアロー関数を書く必要があります。</p>\r\n<p>毎回新しいアロー関数を作ることになるので、パフォーマンスも少し劣ります。</p>\r\n<div class="sourceCode" id="cb45"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb45-1" title="1"><span class="co">// アロー関数を使う</span></a>\r\n<a class="sourceLine" id="cb45-2" title="2"><span class="op">&lt;</span>Component methodName<span class="op">={</span> (hoge) <span class="op">=&gt;</span> <span class="op">{</span> <span class="kw">this</span>.<span class="at">methodName</span>(hoge) <span class="op">}</span> <span class="op">}</span> /&gt;</a></code></pre></div></li>\r\n<li><p>property initializer syntax を使う</p>\r\n<p>最初からバインドされたメソッドを作ることができます。 アロー関数のようなパフォーマンスの懸念もありません。</p>\r\n<p>ただし、ECMAScriptに公式なシンタックスとして採用されていないため、babelにプラグインを追加しておく必要があります。</p>\r\n<p>Class properties transform・Babel（transform-class-properties）</p></li>\r\n</ul>\r\n<h3 id="イベントハンドリング">イベントハンドリング</h3>\r\n<p>イベントハンドラを追加します。</p>\r\n<p>下記の例では、クリック時のイベントを<code>handleClick</code>メソッドに定義しています。 イベントとの関連付けは、button要素のonClick属性に<code>handleClick</code>メソッドを設定しています。</p>\r\n<p>Reactでは<code>onClick</code>といった属性に関数を渡して、イベントの関連付けをします。</p>\r\n<div class="sourceCode" id="cb46"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb46-1" title="1"><span class="at">constructor</span>(props) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb46-2" title="2">  <span class="kw">super</span>(props)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb46-3" title="3">  <span class="kw">this</span>.<span class="at">handleClick</span> <span class="op">=</span> <span class="kw">this</span>.<span class="va">handleClick</span>.<span class="at">bind</span>(<span class="kw">this</span>)<span class="op">;</span>   <span class="co">// バインドする</span></a>\r\n<a class="sourceLine" id="cb46-4" title="4"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb46-5" title="5"><span class="co">// Eventオブジェクトを引数に持つ</span></a>\r\n<a class="sourceLine" id="cb46-6" title="6"><span class="at">handleClick</span>(e) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb46-7" title="7">  <span class="kw">this</span>.<span class="va">props</span>.<span class="at">methodName</span>(<span class="st">&quot;hoge&quot;</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb46-8" title="8"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb46-9" title="9"><span class="at">render</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb46-10" title="10">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb46-11" title="11">    <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb46-12" title="12">      <span class="op">&lt;</span>input placeholder<span class="op">=</span><span class="st">&quot;何か入力してください&quot;</span> /&gt;</a>\r\n<a class="sourceLine" id="cb46-13" title="13">      <span class="op">&lt;</span>button onClick<span class="op">={</span> <span class="kw">this</span>.<span class="at">handleClick</span> <span class="op">}</span> <span class="op">&gt;</span>登録&lt;/button<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb46-14" title="14">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb46-15" title="15"><span class="op">}</span></a></code></pre></div>\r\n<p>イベントハンドラの引数は、Eventオブジェクトを受け取ります。 ブラウザ本来のEventオブジェクトとほぼ同じものです。</p>\r\n<h3 id="formの操作">formの操作</h3>\r\n<p>Reactではフォームに入力された値も<code>state</code>として扱います。</p>\r\n<p>以下は、ユーザーの入力で state を変更するコードです。</p>\r\n<div class="sourceCode" id="cb47"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb47-1" title="1"><span class="at">constructor</span>(props) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb47-2" title="2">  <span class="kw">super</span>(props)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb47-3" title="3">  <span class="kw">this</span>.<span class="at">state</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb47-4" title="4">    <span class="dt">inputValue</span><span class="op">:</span> <span class="st">&quot;&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb47-5" title="5">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb47-6" title="6">  <span class="kw">this</span>.<span class="at">handleChange</span> <span class="op">=</span> <span class="kw">this</span>.<span class="va">handleChange</span>.<span class="at">bind</span>(<span class="kw">this</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb47-7" title="7">  <span class="kw">this</span>.<span class="at">handleClick</span> <span class="op">=</span> <span class="kw">this</span>.<span class="va">handleClick</span>.<span class="at">bind</span>(<span class="kw">this</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb47-8" title="8"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb47-9" title="9"><span class="at">handleChange</span>(e) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb47-10" title="10">  <span class="co">// ユーザーの入力した値をstate.inputValueに格納する</span></a>\r\n<a class="sourceLine" id="cb47-11" title="11">  <span class="kw">this</span>.<span class="at">setState</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb47-12" title="12">    <span class="dt">inputValue</span><span class="op">:</span> <span class="va">e</span>.<span class="va">target</span>.<span class="at">value</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb47-13" title="13">  <span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb47-14" title="14"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb47-15" title="15"><span class="at">handleClick</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb47-16" title="16">  <span class="kw">const</span> inputValue <span class="op">=</span> <span class="kw">this</span>.<span class="va">state</span>.<span class="at">inputValue</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb47-17" title="17">  <span class="kw">this</span>.<span class="va">props</span>.<span class="at">methodName</span>(inputValue)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb47-18" title="18"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb47-19" title="19"><span class="at">render</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb47-20" title="20">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb47-21" title="21">    <span class="op">&lt;</span>div className<span class="op">=</span><span class="st">&quot;TodoInput&quot;</span><span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb47-22" title="22">      <span class="va">▼valueにstate</span>.<span class="at">inputValueを設定、onChangeにhandleChangeメソッドを関連付け</span></a>\r\n<a class="sourceLine" id="cb47-23" title="23">      <span class="op">&lt;</span>input placeholder<span class="op">=</span><span class="st">&quot;何か入力してください&quot;</span> value<span class="op">={</span><span class="kw">this</span>.<span class="va">state</span>.<span class="at">inputValue</span><span class="op">}</span> onChange<span class="op">={</span><span class="kw">this</span>.<span class="at">handleChange</span><span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb47-24" title="24">      <span class="op">&lt;</span>button onClick<span class="op">={</span><span class="kw">this</span>.<span class="at">handleClick</span><span class="op">}</span> <span class="op">&gt;</span>登録&lt;/button<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb47-25" title="25">    &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb47-26" title="26">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb47-27" title="27"><span class="op">}</span></a></code></pre></div>\r\n<h3 id="まとめ-reactコンポーネントの作成手順">まとめ: Reactコンポーネントの作成手順</h3>\r\n<ol>\r\n<li>UIをコンポーネントに分割する</li>\r\n<li>propsやstateによって、どのようにUIが変化するかを定義する（JSXの作成）</li>\r\n<li>ユーザー操作によって、どのようにstateが変化するかを定義する（メソッドの作成）</li>\r\n<li>UIとメソッドを関連付ける（onClick属性などを設定）</li>\r\n</ol>\r\n<p>コンポーネントごとの責務を明らかにすること。</p>\r\n<h3 id="ライフサイクル">ライフサイクル</h3>\r\n<p>Reactコンポーネントにはライフサイクルメソッドと呼ばれる特殊なメソッドがあります。 Reactコンポーネントの状態に応じて、次の3つのうち対応するメソッドが呼ばれます。</p>\r\n<ul>\r\n<li>コンポーネントのマウントに対応して呼ばれるメソッド。</li>\r\n<li>コンポーネントで扱うデータの変化に対応して呼ばれるメソッド。</li>\r\n<li>エラーハンドリングに用いるメソッド。</li>\r\n</ul>\r\n<h4 id="マウントに関するライフサイクルメソッド">マウントに関するライフサイクルメソッド</h4>\r\n<p>Reactコンポーネントが新しく配置されるときに呼び出されるメソッドです。 コンポーネントの<code>render</code>メソッドが初めて呼ばれたときに、コンポーネントがマウントされた状態となります。</p>\r\n<ul>\r\n<li>コンポーネントのマウント ＝ コンポーネントの<code>render</code>メソッドが初めて呼ばれたとき</li>\r\n<li>コンポーネントのアップデート ＝ 2回目以降の<code>render</code>メソッドの呼び出し</li>\r\n<li>コンポーネントのアンマウント ＝ DOM上からなくなったとき</li>\r\n</ul>\r\n<p>componentWillMount : コンポーネントがマウントされる直前に呼ばれます。 コンポーネントを描画する<code>render</code>メソッドよりも先に呼ばれます。</p>\r\n<pre><code>ただ、コンストラクターも`render`メソッドより先に呼ばれるので、マウント前にしたい処理はここではなくコンストラクターで実行すれば十分です。\r\n</code></pre>\r\n<p>componentDidMount : コンポーネントがマウントされた直後に呼ばれます。 DOMがブラウザにレンダリングされたあとなので、DOMに対してイベントリスナーを設定したりサブスクライブなどの処理をしたりします。</p>\r\n<pre><code>TODO: サブスクライブって何でしょう？？\r\n\r\n`setState`は行わないこと。\r\n\r\nstateが変更されるとrenderメソッドが実行されます。\r\nrender → componentDidMount → setState → renderとなり、renderメソッドが2回実行されてしまうためです。\r\n</code></pre>\r\n<p>componentWillUnmount : コンポーネントがアンマウントされる直前に呼ばれます。 各種コンポーネントに関連付けた処理の後始末をします。</p>\r\n<pre><code>たとえば、setInterval関数に対するclearIntervalの実行や、APIリクエストのキャンセルなどです。\r\n</code></pre>\r\n<h4 id="データのアップデートに関するライフサイクルメソッド">データのアップデートに関するライフサイクルメソッド</h4>\r\n<p>アップデートはコンポーネントのpropsかstateが変更されたときに行われます。 初回のレンダリングはマウントとして扱われるため、マウント時にはこれらのメソッドは実行されません。</p>\r\n<p>componentWillReceiveProps : 引数に受け取る予定のpropsをとります。</p>\r\n<pre><code>~~~javascript\r\ncomponentWillReceiveProps(nextProps)\r\n~~~\r\n\r\npropsがアップデートされようとしているときのみ実行されます。\r\npropsの受け取りで実行されるため、変更の有無は関係なく実行されます。\r\n\r\nthis.propsには以前に受け取ったpropsが入っています。\r\n引数のnextPropsと比較する処理をすることができます。\r\n\r\nsetStateをすることも可能です。\r\n</code></pre>\r\n<p>shouldComponentUpdate : propsやstateに変更が合った場合に呼ばれます。 引数は次に受け取るpropsとstateです。 this.propsとthis.stateには前回の内容が入っています。</p>\r\n<pre><code>~~~javascript\r\nshouldComponentUpdate(nextProps, nextStaet)\r\n~~~\r\n\r\nrenderを行うべきかどうかをtrue/falseで返す必要があります。\r\n\r\nこのメソッドを指定しなかった場合、どのような変更でもrenderメソッドが呼び出されます（常にtrueを返すように指定したのと同じ）。\r\n\r\nこのメソッドはパフォーマンスチューニングをする際に利用します。\r\n表示に使っていないpropを受け取ったときや、そもそもpropsやstateに変更がなかったときは不要なrenderを行わないようにします。\r\n\r\n変更がないpropやstateを受け取ったときに再描画させないようにするもう一つの方法。\r\n\r\n`React.Component`を継承する代わりに`React.PureComponent`を継承すると、Reactが自動的に浅い比較（オブジェクトや配列の中身までは確認しない比較）を行うので、通常はこちらを利用する方が便利です。\r\nなにか特別な比較を行い、renderの有無を決めるときだけ`shouldComponentUpdate`を利用することを推奨します。\r\n</code></pre>\r\n<p>componentWillUpdate : renderが呼ばれる前に呼ばれる最後のメソッドです。</p>\r\n<pre><code>引数は次に受け取るpropsとstateです。\r\nthis.propsとthis.stateには前回の内容が入っています。\r\n\r\n~~~javascript\r\ncomponentWillUpdate(nextProps, nextStaet)\r\n~~~\r\n\r\n`setState`などコンポーネントの再レンダリングを促すような処理はしないこと。\r\n変更に対して`componentWillUpdate`、`render`が実行され、処理がループする可能性があるためです。\r\n\r\npropsの値を使ってstateを変更したいときは`componentWillReceiveProps`メソッドを使います。\r\n\r\n`shouldComponentUpdate`でfalseを返した場合、このメソッドは呼ばれません。\r\n</code></pre>\r\n<p>componentDidUpdate : renderの直後に呼ばれます。</p>\r\n<pre><code>引数は前のpropsとstateです。\r\nthis.propsとthis.stateは、いまの値（renderに使った内容）が格納されています。\r\n\r\n~~~javascript\r\ncomponentDidUpdate(prevProps, prevStaet)\r\n~~~\r\n\r\nアップデート後のDOMにアクセスするときや、変更が完了したことをAPIに通知するときなどに利用します。\r\n\r\n`shouldComponentUpdate`でfalseを返した場合、このメソッドは呼ばれません。\r\n</code></pre>\r\n<h4 id="エラーハンドリングに関するライフサイクルメソッド">エラーハンドリングに関するライフサイクルメソッド</h4>\r\n<p>エラーが起きたときだけ呼ばれるライフサイクルメソッドです。 React v16 から実装されています。</p>\r\n<p>componentDidCatch : 子コンポーネントでエラーが起こったときに呼ばれます。</p>\r\n<pre><code>~~~Javascript\r\ncomponentDidCatch(error, info)\r\n~~~\r\n\r\n引数にスタックとレースが入ったerror、その他の情報が入ったinfoをとります。\r\n\r\ninfoはオブジェクトで、現時点では`componentStack`プロパティしか持っていません。\r\nこれにはどのコンポーネントでエラーが発生したかが入っています。\r\n\r\nエラー解析の手がかりとなるので、どちらもログとして送信するようにしておくと便利。\r\n\r\n`setState`などの処理を行うことも可能。\r\n\r\nこのメソッドを記述したコンポーネント自体のエラーは検知できません。\r\n子コンポーネントのエラーを検知するためのメソッドです。\r\n</code></pre>\r\n<h2 id="reduxによるアプリケーションの状態管理">Reduxによるアプリケーションの状態管理</h2>\r\n<p><code>create-react-app</code>で新しいアプリケーションを作成します。</p>\r\n<h3 id="reduxのインストール">Reduxのインストール</h3>\r\n<pre><code>&gt; npm install --save redux\r\n</code></pre>\r\n<h3 id="reduxの構成">Reduxの構成</h3>\r\n<p>Store : アプリケーションの状態（<code>state</code>）とロジックを保持している居場所。</p>\r\n<p>Reducer : Storeが保持している状態を変化させるための関数。</p>\r\n<p>Action : 何らかの状態変化を引き起こす現象。たとえば、ユーザー入力、APIから取得した情報。</p>\r\n<pre><code>Actionの形式を標準化した〝Flux Standard Action〟というものがあります。\r\nActionを扱うライブラリ（`redux-actions`や`redux-promise`など）でも、これを採用したものが多いので、この形式に沿っておくのがよいでしょう。\r\n\r\nActionオブジェクトには、次のプロパティを持たせることができます。\r\n\r\n- type\r\n  \r\n  必須プロパティです。\r\n  どのような操作をしたのかが分かる内容を指定します。\r\n\r\n- payload\r\n  \r\n  Actionに伴うデータ。オブジェクト形式で扱うのが一般的。\r\n  errorプロパティがtrueのときはErrorオブジェクトを返すべき。\r\n  \r\n- error\r\n  \r\n  エラーを表現するときはtrueにします。\r\n  \r\n- meta\r\n  \r\n  payloadとは別に、ほかの情報をActionとして含めたいときに使う項目です。\r\n</code></pre>\r\n<h3 id="reducerの定義">Reducerの定義</h3>\r\n<p>Storeの初期状態［index.js］</p>\r\n<div class="sourceCode" id="cb58"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb58-1" title="1"><span class="kw">const</span> initialState <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb58-2" title="2">  <span class="dt">tasks</span><span class="op">:</span> []</a>\r\n<a class="sourceLine" id="cb58-3" title="3"><span class="op">};</span></a></code></pre></div>\r\n<p>tasksReducerの定義［index.js］</p>\r\n<div class="sourceCode" id="cb59"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb59-1" title="1"><span class="co">// Reducerの定義</span></a>\r\n<a class="sourceLine" id="cb59-2" title="2"><span class="co">// 第1引数は、現在の状態を表すstateオブジェクト</span></a>\r\n<a class="sourceLine" id="cb59-3" title="3"><span class="co">// 第2引数は、どのような操作をしたのかを示すActionオブジェクト</span></a>\r\n<a class="sourceLine" id="cb59-4" title="4"><span class="kw">function</span> <span class="at">tasksReducer</span>(state <span class="op">=</span> initialState<span class="op">,</span> action) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb59-5" title="5">  <span class="cf">switch</span> (<span class="va">action</span>.<span class="at">type</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb59-6" title="6">    <span class="cf">case</span> <span class="st">&#39;ADD_TASK&#39;</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb59-7" title="7">      <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb59-8" title="8">        ...<span class="at">state</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb59-9" title="9">        <span class="dt">tasks</span><span class="op">:</span> <span class="va">state</span>.<span class="va">tasks</span>.<span class="at">concat</span>([<span class="va">action</span>.<span class="at">task</span>])    <span class="co">// </span><span class="al">TODO</span><span class="co">: action.payload.taskでは？　→　そのとおりでした。</span></a>\r\n<a class="sourceLine" id="cb59-10" title="10">      <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb59-11" title="11">    <span class="dt">default</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb59-12" title="12">      <span class="cf">return</span> state<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb59-13" title="13">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb59-14" title="14"><span class="op">}</span></a></code></pre></div>\r\n<p>Actionオブジェクトのイメージ</p>\r\n<div class="sourceCode" id="cb60"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb60-1" title="1"><span class="op">{</span></a>\r\n<a class="sourceLine" id="cb60-2" title="2">  <span class="dt">type</span><span class="op">:</span> <span class="st">&#39;ADD_TASK&#39;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb60-3" title="3">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb60-4" title="4">    <span class="dt">task</span><span class="op">:</span> <span class="st">&#39;Study Reducer&#39;</span></a>\r\n<a class="sourceLine" id="cb60-5" title="5">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb60-6" title="6"><span class="op">}</span></a></code></pre></div>\r\n<h3 id="actioncreatorの定義">ActionCreatorの定義</h3>\r\n<p>ActionCreatorとはActionを生成するための関数です。</p>\r\n<p>Actionを生成する関数の定義［index.js］</p>\r\n<div class="sourceCode" id="cb61"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb61-1" title="1"><span class="co">// ActionCreatorの定義</span></a>\r\n<a class="sourceLine" id="cb61-2" title="2"><span class="co">// 追加するtaskを引数に取り、Actionオブジェクトを返す</span></a>\r\n<a class="sourceLine" id="cb61-3" title="3"><span class="kw">const</span> addTask <span class="op">=</span> (task) <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb61-4" title="4">  <span class="dt">type</span><span class="op">:</span> <span class="st">&#39;ADD_TASK&#39;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb61-5" title="5">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb61-6" title="6">    task</a>\r\n<a class="sourceLine" id="cb61-7" title="7">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb61-8" title="8"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>\r\n<h3 id="storeの定義">Storeの定義</h3>\r\n<p>Reduxの<code>createStore</code>関数を使ってStoreを生成します。 生成したStoreはアプリケーション内で唯一のものです。 アプリケーション全体のさまざまな状態をこのStoreで集約管理します。</p>\r\n<p>ReduxのStoreを生成するにはReducerが必要となります。</p>\r\n<p>Storeの作成［index.js］</p>\r\n<div class="sourceCode" id="cb62"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb62-1" title="1"><span class="im">import</span> <span class="op">{</span> createStore <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb62-2" title="2"></a>\r\n<a class="sourceLine" id="cb62-3" title="3"><span class="co">// Reducerの定義</span></a>\r\n<a class="sourceLine" id="cb62-4" title="4"><span class="kw">function</span> <span class="at">tasksReducer</span>(state <span class="op">=</span> initialState<span class="op">,</span> action) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb62-5" title="5">  <span class="co">// ...略</span></a>\r\n<a class="sourceLine" id="cb62-6" title="6"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb62-7" title="7"></a>\r\n<a class="sourceLine" id="cb62-8" title="8"><span class="co">// Storeの生成</span></a>\r\n<a class="sourceLine" id="cb62-9" title="9"><span class="kw">const</span> store <span class="op">=</span> <span class="at">createStore</span>(tasksReducer)<span class="op">;</span></a></code></pre></div>\r\n<div class="sourceCode" id="cb63"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb63-1" title="1"><span class="at">createStore</span>(reducer<span class="op">,</span> [preloadedState]<span class="op">,</span> [enhancer])</a></code></pre></div>\r\n<p>引数</p>\r\n<p>reducer : Reducerを指定します。</p>\r\n<p>preloadedState : Storeの初期値を指定します。 サーバーサイドやユーザーセッションで事前にデータを保持しているときに利用することが想定されます。</p>\r\n<p>enhancer : Storeの機能を拡張するサードパーティ製のツールを指定できます。</p>\r\n<p>戻り値</p>\r\n<p>Storeオブジェクト</p>\r\n<p>Storeオブジェクトは次の4つのメソッドを持ちます。</p>\r\n<ul>\r\n<li><p>dispatch</p>\r\n<p>ActionCreatorで生成したActionを発行します。</p>\r\n<div class="sourceCode" id="cb64"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb64-1" title="1"><span class="co">// ActionCreatorの定義</span></a>\r\n<a class="sourceLine" id="cb64-2" title="2"><span class="kw">const</span> addTask <span class="op">=</span> (task) <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb64-3" title="3">  ... <span class="at">略</span></a>\r\n<a class="sourceLine" id="cb64-4" title="4"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb64-5" title="5"></a>\r\n<a class="sourceLine" id="cb64-6" title="6"><span class="va">store</span>.<span class="at">dispatch</span>(<span class="at">addTask</span>(<span class="st">&quot;Study Store&quot;</span>))<span class="op">;</span></a></code></pre></div></li>\r\n<li><p>getState</p>\r\n<p>Storeの現在の状態を取得します。</p>\r\n<div class="sourceCode" id="cb65"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb65-1" title="1"><span class="va">console</span>.<span class="at">log</span>(<span class="va">store</span>.<span class="at">getState</span>())<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb65-2" title="2">↓</a>\r\n<a class="sourceLine" id="cb65-3" title="3"><span class="op">{</span></a>\r\n<a class="sourceLine" id="cb65-4" title="4">  <span class="dt">tasks</span><span class="op">:</span> [<span class="st">&#39;Study Store&#39;</span>]</a>\r\n<a class="sourceLine" id="cb65-5" title="5"><span class="op">}</span></a></code></pre></div></li>\r\n<li><p>subscribe</p>\r\n<p>Storeの状態が変更されたときに呼び出されるコールバック関数を指定します。</p>\r\n<p>ActionのdispatchによってStoreの状態が変わったときに、その変換を監視する役目を担う処理。</p>\r\n<p><code>store.subscribe</code>で監視を開始します。 <code>store.subscribe</code>の戻り値である<code>unsubscribe</code>を実行することで、<code>subscribe</code>を解除することができます。</p>\r\n<p>実際にReactと組み合わせるときは、<code>react-redux</code>というライブラリを使います。 <code>react-redux</code>が<code>subscribe</code>の仕組みを隠蔽するため、Storeの状態が変化するとReactのViewが更新されるというシンプルな流れになります。</p>\r\n<div class="sourceCode" id="cb66"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb66-1" title="1"><span class="kw">function</span> <span class="at">handleChange</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb66-2" title="2">  <span class="va">console</span>.<span class="at">log</span>(<span class="va">store</span>.<span class="at">getState</span>())<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb66-3" title="3"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb66-4" title="4"></a>\r\n<a class="sourceLine" id="cb66-5" title="5"><span class="co">// Storeの状態が変化したときに handleChange 関数が呼ばれる。</span></a>\r\n<a class="sourceLine" id="cb66-6" title="6"><span class="co">// subscribeの戻り値は unsubscribe という関数。</span></a>\r\n<a class="sourceLine" id="cb66-7" title="7"><span class="co">// これを実行すると状態変化の通知が解除され、handleChange 関数は呼ばれなくなる。</span></a>\r\n<a class="sourceLine" id="cb66-8" title="8"><span class="kw">const</span> unsubscribe <span class="op">=</span> <span class="va">store</span>.<span class="at">subscribe</span>(handleChange)<span class="op">;</span></a></code></pre></div></li>\r\n<li><p>replaceReducer</p>\r\n<p>createStoreで関連付けたReducerを、別のReducerに差し替えるメソッドです。</p>\r\n<p>createStoreで関連付けることができるReducerは1つだけです。 複数あるReducerを動的にロードしたいときにこのメソッドで差し替えをします。</p>\r\n<p>Storeに関連付けられているReducerのみしか適用されないので、特別な理由がない限り、combineReducerによって一つにまとめたReducerを関連付けてしまう方が楽。</p>\r\n<p>combineReducer : Reduxに備わっているメソッドで、複数のReducerを合成します。</p>\r\n<pre><code>  通常、一つのReducer内で処理分岐して定義して問題ありませんが、規模が大きくなってくると見通しが悪くなってくるのでReducerを分割したくなります。\r\n  そんなときにどうぞ。\r\n  \r\n  Storeはアプリケーション内で一つということに変わりはありませんが、Reducerを分割することで、Storeを擬似的に分割できる点がメリットです。\r\n</code></pre></li>\r\n</ul>\r\n<h3 id="reactと組み合わせる">Reactと組み合わせる</h3>\r\n<p>次の機能を持たせます。</p>\r\n<ul>\r\n<li>Reactを使って状態の変化をViewに反映する。</li>\r\n<li>ブラウザからのタスク入力を可能にする。</li>\r\n</ul>\r\n<ol>\r\n<li><p>タスク入力用のActionCreatorの定義</p>\r\n<div class="sourceCode" id="cb68"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb68-1" title="1"><span class="co">// タスク入力用のActionCreator</span></a>\r\n<a class="sourceLine" id="cb68-2" title="2"><span class="kw">const</span> inputTask <span class="op">=</span> (task) <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb68-3" title="3">  <span class="dt">type</span><span class="op">:</span> <span class="st">&quot;INPUT_TASK&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb68-4" title="4">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb68-5" title="5">    task</a>\r\n<a class="sourceLine" id="cb68-6" title="6">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb68-7" title="7"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div></li>\r\n<li><p>タスク入力用のActionを受け取りStoreを変更できるように、Reducerを変更する</p>\r\n<div class="sourceCode" id="cb69"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb69-1" title="1"><span class="kw">const</span> initialState <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb69-2" title="2">  <span class="dt">task</span><span class="op">:</span> <span class="st">&quot;&quot;</span><span class="op">,</span>       <span class="co">// ←追加</span></a>\r\n<a class="sourceLine" id="cb69-3" title="3">  <span class="dt">tasks</span><span class="op">:</span> []</a>\r\n<a class="sourceLine" id="cb69-4" title="4"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb69-5" title="5"></a>\r\n<a class="sourceLine" id="cb69-6" title="6"><span class="kw">function</span> <span class="at">tasksReducer</span>(state <span class="op">=</span> initialState<span class="op">,</span> action) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb69-7" title="7">  <span class="cf">switch</span> (<span class="va">action</span>.<span class="at">type</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb69-8" title="8">    <span class="cf">case</span> <span class="st">&#39;INPUT_TASK&#39;</span><span class="op">:</span>    <span class="co">// INPUT_TASKのCaseを追加</span></a>\r\n<a class="sourceLine" id="cb69-9" title="9">      <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb69-10" title="10">        ...<span class="at">state</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb69-11" title="11">        <span class="dt">task</span><span class="op">:</span> <span class="va">action</span>.<span class="va">payload</span>.<span class="at">task</span></a>\r\n<a class="sourceLine" id="cb69-12" title="12">      <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb69-13" title="13">    <span class="cf">case</span> <span class="st">&#39;ADD_TASK&#39;</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb69-14" title="14">      <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb69-15" title="15">        ...<span class="at">state</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb69-16" title="16">        <span class="dt">tasks</span><span class="op">:</span> <span class="va">state</span>.<span class="va">tasks</span>.<span class="at">concat</span>([<span class="va">action</span>.<span class="va">payload</span>.<span class="at">task</span>])</a>\r\n<a class="sourceLine" id="cb69-17" title="17">      <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb69-18" title="18">    <span class="dt">default</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb69-19" title="19">      <span class="cf">return</span> state<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb69-20" title="20">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb69-21" title="21"><span class="op">}</span></a></code></pre></div></li>\r\n<li><p>Reactコンポーネントの定義を追加する</p>\r\n<div class="sourceCode" id="cb70"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb70-1" title="1"><span class="kw">function</span> <span class="at">TodoApp</span>(<span class="op">{</span> store <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb70-2" title="2">  <span class="kw">const</span> <span class="op">{</span> task<span class="op">,</span> tasks <span class="op">}</span> <span class="op">=</span> <span class="va">store</span>.<span class="at">getState</span>()<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb70-3" title="3">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb70-4" title="4">    <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb70-5" title="5">      <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;text&quot;</span> onChange<span class="op">={</span>(e) <span class="op">=&gt;</span> <span class="va">store</span>.<span class="at">dispatch</span>(<span class="at">inputTask</span>(<span class="va">e</span>.<span class="va">target</span>.<span class="at">value</span>))<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb70-6" title="6">      <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;button&quot;</span> value<span class="op">=</span><span class="st">&quot;add&quot;</span> onClick<span class="op">={</span>() <span class="op">=&gt;</span> <span class="va">store</span>.<span class="at">dispatch</span>(<span class="at">addTask</span>(task))<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb70-7" title="7">      <span class="op">&lt;</span>ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb70-8" title="8">        <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb70-9" title="9">          <span class="va">tasks</span>.<span class="at">map</span>(<span class="kw">function</span>(item<span class="op">,</span> i) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb70-10" title="10">            <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb70-11" title="11">              <span class="op">&lt;</span>li key<span class="op">={</span>i<span class="op">}&gt;{</span>item<span class="op">}</span>&lt;/li<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb70-12" title="12">            )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb70-13" title="13">          <span class="op">}</span>)</a>\r\n<a class="sourceLine" id="cb70-14" title="14">        <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb70-15" title="15">      &lt;/ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb70-16" title="16">    &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb70-17" title="17">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb70-18" title="18"><span class="op">}</span></a></code></pre></div></li>\r\n<li><p>Reactコンポーネントを描画する関数の準備</p>\r\n<p>importを次のように変更する。</p>\r\n<div class="sourceCode" id="cb71"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb71-1" title="1"><span class="im">import</span> ReactDOM <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span><span class="op">;</span></a></code></pre></div>\r\n<p>↓</p>\r\n<div class="sourceCode" id="cb72"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb72-1" title="1"><span class="im">import</span> <span class="op">{</span> render <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span><span class="op">;</span></a></code></pre></div>\r\n<p>Viewを描画する関数を追加する。</p>\r\n<div class="sourceCode" id="cb73"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb73-1" title="1"><span class="kw">function</span> <span class="at">renderApp</span>(store) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb73-2" title="2">  <span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb73-3" title="3">    <span class="op">&lt;</span>TodoApp store<span class="op">={</span>store<span class="op">}</span> /&gt;<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb73-4" title="4">    <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;root&#39;</span>)</a>\r\n<a class="sourceLine" id="cb73-5" title="5">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb73-6" title="6"><span class="op">}</span></a></code></pre></div>\r\n<p>もともとあった描画の処理は削除する。</p>\r\n<div class="sourceCode" id="cb74"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb74-1" title="1"><span class="va">ReactDOM</span>.<span class="at">render</span>(<span class="op">&lt;</span>App /<span class="op">&gt;,</span> <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;root&#39;</span>))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb74-2" title="2"><span class="at">registerServiceWorker</span>()<span class="op">;</span></a></code></pre></div></li>\r\n<li><p>Viewに反映する関数の準備</p>\r\n<p>Storeの状態変化に応じてViewを変化させる関数を定義します。 Storeの<code>subscribe</code>メソッドを使います。</p>\r\n<div class="sourceCode" id="cb75"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb75-1" title="1"><span class="va">store</span>.<span class="at">subscribe</span>(() <span class="op">=&gt;</span> <span class="at">renderApp</span>(store))<span class="op">;</span></a></code></pre></div>\r\n<p>上記処理の次に描画する関数の呼び出しを追加する。<br />\r\n初期表示用？</p>\r\n<div class="sourceCode" id="cb76"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb76-1" title="1"><span class="at">renderApp</span>(store)<span class="op">;</span></a></code></pre></div></li>\r\n</ol>\r\n<h3 id="indexjsの全体">index.jsの全体</h3>\r\n<div class="sourceCode" id="cb77"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb77-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-2" title="2"><span class="im">import</span> <span class="op">{</span> render <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-3" title="3"><span class="im">import</span> <span class="op">{</span> createStore <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-4" title="4"></a>\r\n<a class="sourceLine" id="cb77-5" title="5"><span class="co">// Note: 使わないのでコメント化 &gt;&gt;&gt;</span></a>\r\n<a class="sourceLine" id="cb77-6" title="6"><span class="co">// import &#39;./index.css&#39;;</span></a>\r\n<a class="sourceLine" id="cb77-7" title="7"><span class="co">// import App from &#39;./App&#39;;</span></a>\r\n<a class="sourceLine" id="cb77-8" title="8"><span class="co">// import registerServiceWorker from &#39;./registerServiceWorker&#39;;</span></a>\r\n<a class="sourceLine" id="cb77-9" title="9"><span class="co">/// Note: &lt;&lt;&lt; 使わないのでコメント化</span></a>\r\n<a class="sourceLine" id="cb77-10" title="10"></a>\r\n<a class="sourceLine" id="cb77-11" title="11"><span class="kw">const</span> initialState <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-12" title="12">  <span class="dt">task</span><span class="op">:</span> <span class="st">&quot;&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb77-13" title="13">  <span class="dt">tasks</span><span class="op">:</span> []</a>\r\n<a class="sourceLine" id="cb77-14" title="14"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb77-15" title="15"></a>\r\n<a class="sourceLine" id="cb77-16" title="16"><span class="co">// Reducerの定義</span></a>\r\n<a class="sourceLine" id="cb77-17" title="17"><span class="co">// 第1引数は、現在の状態を表すstateオブジェクト</span></a>\r\n<a class="sourceLine" id="cb77-18" title="18"><span class="co">// 第2引数は、どのような操作をしたのかを示すActionオブジェクト</span></a>\r\n<a class="sourceLine" id="cb77-19" title="19"><span class="kw">function</span> <span class="at">tasksReducer</span>(state <span class="op">=</span> initialState<span class="op">,</span> action) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-20" title="20">  <span class="cf">switch</span> (<span class="va">action</span>.<span class="at">type</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-21" title="21">    <span class="cf">case</span> <span class="st">&#39;INPUT_TASK&#39;</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb77-22" title="22">      <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-23" title="23">        ...<span class="at">state</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb77-24" title="24">        <span class="dt">task</span><span class="op">:</span> <span class="va">action</span>.<span class="va">payload</span>.<span class="at">task</span></a>\r\n<a class="sourceLine" id="cb77-25" title="25">      <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb77-26" title="26">    <span class="cf">case</span> <span class="st">&#39;ADD_TASK&#39;</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb77-27" title="27">      <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-28" title="28">        ...<span class="at">state</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb77-29" title="29">        <span class="dt">tasks</span><span class="op">:</span> <span class="va">state</span>.<span class="va">tasks</span>.<span class="at">concat</span>([<span class="va">action</span>.<span class="va">payload</span>.<span class="at">task</span>])</a>\r\n<a class="sourceLine" id="cb77-30" title="30">      <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb77-31" title="31">    <span class="dt">default</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb77-32" title="32">      <span class="cf">return</span> state<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-33" title="33">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb77-34" title="34"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb77-35" title="35"></a>\r\n<a class="sourceLine" id="cb77-36" title="36"></a>\r\n<a class="sourceLine" id="cb77-37" title="37"><span class="co">// Storeの生成</span></a>\r\n<a class="sourceLine" id="cb77-38" title="38"><span class="kw">const</span> store <span class="op">=</span> <span class="at">createStore</span>(tasksReducer)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-39" title="39"></a>\r\n<a class="sourceLine" id="cb77-40" title="40"><span class="co">// ActionCreatorの定義</span></a>\r\n<a class="sourceLine" id="cb77-41" title="41"><span class="co">// 追加するtaskを引数に取り、Actionオブジェクトを返す</span></a>\r\n<a class="sourceLine" id="cb77-42" title="42"><span class="kw">const</span> addTask <span class="op">=</span> (task) <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-43" title="43">  <span class="dt">type</span><span class="op">:</span> <span class="st">&#39;ADD_TASK&#39;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb77-44" title="44">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-45" title="45">    task</a>\r\n<a class="sourceLine" id="cb77-46" title="46">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb77-47" title="47"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-48" title="48"></a>\r\n<a class="sourceLine" id="cb77-49" title="49"></a>\r\n<a class="sourceLine" id="cb77-50" title="50"><span class="co">// タスク入力用のActionCreator</span></a>\r\n<a class="sourceLine" id="cb77-51" title="51"><span class="kw">const</span> inputTask <span class="op">=</span> (task) <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-52" title="52">  <span class="dt">type</span><span class="op">:</span> <span class="st">&quot;INPUT_TASK&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb77-53" title="53">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-54" title="54">    task</a>\r\n<a class="sourceLine" id="cb77-55" title="55">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb77-56" title="56"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-57" title="57"></a>\r\n<a class="sourceLine" id="cb77-58" title="58"></a>\r\n<a class="sourceLine" id="cb77-59" title="59"><span class="kw">function</span> <span class="at">TodoApp</span>(<span class="op">{</span> store <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-60" title="60">  <span class="kw">const</span> <span class="op">{</span> task<span class="op">,</span> tasks <span class="op">}</span> <span class="op">=</span> <span class="va">store</span>.<span class="at">getState</span>()<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-61" title="61">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb77-62" title="62">    <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb77-63" title="63">      <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;text&quot;</span> onChange<span class="op">={</span>(e) <span class="op">=&gt;</span> <span class="va">store</span>.<span class="at">dispatch</span>(<span class="at">inputTask</span>(<span class="va">e</span>.<span class="va">target</span>.<span class="at">value</span>))<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb77-64" title="64">      <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;button&quot;</span> value<span class="op">=</span><span class="st">&quot;add&quot;</span> onClick<span class="op">={</span>() <span class="op">=&gt;</span> <span class="va">store</span>.<span class="at">dispatch</span>(<span class="at">addTask</span>(task))<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb77-65" title="65">      <span class="op">&lt;</span>ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb77-66" title="66">        <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-67" title="67">          <span class="va">tasks</span>.<span class="at">map</span>(<span class="kw">function</span>(item<span class="op">,</span> i) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-68" title="68">            <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb77-69" title="69">              <span class="op">&lt;</span>li key<span class="op">={</span>i<span class="op">}&gt;{</span>item<span class="op">}</span>&lt;/li<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb77-70" title="70">            )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-71" title="71">          <span class="op">}</span>)</a>\r\n<a class="sourceLine" id="cb77-72" title="72">        <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb77-73" title="73">      &lt;/ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb77-74" title="74">    &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb77-75" title="75">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-76" title="76"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb77-77" title="77"></a>\r\n<a class="sourceLine" id="cb77-78" title="78"></a>\r\n<a class="sourceLine" id="cb77-79" title="79"><span class="kw">function</span> <span class="at">renderApp</span>(store) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb77-80" title="80">  <span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb77-81" title="81">    <span class="op">&lt;</span>TodoApp store<span class="op">={</span>store<span class="op">}</span> /&gt;<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb77-82" title="82">    <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;root&#39;</span>)</a>\r\n<a class="sourceLine" id="cb77-83" title="83">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-84" title="84"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb77-85" title="85"></a>\r\n<a class="sourceLine" id="cb77-86" title="86"></a>\r\n<a class="sourceLine" id="cb77-87" title="87"><span class="va">store</span>.<span class="at">subscribe</span>(() <span class="op">=&gt;</span> <span class="at">renderApp</span>(store))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb77-88" title="88"><span class="at">renderApp</span>(store)<span class="op">;</span></a></code></pre></div>\r\n<h3 id="ファイルを機能ごとに分割する">ファイルを機能ごとに分割する</h3>\r\n<p>ActionCreator、Store、Reducer、Componentの定義を、1ファイルにまとめて書きました。 これを役割ごとにファイルを分割したほうが視認性がよくなります。</p>\r\n<p>次のフォルダ構造でファイルを分割します。</p>\r\n<pre><code>src/\r\n+---index.js\r\n+---containers/\r\n|     ... Container Component を置く\r\n+---components/\r\n|     ... Presentational Component を置く\r\n+---actions/\r\n|     ... ActionCreator を置く\r\n`---reducers/\r\n      ... Reducer を置く\r\n</code></pre>\r\n<ol>\r\n<li><p>Reducerの定義を<code>src/reducers/tasks.js</code>に移動します。</p>\r\n<p>function には <code>export default</code> を付けてください。</p>\r\n<div class="sourceCode" id="cb79"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb79-1" title="1"><span class="kw">const</span> initialState <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb79-2" title="2">  <span class="dt">task</span><span class="op">:</span> <span class="st">&quot;&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb79-3" title="3">  <span class="dt">tasks</span><span class="op">:</span> []</a>\r\n<a class="sourceLine" id="cb79-4" title="4"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb79-5" title="5"></a>\r\n<a class="sourceLine" id="cb79-6" title="6"><span class="co">// Reducerの定義</span></a>\r\n<a class="sourceLine" id="cb79-7" title="7"><span class="co">// 第1引数は、現在の状態を表すstateオブジェクト</span></a>\r\n<a class="sourceLine" id="cb79-8" title="8"><span class="co">// 第2引数は、どのような操作をしたのかを示すActionオブジェクト</span></a>\r\n<a class="sourceLine" id="cb79-9" title="9"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">tasksReducer</span>(state <span class="op">=</span> initialState<span class="op">,</span> action) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb79-10" title="10">  <span class="cf">switch</span> (<span class="va">action</span>.<span class="at">type</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb79-11" title="11">    <span class="cf">case</span> <span class="st">&#39;INPUT_TASK&#39;</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb79-12" title="12">      <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb79-13" title="13">        ...<span class="at">state</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb79-14" title="14">        <span class="dt">task</span><span class="op">:</span> <span class="va">action</span>.<span class="va">payload</span>.<span class="at">task</span></a>\r\n<a class="sourceLine" id="cb79-15" title="15">      <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb79-16" title="16">    <span class="cf">case</span> <span class="st">&#39;ADD_TASK&#39;</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb79-17" title="17">      <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb79-18" title="18">        ...<span class="at">state</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb79-19" title="19">        <span class="dt">tasks</span><span class="op">:</span> <span class="va">state</span>.<span class="va">tasks</span>.<span class="at">concat</span>([<span class="va">action</span>.<span class="va">payload</span>.<span class="at">task</span>])</a>\r\n<a class="sourceLine" id="cb79-20" title="20">      <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb79-21" title="21">    <span class="dt">default</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb79-22" title="22">      <span class="cf">return</span> state<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb79-23" title="23">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb79-24" title="24"><span class="op">}</span></a></code></pre></div></li>\r\n<li><p>ActionCreatorの定義を <code>src/actions/tasks.js</code> に移動します。</p>\r\n<p>const に <code>export</code> を付けてください。</p>\r\n<div class="sourceCode" id="cb80"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb80-1" title="1"><span class="co">// ActionCreatorの定義</span></a>\r\n<a class="sourceLine" id="cb80-2" title="2"><span class="co">// 追加するtaskを引数に取り、Actionオブジェクトを返す</span></a>\r\n<a class="sourceLine" id="cb80-3" title="3"><span class="im">export</span> <span class="kw">const</span> addTask <span class="op">=</span> (task) <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb80-4" title="4">  <span class="dt">type</span><span class="op">:</span> <span class="st">&#39;ADD_TASK&#39;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb80-5" title="5">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb80-6" title="6">    task</a>\r\n<a class="sourceLine" id="cb80-7" title="7">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb80-8" title="8"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb80-9" title="9"></a>\r\n<a class="sourceLine" id="cb80-10" title="10"></a>\r\n<a class="sourceLine" id="cb80-11" title="11"><span class="co">// タスク入力用のActionCreator</span></a>\r\n<a class="sourceLine" id="cb80-12" title="12"><span class="im">export</span> <span class="kw">const</span> inputTask <span class="op">=</span> (task) <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb80-13" title="13">  <span class="dt">type</span><span class="op">:</span> <span class="st">&quot;INPUT_TASK&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb80-14" title="14">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb80-15" title="15">    task</a>\r\n<a class="sourceLine" id="cb80-16" title="16">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb80-17" title="17"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div></li>\r\n<li><p>Componentの定義を <code>src/components/TodoApp.js</code> に移動します。</p>\r\n<p>componentsからActionをDispatchするため、先ほど移動したActionCreatorのファイルをインポートします。</p>\r\n<p>（<code>import { inputTask, addTask } from \'../actions/tasks\';</code> の部分）</p>\r\n<p>関数には <code>export default</code> を付けてください。</p>\r\n<div class="sourceCode" id="cb81"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb81-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb81-2" title="2"><span class="im">import</span> <span class="op">{</span> inputTask<span class="op">,</span> addTask <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;../actions/tasks&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb81-3" title="3"></a>\r\n<a class="sourceLine" id="cb81-4" title="4"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">TodoApp</span>(<span class="op">{</span> store <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb81-5" title="5">  <span class="kw">const</span> <span class="op">{</span> task<span class="op">,</span> tasks <span class="op">}</span> <span class="op">=</span> <span class="va">store</span>.<span class="at">getState</span>()<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb81-6" title="6">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb81-7" title="7">    <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb81-8" title="8">      <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;text&quot;</span> onChange<span class="op">={</span>(e) <span class="op">=&gt;</span> <span class="va">store</span>.<span class="at">dispatch</span>(<span class="at">inputTask</span>(<span class="va">e</span>.<span class="va">target</span>.<span class="at">value</span>))<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb81-9" title="9">      <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;button&quot;</span> value<span class="op">=</span><span class="st">&quot;add&quot;</span> onClick<span class="op">={</span>() <span class="op">=&gt;</span> <span class="va">store</span>.<span class="at">dispatch</span>(<span class="at">addTask</span>(task))<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb81-10" title="10">      <span class="op">&lt;</span>ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb81-11" title="11">        <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb81-12" title="12">          <span class="va">tasks</span>.<span class="at">map</span>(<span class="kw">function</span>(item<span class="op">,</span> i) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb81-13" title="13">            <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb81-14" title="14">              <span class="op">&lt;</span>li key<span class="op">={</span>i<span class="op">}&gt;{</span>item<span class="op">}</span>&lt;/li<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb81-15" title="15">            )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb81-16" title="16">          <span class="op">}</span>)</a>\r\n<a class="sourceLine" id="cb81-17" title="17">        <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb81-18" title="18">      &lt;/ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb81-19" title="19">    &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb81-20" title="20">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb81-21" title="21"><span class="op">}</span></a></code></pre></div></li>\r\n<li><p><code>src\\index.js</code> は、分割したファイルをインポートするように変更します。</p>\r\n<div class="sourceCode" id="cb82"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb82-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb82-2" title="2"><span class="im">import</span> <span class="op">{</span> render <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb82-3" title="3"><span class="im">import</span> tasksReducer <span class="im">from</span> <span class="st">&#39;./reducers/tasks&#39;</span><span class="op">;</span>    <span class="co">// Reducerのインポート</span></a>\r\n<a class="sourceLine" id="cb82-4" title="4"><span class="im">import</span> TodoApp <span class="im">from</span> <span class="st">&#39;./components/TodoApp&#39;</span><span class="op">;</span>     <span class="co">// Componentのインポート</span></a>\r\n<a class="sourceLine" id="cb82-5" title="5"><span class="im">import</span> <span class="op">{</span> createStore <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb82-6" title="6"></a>\r\n<a class="sourceLine" id="cb82-7" title="7"><span class="co">// Note: 使わないのでコメント化 &gt;&gt;&gt;</span></a>\r\n<a class="sourceLine" id="cb82-8" title="8"><span class="co">// import &#39;./index.css&#39;;</span></a>\r\n<a class="sourceLine" id="cb82-9" title="9"><span class="co">// import App from &#39;./App&#39;;</span></a>\r\n<a class="sourceLine" id="cb82-10" title="10"><span class="co">// import registerServiceWorker from &#39;./registerServiceWorker&#39;;</span></a>\r\n<a class="sourceLine" id="cb82-11" title="11"><span class="co">/// Note: &lt;&lt;&lt; 使わないのでコメント化</span></a>\r\n<a class="sourceLine" id="cb82-12" title="12"></a>\r\n<a class="sourceLine" id="cb82-13" title="13"><span class="co">// Storeの生成</span></a>\r\n<a class="sourceLine" id="cb82-14" title="14"><span class="kw">const</span> store <span class="op">=</span> <span class="at">createStore</span>(tasksReducer)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb82-15" title="15"></a>\r\n<a class="sourceLine" id="cb82-16" title="16"><span class="kw">function</span> <span class="at">renderApp</span>(store) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb82-17" title="17">  <span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb82-18" title="18">    <span class="op">&lt;</span>TodoApp store<span class="op">={</span>store<span class="op">}</span> /&gt;<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb82-19" title="19">    <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;root&#39;</span>)</a>\r\n<a class="sourceLine" id="cb82-20" title="20">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb82-21" title="21"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb82-22" title="22"></a>\r\n<a class="sourceLine" id="cb82-23" title="23"><span class="va">store</span>.<span class="at">subscribe</span>(() <span class="op">=&gt;</span> <span class="at">renderApp</span>(store))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb82-24" title="24"><span class="at">renderApp</span>(store)<span class="op">;</span></a></code></pre></div></li>\r\n</ol>\r\n\x3c!-- TODO: p.108 「最終的な」と書いておきつつ、サンプルコードに最後の2行がない。 --\x3e\r\n\r\n<h3 id="react-redux">react-redux</h3>\r\n<p><code>react-redux</code>は、ReactとReduxの連携をサポートするライブラリです。 Storeの状態変化に応じて該当部分のViewを再描画するのを手助けしてくれます。</p>\r\n<h3 id="react-reduxのインストール">react-reduxのインストール</h3>\r\n<pre><code>&gt; npm install --save react-redux\r\n</code></pre>\r\n\x3c!-- TODO: p109 `-save`になっている。半角ハイフンがひとつ足りない。 --\x3e\r\n\r\n<p>ReactはViewを扱うライブラリなので、Reduxが有するStoreやActionの情報と疎結合になっていることが望ましい。 そのほうがコンポーネント単体としてもテストしやすいし、コードの可読性も上がります。</p>\r\n<p>Container Component : Reactコンポーネントをラップしたコンポーネント。</p>\r\n<pre><code>ReduxのStoreやActionを受け取り、ReactのPropsとして渡す役を担います。\r\nContainer Componentの責務は、ReactとReduxの橋渡しのみなので、JSXを記述するのは誤りです。\r\n</code></pre>\r\n<p>Presentational Component : Redux依存のない純粋なReactコンポーネント。</p>\r\n<h3 id="react-reduxの機能">react-reduxの機能</h3>\r\n<p>次の2つの機能があります。</p>\r\n<ul>\r\n<li>&lt;Provider&gt;</li>\r\n<li>connect</li>\r\n</ul>\r\n<h4 id="provider-store">&lt;Provider store&gt;</h4>\r\n<p>dispatchはStoreが持つメソッドなので、ReactコンポーネントからActionをdispatchさせるにはStoreが必要になります。 dispatchしたいコンポーネントすべてに対し、Storeを最上位から渡していくのは得策ではありません。</p>\r\n<p>&lt;Provider&gt;を使うことで<code>connect</code>という関数を使えるようになり、任意のコンポーネントに対してStoreとの紐付けができるようになります。</p>\r\n<div class="sourceCode" id="cb85"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb85-1" title="1"><span class="co">// 最上位のコンポーネントを&lt;Provider&gt;でラップして、propsにStoreを与える</span></a>\r\n<a class="sourceLine" id="cb85-2" title="2"><span class="co">// （内部的にはReactのcontext経由でStoreを保持する仕組み）</span></a>\r\n<a class="sourceLine" id="cb85-3" title="3"><span class="va">ReactDOM</span>.<span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb85-4" title="4">  <span class="op">&lt;</span>Provider store<span class="op">={</span>store<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb85-5" title="5">    <span class="op">&lt;</span>MyRootComponent /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb85-6" title="6">  &lt;/Provider<span class="op">&gt;,</span></a>\r\n<a class="sourceLine" id="cb85-7" title="7">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;root&#39;</span>)</a>\r\n<a class="sourceLine" id="cb85-8" title="8">)<span class="op">;</span></a></code></pre></div>\r\n<h4 id="connectmapstatetoprops-mapdispatchtoprops-mergeprops-options">connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</h4>\r\n<p>特定のComponentに対して、Reactのcontextで保持しているStoreを提供します。 Storeさえあれば<code>getState</code>で状態が取得できますし、Actionの<code>dispatch</code>もできます。</p>\r\n<p>引数</p>\r\n<p>mapStateToProps(state, [ownProps]) : Storeから必要なstateを取り出し、ComponentのPropsに割り当てる関数を指定します。</p>\r\n<pre><code>第1引数はStoreのstate。\r\n複数のReducerを組み合わせている場合は、必要な部分のstateのみ取り出して返すようにすれば、不要なコンポーネントを渡さずに済みます。\r\n\r\n第2引数はオプションで、親コンポーネントから引き継がれてきたPropsが格納されています（下記の例では未使用）。\r\n\r\n~~~javascript\r\nfunction mapStateToProps({ task, tasks }) {\r\n  return {\r\n    task,\r\n    tasks,\r\n  };\r\n}\r\n~~~\r\n\r\n戻り値のオブジェクトは、connect先のComponentのPropsとして受け取ることができます。\r\n</code></pre>\r\n<p>mapDispatchToProps(dispatch, [ownProps]) : Actionのdispatchを行う処理を指定します。そうすることでコンポーネントからdispatchの概念を隠蔽します。</p>\r\n<pre><code>第1引数に、Storeのdispatchメソッドが渡されてくるので、これを使ってActionをdispatchします。\r\n\r\n~~~javascript\r\n// ActionCreator\r\nconst addTask = (task) =&gt; ({\r\n  type: &quot;ADD_TASK&quot;,\r\n  payload: {\r\n    task\r\n  }\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    addTask(task) {\r\n      dispatch(addTask(task));\r\n    }\r\n  };\r\n}\r\n~~~\r\n\r\n&lt;!-- TODO: p.112 dispatch(addTask(task});　← } ではなく ) では？ --&gt;\r\n</code></pre>\r\n<p>mergeProps(stateProps, dispatchProps, ownProps) : <code>mapStateToProps</code>と<code>mapDispatchToProps</code>を経たそれぞれのPropsと、親から渡ってきた<code>ownProps</code>をマージして、コンポーネントに渡します。</p>\r\n<pre><code>既定では、以下のように、`Object.assign`関数を使って単純に3つをマージしたものを返す処理が設定されています。\r\n\r\n~~~javascript\r\nfunction mergeProps(stateProps, dispatchProps, ownProps) {\r\n  return Object.assign({}, ownProps, stateProps, dispatchProps);\r\n}\r\n~~~\r\n</code></pre>\r\n<p>options : オプションとして次の項目を設定できます。</p>\r\n<pre><code>pure - Boolean\r\n:   規定値はtrueです。trueの場合、関連するState/Propsに変化がなければ、connectは再描画および`mapStateToProps`/`mapDispatchToProps`/`mergeProp`を呼び出しません。\r\n</code></pre>\r\n\x3c!-- TODO: p.114 mapStateToPrupsになっている。Propsでは？ --\x3e\r\n\r\n<pre><code>areStateEqual - Function\r\n:   `pure`がtrueの場合、Storeの中身の差分判定をどのようにするか指定します。\r\n    規定値は、strictEqual（===）です。\r\n\r\nareOwnPropsEqual - Function\r\n:   pureがtrueの場合、OwnPropの中身の差分判定をどのようにするか指定します。\r\n    規定値は、shallowEqual（==）です。\r\n\r\nareStatePropsEqual - Function\r\n:   pureがtrueの場合、mapStateToPropsの結果の差分判定をどのようにするか指定します。\r\n    規定値は、shallowEqual（==）です。\r\n\r\nareMergedPropsEqual - Function\r\n:   pureがtrueの場合、mergePropsの結果の差分判定をどのようにするか指定します。\r\n    規定値は、shallowEqual（==）です。\r\n\r\nstoreKey - String\r\n:   もし何らかの理由でStoreを複数用意したいときに指定します。\r\n\r\n    通常であれば不要。\r\n</code></pre>\r\n<h3 id="react-reduxの組み込み">react-reduxの組み込み</h3>\r\n<h4 id="container-componentの作成">Container Componentの作成</h4>\r\n<p>ファイル<code>src\\containers\\TodoApp.js</code>を作ります。</p>\r\n<p>これにより TodoApp コンポーネントには Prop として次の4つが渡されるようになります。</p>\r\n<ul>\r\n<li>task - フォームに入力されたタスク</li>\r\n<li>tasks - タスクの配列</li>\r\n<li>addTask - タスクを追加する関数</li>\r\n<li>inputTask - タスクを入力する関数</li>\r\n</ul>\r\n<div class="sourceCode" id="cb91"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb91-1" title="1"><span class="im">import</span> <span class="op">{</span> connect <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb91-2" title="2"><span class="im">import</span> TodoApp <span class="im">from</span> <span class="st">&#39;../components/TodoApp&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb91-3" title="3"><span class="im">import</span> <span class="op">{</span> inputTask<span class="op">,</span> addTask <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;../actions/tasks&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb91-4" title="4"></a>\r\n<a class="sourceLine" id="cb91-5" title="5"><span class="co">// Storeにある task と tasks という State を Props に渡す</span></a>\r\n<a class="sourceLine" id="cb91-6" title="6"><span class="kw">function</span> <span class="at">mapStateToProps</span>(<span class="op">{</span> task<span class="op">,</span> tasks <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb91-7" title="7">  <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb91-8" title="8">    task<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb91-9" title="9">    tasks</a>\r\n<a class="sourceLine" id="cb91-10" title="10">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb91-11" title="11"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb91-12" title="12"></a>\r\n<a class="sourceLine" id="cb91-13" title="13"><span class="co">// 該当のActionをDispatchさせる関数を Props に渡す</span></a>\r\n<a class="sourceLine" id="cb91-14" title="14"><span class="kw">function</span> <span class="at">mapDispatchToProps</span>(dispatch) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb91-15" title="15">  <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb91-16" title="16">    <span class="at">addTask</span>(task) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb91-17" title="17">      <span class="at">dispatch</span>(<span class="at">addTask</span>(task))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb91-18" title="18">    <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb91-19" title="19">    <span class="at">inputTask</span>(task) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb91-20" title="20">      <span class="at">dispatch</span>(<span class="at">inputTask</span>(task))</a>\r\n<a class="sourceLine" id="cb91-21" title="21">    <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb91-22" title="22">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb91-23" title="23"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb91-24" title="24"></a>\r\n<a class="sourceLine" id="cb91-25" title="25"><span class="im">export</span> <span class="im">default</span> <span class="at">connect</span>(mapStateToProps<span class="op">,</span> mapDispatchToProps)(TodoApp)<span class="op">;</span></a></code></pre></div>\r\n<h4 id="todoappコンポーネントの修正">TodoAppコンポーネントの修正</h4>\r\n<p><code>src/components/TodoApp.js</code></p>\r\n<p>変更前 : StoreがPropsに渡ってきて、そこからStateを取得。</p>\r\n<p>変更後 : containersから整形されたオブジェクトがPropsとして渡されてきます。 ActionCreatorやActionのDispatchもcontainers側でやるので、コンポーネント側はPropsで渡ってきたinputTaskとaddTaskを呼び出すだけになります。</p>\r\n<pre><code>これにより、コンポーネントのRedux依存が消え、再利用性も高まりました。\r\n</code></pre>\r\n<div class="sourceCode" id="cb93"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb93-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb93-2" title="2"></a>\r\n<a class="sourceLine" id="cb93-3" title="3"><span class="co">// 引数を store から変更</span></a>\r\n<a class="sourceLine" id="cb93-4" title="4"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">TodoApp</span>(<span class="op">{</span> task<span class="op">,</span> tasks<span class="op">,</span> inputTask<span class="op">,</span> addTask <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb93-5" title="5">  <span class="co">// onChange、onClickの指定時にdispatchが不要になる</span></a>\r\n<a class="sourceLine" id="cb93-6" title="6">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb93-7" title="7">    <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb93-8" title="8">      <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;text&quot;</span> onChange<span class="op">={</span>(e) <span class="op">=&gt;</span> <span class="at">inputTask</span>(<span class="va">e</span>.<span class="va">target</span>.<span class="at">value</span>)<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb93-9" title="9">      <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;button&quot;</span> value<span class="op">=</span><span class="st">&quot;add&quot;</span> onClick<span class="op">={</span>() <span class="op">=&gt;</span> <span class="at">addTask</span>(task)<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb93-10" title="10">      <span class="op">&lt;</span>ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb93-11" title="11">        <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb93-12" title="12">          <span class="va">tasks</span>.<span class="at">map</span>(<span class="kw">function</span>(item<span class="op">,</span> i) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb93-13" title="13">            <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb93-14" title="14">              <span class="op">&lt;</span>li key<span class="op">={</span>i<span class="op">}&gt;{</span>item<span class="op">}</span>&lt;/li<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb93-15" title="15">            )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb93-16" title="16">          <span class="op">}</span>)</a>\r\n<a class="sourceLine" id="cb93-17" title="17">        <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb93-18" title="18">      &lt;/ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb93-19" title="19">    &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb93-20" title="20">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb93-21" title="21"><span class="op">}</span></a></code></pre></div>\r\n<h4 id="indexjsの修正">index.jsの修正</h4>\r\n<ul>\r\n<li>Providerのimportを追加</li>\r\n<li>TodoAppのimportをcomponentsではなくcontainersにする</li>\r\n<li>Storeのsubscribeでコンポーネントの再描画を行っていた処理を削除する</li>\r\n<li>function renderApp の処理を外に出す（render()をfunctionではなくする）</li>\r\n</ul>\r\n<div class="sourceCode" id="cb94"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb94-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb94-2" title="2"><span class="im">import</span> <span class="op">{</span> Provider <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb94-3" title="3"><span class="im">import</span> <span class="op">{</span> createStore <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb94-4" title="4"><span class="im">import</span> <span class="op">{</span> render <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb94-5" title="5"><span class="im">import</span> tasksReducer <span class="im">from</span> <span class="st">&#39;./reducers/tasks&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb94-6" title="6"><span class="im">import</span> TodoApp <span class="im">from</span> <span class="st">&#39;./containers/TodoApp&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb94-7" title="7"></a>\r\n<a class="sourceLine" id="cb94-8" title="8"><span class="co">// Note: 使わないのでコメント化 &gt;&gt;&gt;</span></a>\r\n<a class="sourceLine" id="cb94-9" title="9"><span class="co">// import &#39;./index.css&#39;;</span></a>\r\n<a class="sourceLine" id="cb94-10" title="10"><span class="co">// import App from &#39;./App&#39;;</span></a>\r\n<a class="sourceLine" id="cb94-11" title="11"><span class="co">// import registerServiceWorker from &#39;./registerServiceWorker&#39;;</span></a>\r\n<a class="sourceLine" id="cb94-12" title="12"><span class="co">/// Note: &lt;&lt;&lt; 使わないのでコメント化</span></a>\r\n<a class="sourceLine" id="cb94-13" title="13"></a>\r\n<a class="sourceLine" id="cb94-14" title="14"><span class="co">// Storeの生成</span></a>\r\n<a class="sourceLine" id="cb94-15" title="15"><span class="kw">const</span> store <span class="op">=</span> <span class="at">createStore</span>(tasksReducer)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb94-16" title="16"></a>\r\n<a class="sourceLine" id="cb94-17" title="17"><span class="co">// &lt;Provider&gt;を追加</span></a>\r\n<a class="sourceLine" id="cb94-18" title="18"><span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb94-19" title="19">  <span class="op">&lt;</span>Provider store<span class="op">={</span>store<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb94-20" title="20">    <span class="op">&lt;</span>TodoApp /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb94-21" title="21">  &lt;/Provider<span class="op">&gt;,</span></a>\r\n<a class="sourceLine" id="cb94-22" title="22">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;root&#39;</span>)</a>\r\n<a class="sourceLine" id="cb94-23" title="23">)<span class="op">;</span></a></code></pre></div>\r\n<h4 id="connectadvanced">connectAdvanced</h4>\r\n<p>通常の<code>connect</code>よりも自由度を高くpropsの受け渡しをしたい場合、<code>connectAdvanced</code>を使うことができます。</p>\r\n<p><code>mapStateToProps</code>や<code>mapDispatchToProps</code>、<code>mergeProps</code>のあたりの処理を自前で行うイメージです。</p>\r\n<div class="sourceCode" id="cb95"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb95-1" title="1"><span class="at">connectAdvanced</span>(selectorFactory<span class="op">,</span> [connectOptions])</a></code></pre></div>\r\n<p>これらについては必要なときに調べるとしましょう。</p>\r\n<h2 id="ルーティング">ルーティング</h2>\r\n<p>ユーザーからの入力をもとに表示させるページを出し分けることをルーティングといいます。</p>\r\n<p>実装の方法は、どのページにいるのかという情報（URL）をStoreで保持し、変化があった場合にViewを差し替えるようにします。</p>\r\n<h3 id="実装パターン">実装パターン</h3>\r\n<p>URL遷移なし : URLを使わずにアプリの内部で状態を保持する方法。</p>\r\n<pre><code>たとえば、Storeにpageというプロパティを用意し、ここでいまどのページにいるのかを管理します。\r\nですが、画面のリロードによって状態が元に戻ってしまうため現実的ではありません。\r\n</code></pre>\r\n<p>URL Hash : URL Hash（<code>#</code>)を使ってクライアントサイドのルーティングを実現する方法です。</p>\r\n<pre><code>aタグによるページ内移動と同じ仕組みなので、サーバーにリクエストは投げられません。\r\n\r\nHashは`location.hash`で取得できます。\r\nhashが変更されたときに発火する`hashchange`イベントをハンドリングしてコンポーネントを描画します。\r\n</code></pre>\r\n<p>history API : ブラウザの履歴情報を操作するAPI（history API）を使った方法です。</p>\r\n<pre><code>- `pushState`で履歴を追加できます。このとき、サーバーにリクエストは飛びません。\r\n- 画面をリロードされたときは、その時点のURLにリクエストが投げられます。そのため、URLに該当するリソースがないと404エラーになってしまいます。\r\n- 404エラーに対応するため、サーバーサイトで常にSPAの基点となるべきテンプレートを返すようにします。\r\n- `webpack-dev-server`を使っているときは、History API Fallback機能を使うとWebサーバーが返すリソースがない場合、自動で index.html を返してくれます。\r\n- Reduxのconnectを使っている場合は`connect-history-api-fallback`というミドルウェアを使います。\r\n</code></pre>\r\n<h3 id="ルーティングライブラリ">ルーティングライブラリ</h3>\r\n<p>React Router V4 : メジャーなルーティングライブラリ。react-nativeを使ったアプリ開発でも使うことができます。</p>\r\n<pre><code>Webアプリでは`react-router-dom`パッケージを使います。\r\n</code></pre>\r\n<h4 id="インストール">インストール</h4>\r\n<pre><code>&gt; npm install --save react-router-dom\r\n</code></pre>\r\n<p>react-router-redux : react-routerをReduxに最適化したもの。</p>\r\n<pre><code>- react-routerのみでは、URLの変更を`&lt;Link&gt;`や`&lt;Redirect&gt;`経由でしかできません。\r\n- react-router-reduxでは、ルーティング情報をStoreのStateで管理しつつ、pushやreplaceといったAPIを使ってURLを変更できます。\r\n</code></pre>\r\n<h4 id="インストール-1">インストール</h4>\r\n<p>react-routerも動作に必要です。react-router-domパッケージも一緒にインストールします。</p>\r\n<p>Note: : react-router 4.x を使う場合、react-router-redux 5.x が必要です。 react-router-reduxに〝@next〟をつけてインストールします。</p>\r\n<pre><code>[react-router-redux - Installation](https://github.com/ReactTraining/react-router/tree/master/packages/react-router-redux#installation) より。\r\n</code></pre>\r\n<pre><code>&gt; npm install --save react-router-dom react-router-redux@next history\r\n</code></pre>\r\n<h4 id="特徴">特徴</h4>\r\n<ul>\r\n<li>react-routerのAPIはそのまま利用できます。</li>\r\n<li>react-router-reduxがやっていることは、historyオブジェクトを強化し、その変更をStoreのStateに常に同期することです。</li>\r\n</ul>\r\n<h4 id="導入方法">導入方法</h4>\r\n<p>Storeの生成処理が複雑なので別ファイルとして切り出します。 その中にStoreを生成する関数を定義します。</p>\r\n<p><code>src/store/index.js</code>というファイルを作成します。</p>\r\n<div class="sourceCode" id="cb104"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb104-1" title="1"><span class="im">import</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb104-2" title="2">  <span class="co">// 名前が被るので別名でインポートする</span></a>\r\n<a class="sourceLine" id="cb104-3" title="3">  createStore <span class="im">as</span> reduxCreateStore<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb104-4" title="4">  combineReducers<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb104-5" title="5">  applyMiddleware</a>\r\n<a class="sourceLine" id="cb104-6" title="6"><span class="op">}</span> <span class="im">from</span> <span class="st">&#39;redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb104-7" title="7"><span class="im">import</span> <span class="op">{</span> routerReducer<span class="op">,</span> routerMiddleware <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb104-8" title="8"><span class="im">import</span> tasksReducer <span class="im">from</span> <span class="st">&#39;../reducers/tasks&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb104-9" title="9"></a>\r\n<a class="sourceLine" id="cb104-10" title="10"><span class="co">// Storeを生成するための関数を定義</span></a>\r\n<a class="sourceLine" id="cb104-11" title="11"><span class="co">// historyはsrc/index.jsからもらう</span></a>\r\n<a class="sourceLine" id="cb104-12" title="12"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">createStore</span>(history) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb104-13" title="13">  <span class="cf">return</span> <span class="at">reduxCreateStore</span>(</a>\r\n<a class="sourceLine" id="cb104-14" title="14">    <span class="at">combineReducers</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb104-15" title="15">      <span class="co">// tasksReducersをtasksというキーに割り当てる</span></a>\r\n<a class="sourceLine" id="cb104-16" title="16">      <span class="dt">tasks</span><span class="op">:</span> tasksReducer<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb104-17" title="17">      <span class="co">// react-router-reduxのReducer</span></a>\r\n<a class="sourceLine" id="cb104-18" title="18">      <span class="dt">router</span><span class="op">:</span> routerReducer</a>\r\n<a class="sourceLine" id="cb104-19" title="19">    <span class="op">}</span>)<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb104-20" title="20">    <span class="at">applyMiddleware</span>(</a>\r\n<a class="sourceLine" id="cb104-21" title="21">      <span class="co">// react-router-reduxのRedux Middleware</span></a>\r\n<a class="sourceLine" id="cb104-22" title="22">      <span class="at">routerMiddleware</span>(history)</a>\r\n<a class="sourceLine" id="cb104-23" title="23">    )</a>\r\n<a class="sourceLine" id="cb104-24" title="24">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb104-25" title="25"><span class="op">}</span></a></code></pre></div>\r\n<ul>\r\n<li>react-router-reduxは<code>routerReducer</code>というルーティングのためのReducerを持っています。</li>\r\n<li>自前のReducerと一緒に使うために、combineReducerを使ってReducerを合成します。</li>\r\n<li>react-router-reduxはルーティングのための<code>routerMiddleware</code>というMiddlewareも提供しています。 このMiddlewareにより、ReduxのAction経由でルーティングを制御できるようになります。</li>\r\n<li><code>applyMiddleware</code>を使って、<code>routerMiddleware</code>を適用します。</li>\r\n</ul>\r\n<p>Storeの生成</p>\r\n<p><code>src/index.js</code>を変更します。</p>\r\n<ul>\r\n<li><code>import { createStore } from \'redux\';</code>を消す。</li>\r\n<li><code>import tasksReducer from \'./reducers/tasks\';</code> を消す。</li>\r\n<li><code>react-router-redux</code>と<code>history</code>、<code>src/store/index.js</code>のインポートを追加。</li>\r\n<li>historyのインスタンス生成を追加。</li>\r\n<li>&lt;ConnectedRouter&gt;にhistoryを渡す処理を追加。</li>\r\n<li>createStoreの引数を<code>tasksReducer</code>から<code>history</code>に変更。</li>\r\n</ul>\r\n<div class="sourceCode" id="cb105"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb105-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb105-2" title="2"><span class="im">import</span> <span class="op">{</span> Provider <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb105-3" title="3"><span class="im">import</span> <span class="op">{</span> render <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb105-4" title="4"><span class="im">import</span> <span class="op">{</span> ConnectedRouter <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-redux&#39;</span><span class="op">;</span>             <span class="co">// 追加</span></a>\r\n<a class="sourceLine" id="cb105-5" title="5"><span class="im">import</span> createBrowserHistory <span class="im">from</span> <span class="st">&#39;history/createBrowserHistory&#39;</span><span class="op">;</span>  <span class="co">// 追加</span></a>\r\n<a class="sourceLine" id="cb105-6" title="6"><span class="im">import</span> TodoApp <span class="im">from</span> <span class="st">&#39;./containers/TodoApp&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb105-7" title="7"><span class="im">import</span> createStore <span class="im">from</span> <span class="st">&#39;./store&#39;</span><span class="op">;</span>                                <span class="co">// 追加</span></a>\r\n<a class="sourceLine" id="cb105-8" title="8"></a>\r\n<a class="sourceLine" id="cb105-9" title="9"><span class="co">// Note: 使わないのでコメント化 &gt;&gt;&gt;</span></a>\r\n<a class="sourceLine" id="cb105-10" title="10"><span class="co">// import &#39;./index.css&#39;;</span></a>\r\n<a class="sourceLine" id="cb105-11" title="11"><span class="co">// import App from &#39;./App&#39;;</span></a>\r\n<a class="sourceLine" id="cb105-12" title="12"><span class="co">// import registerServiceWorker from &#39;./registerServiceWorker&#39;;</span></a>\r\n<a class="sourceLine" id="cb105-13" title="13"><span class="co">/// Note: &lt;&lt;&lt; 使わないのでコメント化</span></a>\r\n<a class="sourceLine" id="cb105-14" title="14"></a>\r\n<a class="sourceLine" id="cb105-15" title="15"><span class="co">// history のインスタンスを生成</span></a>\r\n<a class="sourceLine" id="cb105-16" title="16"><span class="kw">const</span> history <span class="op">=</span> <span class="at">createBrowserHistory</span>()<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb105-17" title="17"></a>\r\n<a class="sourceLine" id="cb105-18" title="18"><span class="co">// Storeの生成</span></a>\r\n<a class="sourceLine" id="cb105-19" title="19"><span class="kw">const</span> store <span class="op">=</span> <span class="at">createStore</span>(history)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb105-20" title="20"></a>\r\n<a class="sourceLine" id="cb105-21" title="21"><span class="co">// &lt;ConnectedRouter&gt;を追加</span></a>\r\n<a class="sourceLine" id="cb105-22" title="22"><span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb105-23" title="23">  <span class="op">&lt;</span>Provider store<span class="op">={</span>store<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb105-24" title="24">    <span class="op">&lt;</span>ConnectedRouter history<span class="op">={</span>history<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb105-25" title="25">      <span class="op">&lt;</span>TodoApp /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb105-26" title="26">    &lt;/ConnectedRouter<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb105-27" title="27">  &lt;/Provider<span class="op">&gt;,</span></a>\r\n<a class="sourceLine" id="cb105-28" title="28">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;root&#39;</span>)</a>\r\n<a class="sourceLine" id="cb105-29" title="29">)<span class="op">;</span></a></code></pre></div>\r\n<p><code>src/store/index.js</code>でReducerの合成をしたため、Reducerの構成が変更になっています。</p>\r\n<p>Storeの構成</p>\r\n<p>↓</p>\r\n<div class="sourceCode" id="cb106"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb106-1" title="1"><span class="op">{</span></a>\r\n<a class="sourceLine" id="cb106-2" title="2">  <span class="dt">tasks</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb106-3" title="3">    <span class="dt">task</span><span class="op">:</span> <span class="st">&quot;&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb106-4" title="4">    <span class="dt">tasks</span><span class="op">:</span> []</a>\r\n<a class="sourceLine" id="cb106-5" title="5">  <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb106-6" title="6">  <span class="dt">router</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb106-7" title="7">    <span class="dt">location</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb106-8" title="8">      <span class="co">// ルーティング情報</span></a>\r\n<a class="sourceLine" id="cb106-9" title="9">    <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb106-10" title="10">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb106-11" title="11"><span class="op">}</span></a></code></pre></div>\r\n<p>そのため、<code>src/containers/TodoApp.js</code>の<code>mapStateToProps</code>も変更する必要があります。</p>\r\n<div class="sourceCode" id="cb107"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb107-1" title="1"><span class="kw">function</span> <span class="at">mapStateToProps</span>(<span class="op">{</span> tasks <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb107-2" title="2">  <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb107-3" title="3">    <span class="dt">task</span><span class="op">:</span> <span class="va">tasks</span>.<span class="at">task</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb107-4" title="4">    <span class="dt">tasks</span><span class="op">:</span> <span class="va">tasks</span>.<span class="at">tasks</span></a>\r\n<a class="sourceLine" id="cb107-5" title="5">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb107-6" title="6"><span class="op">}</span></a></code></pre></div>\r\n<h4 id="action経由によるルーティング">Action経由によるルーティング</h4>\r\n<p><code>routerMiddleware</code>を適用することで、Action経由でルーティングをすることができます。</p>\r\n<p><code>react-router-redux</code>が用意している次のようなActionCreatorを用いたルーティングができるようになります。</p>\r\n<p>push : 履歴に新しいlocationを追加します。</p>\r\n<p>replace : 現在の履歴を新しいlocationに置き換えます。</p>\r\n<p>go : 相対値（1 や -2 など）を指定して、履歴を移動します。</p>\r\n<p>goForward : 履歴を1つ進めます。</p>\r\n<p>goBack : 履歴を1つ戻ります。</p>\r\n<h4 id="ボタンを押すとエラーページに移動するサンプル">ボタンを押すとエラーページに移動するサンプル</h4>\r\n<p><code>src/components/Error.js</code>ファイルを作成します。</p>\r\n<div class="sourceCode" id="cb108"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb108-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb108-2" title="2"><span class="im">import</span> <span class="op">{</span> Link <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-dom&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb108-3" title="3"></a>\r\n<a class="sourceLine" id="cb108-4" title="4"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">Error</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb108-5" title="5">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb108-6" title="6">    <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb108-7" title="7">      <span class="op">&lt;</span>h1<span class="op">&gt;</span>エラーページ&lt;/h1<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb108-8" title="8">      <span class="op">&lt;</span>Link to<span class="op">=</span><span class="st">&quot;/&quot;</span><span class="op">&gt;</span>戻る&lt;/Link<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb108-9" title="9">    &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb108-10" title="10">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb108-11" title="11"><span class="op">}</span></a></code></pre></div>\r\n<p><code>src/index.js</code>を変更して、エラーページに移動できるようにします。</p>\r\n<div class="sourceCode" id="cb109"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb109-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb109-2" title="2"><span class="im">import</span> <span class="op">{</span> render <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb109-3" title="3"><span class="im">import</span> <span class="op">{</span> Route <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-dom&#39;</span><span class="op">;</span>     <span class="co">// 追加</span></a>\r\n<a class="sourceLine" id="cb109-4" title="4"><span class="im">import</span> <span class="op">{</span> Provider <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb109-5" title="5"><span class="im">import</span> <span class="op">{</span> ConnectedRouter <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb109-6" title="6"><span class="im">import</span> createBrowserHistory <span class="im">from</span> <span class="st">&#39;history/createBrowserHistory&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb109-7" title="7"><span class="im">import</span> TodoApp <span class="im">from</span> <span class="st">&#39;./containers/TodoApp&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb109-8" title="8"><span class="im">import</span> Error <span class="im">from</span> <span class="st">&#39;./components/Error&#39;</span><span class="op">;</span>       <span class="co">// 追加</span></a>\r\n<a class="sourceLine" id="cb109-9" title="9"><span class="im">import</span> createStore <span class="im">from</span> <span class="st">&#39;./store&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb109-10" title="10"></a>\r\n<a class="sourceLine" id="cb109-11" title="11"><span class="co">// Note: 使わないのでコメント化 &gt;&gt;&gt;</span></a>\r\n<a class="sourceLine" id="cb109-12" title="12"><span class="co">// import &#39;./index.css&#39;;</span></a>\r\n<a class="sourceLine" id="cb109-13" title="13"><span class="co">// import App from &#39;./App&#39;;</span></a>\r\n<a class="sourceLine" id="cb109-14" title="14"><span class="co">// import registerServiceWorker from &#39;./registerServiceWorker&#39;;</span></a>\r\n<a class="sourceLine" id="cb109-15" title="15"><span class="co">/// Note: &lt;&lt;&lt; 使わないのでコメント化</span></a>\r\n<a class="sourceLine" id="cb109-16" title="16"></a>\r\n<a class="sourceLine" id="cb109-17" title="17"><span class="co">// history のインスタンスを生成</span></a>\r\n<a class="sourceLine" id="cb109-18" title="18"><span class="kw">const</span> history <span class="op">=</span> <span class="at">createBrowserHistory</span>()<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb109-19" title="19"></a>\r\n<a class="sourceLine" id="cb109-20" title="20"><span class="co">// Storeの生成</span></a>\r\n<a class="sourceLine" id="cb109-21" title="21"><span class="kw">const</span> store <span class="op">=</span> <span class="at">createStore</span>(history)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb109-22" title="22"></a>\r\n<a class="sourceLine" id="cb109-23" title="23"><span class="co">// &lt;ConnectedRouter&gt;を追加</span></a>\r\n<a class="sourceLine" id="cb109-24" title="24"><span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb109-25" title="25">  <span class="op">&lt;</span>Provider store<span class="op">={</span>store<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb109-26" title="26">    <span class="op">&lt;</span>ConnectedRouter history<span class="op">={</span>history<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb109-27" title="27">      <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb109-28" title="28">        <span class="op">{</span> <span class="co">/* ルーティングさせる */</span> <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb109-29" title="29">        <span class="op">&lt;</span>Route exact path<span class="op">=</span><span class="st">&quot;/&quot;</span> component<span class="op">={</span>TodoApp<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb109-30" title="30">        <span class="op">&lt;</span>Route exact path<span class="op">=</span><span class="st">&quot;/error&quot;</span> component<span class="op">={</span>Error<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb109-31" title="31">      &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb109-32" title="32">    &lt;/ConnectedRouter<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb109-33" title="33">  &lt;/Provider<span class="op">&gt;,</span></a>\r\n<a class="sourceLine" id="cb109-34" title="34">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;root&#39;</span>)</a>\r\n<a class="sourceLine" id="cb109-35" title="35">)<span class="op">;</span></a></code></pre></div>\r\n<p><code>react-router-dom</code>のRouteコンポーネントを使ってルーティングを用意しています。</p>\r\n<p><code>/</code> であれば、Todoアプリを表示。 <code>/error</code>であれば、エラーページを表示。</p>\r\n<p><code>src/containers/TodoApp.js</code>にエラーページにリダイレクトさせる処理を追加します。</p>\r\n<div class="sourceCode" id="cb110"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb110-1" title="1"><span class="im">import</span> <span class="op">{</span> connect <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb110-2" title="2"><span class="im">import</span> <span class="op">{</span> push <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-redux&#39;</span><span class="op">;</span>    <span class="co">// 追加</span></a>\r\n<a class="sourceLine" id="cb110-3" title="3"><span class="im">import</span> TodoApp <span class="im">from</span> <span class="st">&#39;../components/TodoApp&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb110-4" title="4"><span class="im">import</span> <span class="op">{</span> inputTask<span class="op">,</span> addTask <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;../actions/tasks&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb110-5" title="5"></a>\r\n<a class="sourceLine" id="cb110-6" title="6"><span class="co">// Storeにある task と tasks という State を Props に渡す</span></a>\r\n<a class="sourceLine" id="cb110-7" title="7"><span class="kw">function</span> <span class="at">mapStateToProps</span>(<span class="op">{</span> tasks <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb110-8" title="8">  <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb110-9" title="9">    <span class="dt">task</span><span class="op">:</span> <span class="va">tasks</span>.<span class="at">task</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb110-10" title="10">    <span class="dt">tasks</span><span class="op">:</span> <span class="va">tasks</span>.<span class="at">tasks</span></a>\r\n<a class="sourceLine" id="cb110-11" title="11">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb110-12" title="12"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb110-13" title="13"></a>\r\n<a class="sourceLine" id="cb110-14" title="14"><span class="co">// 該当のActionをDispatchさせる関数を Props に渡す</span></a>\r\n<a class="sourceLine" id="cb110-15" title="15"><span class="kw">function</span> <span class="at">mapDispatchToProps</span>(dispatch) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb110-16" title="16">  <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb110-17" title="17">    <span class="at">addTask</span>(task) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb110-18" title="18">      <span class="at">dispatch</span>(<span class="at">addTask</span>(task))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb110-19" title="19">    <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb110-20" title="20">    <span class="at">inputTask</span>(task) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb110-21" title="21">      <span class="at">dispatch</span>(<span class="at">inputTask</span>(task))</a>\r\n<a class="sourceLine" id="cb110-22" title="22">    <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb110-23" title="23">    <span class="co">// リダイレクト処理を追加</span></a>\r\n<a class="sourceLine" id="cb110-24" title="24">    <span class="co">// react-router-reduxが提供しているpushというActionCreatorを使う</span></a>\r\n<a class="sourceLine" id="cb110-25" title="25">    <span class="at">redirectToError</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb110-26" title="26">      <span class="at">dispatch</span>(<span class="at">push</span>(<span class="st">&#39;/error&#39;</span>))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb110-27" title="27">    <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb110-28" title="28">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb110-29" title="29"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb110-30" title="30"></a>\r\n<a class="sourceLine" id="cb110-31" title="31"><span class="im">export</span> <span class="im">default</span> <span class="at">connect</span>(mapStateToProps<span class="op">,</span> mapDispatchToProps)(TodoApp)<span class="op">;</span></a></code></pre></div>\r\n<p>リダイレクトする処理を呼び出せるように、<code>src/components/TodoApp.js</code>を変更します。</p>\r\n<div class="sourceCode" id="cb111"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb111-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb111-2" title="2"></a>\r\n<a class="sourceLine" id="cb111-3" title="3"><span class="co">// 引数に redirectToError を追加</span></a>\r\n<a class="sourceLine" id="cb111-4" title="4"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">TodoApp</span>(<span class="op">{</span> task<span class="op">,</span> tasks<span class="op">,</span> inputTask<span class="op">,</span> addTask<span class="op">,</span> redirectToError <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb111-5" title="5">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb111-6" title="6">    <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb111-7" title="7">      <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;text&quot;</span> onChange<span class="op">={</span>(e) <span class="op">=&gt;</span> <span class="at">inputTask</span>(<span class="va">e</span>.<span class="va">target</span>.<span class="at">value</span>)<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb111-8" title="8">      <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;button&quot;</span> value<span class="op">=</span><span class="st">&quot;add&quot;</span> onClick<span class="op">={</span>() <span class="op">=&gt;</span> <span class="at">addTask</span>(task)<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb111-9" title="9">      <span class="op">&lt;</span>ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb111-10" title="10">        <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb111-11" title="11">          <span class="va">tasks</span>.<span class="at">map</span>(<span class="kw">function</span>(item<span class="op">,</span> i) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb111-12" title="12">            <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb111-13" title="13">              <span class="op">&lt;</span>li key<span class="op">={</span>i<span class="op">}&gt;{</span>item<span class="op">}</span>&lt;/li<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb111-14" title="14">            )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb111-15" title="15">          <span class="op">}</span>)</a>\r\n<a class="sourceLine" id="cb111-16" title="16">        <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb111-17" title="17">      &lt;/ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb111-18" title="18">      <span class="op">{</span> <span class="co">/* 追加 */</span> <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb111-19" title="19">      <span class="op">&lt;</span>button onClick<span class="op">={</span>() <span class="op">=&gt;</span> <span class="at">redirectToError</span>()<span class="op">}&gt;</span>エラーページへ移動&lt;/button<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb111-20" title="20">    &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb111-21" title="21">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb111-22" title="22"><span class="op">}</span></a></code></pre></div>\r\n<h2 id="redux-middleware">Redux Middleware</h2>\r\n<p>Redux Middleware とは、Reduxの機能を拡張する仕組みです。</p>\r\n<p>Middleware ＝ 拡張機能</p>\r\n<p>Redux自体は軽量なアーキテクチャなので、単体では提供していない機能もある。</p>\r\n<ul>\r\n<li>Actionのログを取るミドルウェア</li>\r\n<li>非同期処理を可能にするミドルウェア</li>\r\n<li>クラッシュレポートを送信するためのミドルウェア</li>\r\n<li>ルーティングのためのミドルウェア</li>\r\n<li>etc...</li>\r\n</ul>\r\n<h3 id="actionのログを取るミドルウェア">Actionのログを取るミドルウェア</h3>\r\n<p><code>redux-logger</code>はActionがDispatchされる前後のstateと、DispatchされたActionをコンソールに表示します。 開発時に有用なミドルウェアなのでインストールしたほうがよいでしょう。</p>\r\n<h4 id="インストール-2">インストール</h4>\r\n<pre><code>&gt; npm install --save redux-logger\r\n</code></pre>\r\n\x3c!-- TODO: p.143 install が insta\'l になっている --\x3e\r\n\r\n<h4 id="ミドルウェアの適用">ミドルウェアの適用</h4>\r\n<p>Reduxにミドルウェアを適用するには、<code>applyMiddleware</code>関数を利用します。</p>\r\n<div class="sourceCode" id="cb113"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb113-1" title="1"><span class="co">// ミドルウェアの適用に必要な applyMiddleware 関数をインポートします</span></a>\r\n<a class="sourceLine" id="cb113-2" title="2"><span class="im">import</span> <span class="op">{</span> createStore<span class="op">,</span> applyMiddleware <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb113-3" title="3"></a>\r\n<a class="sourceLine" id="cb113-4" title="4"><span class="co">// ミドルウェアをインポートします</span></a>\r\n<a class="sourceLine" id="cb113-5" title="5"><span class="im">import</span> logger <span class="im">from</span> <span class="st">&#39;redux-logger&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb113-6" title="6"></a>\r\n<a class="sourceLine" id="cb113-7" title="7"><span class="co">// createStoreの第2引数に applyMiddleware を指定し、その引数にミドルウェアを指定します</span></a>\r\n<a class="sourceLine" id="cb113-8" title="8"><span class="kw">const</span> store <span class="op">=</span> <span class="at">createStore</span>(</a>\r\n<a class="sourceLine" id="cb113-9" title="9">  reducer<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb113-10" title="10">  <span class="at">applyMiddleware</span>(logger)</a>\r\n<a class="sourceLine" id="cb113-11" title="11">)<span class="op">;</span></a></code></pre></div>\r\n<p><code>applyMiddleware</code>の引数は可変数なので、複数のミドルウェアを指定するときは、以下のようにカンマ区切りで並べて指定します。</p>\r\n<div class="sourceCode" id="cb114"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb114-1" title="1"><span class="at">applyMiddleware</span>(middleware1<span class="op">,</span> middleware2<span class="op">,</span> middleware3)</a></code></pre></div>\r\n<h2 id="非同期処理">非同期処理</h2>\r\n<h3 id="同期処理と非同期処理">同期処理と非同期処理</h3>\r\n<p>同期処理 : 書いた順に実行される処理</p>\r\n<pre><code>~~~Javascript\r\nconsole.log(&quot;start&quot;);\r\nconsole.log(1 + 1);\r\nconsole.log(&quot;end&quot;);\r\n~~~\r\n</code></pre>\r\n<p>非同期処理 : 必ずしも書いた順には実行されない処理</p>\r\n<pre><code>~~~javascript\r\nconsole.log(&quot;start&quot;);\r\nsetTimeout(function () {\r\n  console.log(1 + 1);\r\n}, 1000);\r\nconsole.log(&quot;end&quot;);\r\n~~~\r\n\r\n非同期処理のあとに任意の処理を実行する方法として、コールバック関数やPromise、Async/Awaitなどがあります。\r\n</code></pre>\r\n<h3 id="redux-thunkによる非同期処理">redux-thunkによる非同期処理</h3>\r\n<p>ReduxではAPIから何かレスポンスが返ってきたら、これをActionとして扱うという作法があります。 これを通常のActionCreatorで記述しようとすると、実はうまく書けません。</p>\r\n<div class="sourceCode" id="cb117"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb117-1" title="1"><span class="kw">const</span> requestAPI <span class="op">=</span> (parameter) <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb117-2" title="2">  <span class="kw">const</span> response <span class="op">=</span> </a>\r\n<a class="sourceLine" id="cb117-3" title="3">    <span class="at">fetch</span>(<span class="st">&#39;APIのURL&#39;</span><span class="op">,</span> parameter).<span class="at">then</span>((response) <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb117-4" title="4">      <span class="co">// ここで返してもうまく動かない</span></a>\r\n<a class="sourceLine" id="cb117-5" title="5">      <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb117-6" title="6">        <span class="dt">type</span><span class="op">:</span> <span class="st">&quot;REQUEST_API&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb117-7" title="7">        <span class="dt">data</span><span class="op">:</span> response</a>\r\n<a class="sourceLine" id="cb117-8" title="8">      <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb117-9" title="9">    <span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb117-10" title="10"><span class="op">};</span></a></code></pre></div>\r\n<p>Action自体は単なるオブジェクトです。これをstore.dispatch()に与えることでActionが実行されます。 どうにかしてdispatch関数をコード中で使いたい。というときにこのミドルウェアの出番です。</p>\r\n<h3 id="thunk-ミドルウェア">thunk ミドルウェア</h3>\r\n<p>Reduxで非同期処理をする代表的なミドルウェア。</p>\r\n<pre><code>&gt; npm install --save redux-thunk\r\n</code></pre>\r\n<p>インストールできたらミドルウェアを適用します。</p>\r\n<div class="sourceCode" id="cb119"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb119-1" title="1"><span class="im">import</span> <span class="op">{</span> createStore<span class="op">,</span> applyMiddleware <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb119-2" title="2"><span class="im">import</span> logger <span class="im">from</span> <span class="st">&#39;redux-logger&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb119-3" title="3"><span class="im">import</span> thunk <span class="im">from</span> <span class="st">&#39;redux-thunk&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb119-4" title="4"><span class="im">import</span> reducers <span class="im">from</span> <span class="st">&#39;./reducers&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb119-5" title="5"></a>\r\n<a class="sourceLine" id="cb119-6" title="6"><span class="kw">const</span> middlewares <span class="op">=</span> [logger<span class="op">,</span> thunk]<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb119-7" title="7"></a>\r\n<a class="sourceLine" id="cb119-8" title="8"><span class="kw">const</span> store <span class="op">=</span> <span class="at">createStore</span>(</a>\r\n<a class="sourceLine" id="cb119-9" title="9">  reducers<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb119-10" title="10">  <span class="at">applyMiddleware</span>(...<span class="at">middlewares</span>)</a>\r\n<a class="sourceLine" id="cb119-11" title="11">)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb119-12" title="12"></a>\r\n<a class="sourceLine" id="cb119-13" title="13"><span class="im">export</span> <span class="im">default</span> store<span class="op">;</span></a></code></pre></div>\r\n<h3 id="非同期アクション">非同期アクション</h3>\r\n<p>thunkミドルウェアの適用により、非同期で実行されるActionを書けるようになりました。</p>\r\n<p>次のコードサンプルで使っているshortidパッケージはユニークなIDを自動で生成してくれるものです。 インストールは <code>npm install --save shortid</code> でできます。</p>\r\n<div class="sourceCode" id="cb120"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb120-1" title="1"><span class="im">import</span> shortid <span class="im">from</span> <span class="st">&#39;shortid&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb120-2" title="2"></a>\r\n<a class="sourceLine" id="cb120-3" title="3"><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> types <span class="im">from</span> <span class="st">&#39;../types/todo&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb120-4" title="4"></a>\r\n<a class="sourceLine" id="cb120-5" title="5"><span class="co">// 同期 ActionCreator</span></a>\r\n<a class="sourceLine" id="cb120-6" title="6"><span class="im">export</span> <span class="kw">function</span> <span class="at">addTodo</span>(title) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb120-7" title="7">  <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb120-8" title="8">    <span class="dt">type</span><span class="op">:</span> <span class="va">types</span>.<span class="at">ADD_TODO</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb120-9" title="9">    <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb120-10" title="10">      <span class="dt">id</span><span class="op">:</span> <span class="va">shortid</span>.<span class="at">generate</span>()<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb120-11" title="11">      title</a>\r\n<a class="sourceLine" id="cb120-12" title="12">    <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb120-13" title="13">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb120-14" title="14"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb120-15" title="15"></a>\r\n<a class="sourceLine" id="cb120-16" title="16"><span class="co">// 非同期 ActionCreator</span></a>\r\n<a class="sourceLine" id="cb120-17" title="17"><span class="im">export</span> <span class="kw">function</span> <span class="at">asyncAddTodo</span>(title) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb120-18" title="18">  <span class="cf">return</span> (dispatch<span class="op">,</span> getState) <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb120-19" title="19">    <span class="at">setTimeout</span>(() <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb120-20" title="20">      <span class="at">dispatch</span>(<span class="at">addTodo</span>(title))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb120-21" title="21">    <span class="op">},</span> <span class="dv">1000</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb120-22" title="22">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb120-23" title="23"><span class="op">}</span></a></code></pre></div>\r\n<p>同期 ActionCreator はActionオブジェクトを返しています。</p>\r\n<p>非同期 ActionCreator は関数を返しています。 thunkミドルウェアにより、通常のActionオブジェクト以外に関数を返せるようになります。 ここで返した関数は、引数としてdispatch関数とgetState関数を取ります。</p>\r\n<p>dispatch関数はActionオブジェクトを受け取りさえすれば、同期的にreducerに処理を移します。</p>\r\n<p>dispatch関数にさらに関数を渡すこともできます。このときも関数の引数としてdispatch関数とgetState関数を取ります。</p>\r\n<p>ポイント : Reduxアプリでは、最終的にdispatch関数にActionオブジェクトを渡せばreducerに処理が移るという原則がある。</p>\r\n<h3 id="thunk-と-promiseasyncawait">thunk と Promise、Async/Await</h3>\r\n<p>Promise :<br />\r\n~~~javascript const sleep1000ms = () =&gt; { return new Promise(resolve =&gt; { setTimeout(() =&gt; { resolve(); }, 1000); }); };</p>\r\n<pre><code>export function addTodo(title) {\r\n  return {\r\n    type: types.ADD_TODO,\r\n    payload: {\r\n      id: shortid.generate(),\r\n      title,\r\n    },\r\n  };\r\n}\r\n\r\n// Promise 版\r\nexport function asyncAddTodo(title) {\r\n  return (dispatch) =&gt; {\r\n    sleep1000ms().then(() =&gt; {\r\n      dispatch(addTodo(title));\r\n    });\r\n  };\r\n}\r\n~~~\r\n</code></pre>\r\n<p>Async/Await :<br />\r\n~~~javascript const sleep1000ms = () =&gt; { ... 上記サンプルと同じ };</p>\r\n<pre><code>export function addTodo(title) {\r\n  ... 上記サンプルと同じ\r\n}\r\n\r\n// Async/Await 版\r\nexport function asyncAddTodo(title) {\r\n  return async(dispatch) =&gt; {\r\n    await sleep1000ms();\r\n    dispatch(addTodo(title));\r\n  };\r\n}\r\n~~~\r\n</code></pre>\r\n<h3 id="複数のアクションをまとめる">複数のアクションをまとめる</h3>\r\n<p>通常のActionCreatorでは、1つの関数では1つのActionしか返せませんでした。 thunkはこれらを1つにまとめたActionとして返すことができます。</p>\r\n<div class="sourceCode" id="cb123"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb123-1" title="1"><span class="kw">function</span> <span class="at">addTodo</span>(title) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb123-2" title="2">  <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb123-3" title="3">    <span class="dt">type</span><span class="op">:</span> <span class="va">types</span>.<span class="at">ADD_TODO</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb123-4" title="4">    <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb123-5" title="5">      <span class="dt">id</span><span class="op">:</span> <span class="va">shortid</span>.<span class="at">generate</span>()<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb123-6" title="6">      title<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb123-7" title="7">    <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb123-8" title="8">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb123-9" title="9"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb123-10" title="10"></a>\r\n<a class="sourceLine" id="cb123-11" title="11"><span class="kw">function</span> <span class="at">updateInput</span>(value) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb123-12" title="12">  <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb123-13" title="13">    <span class="dt">type</span><span class="op">:</span> <span class="va">types</span>.<span class="at">UPDATE_INPUT</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb123-14" title="14">    <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb123-15" title="15">      value<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb123-16" title="16">    <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb123-17" title="17">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb123-18" title="18"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb123-19" title="19"></a>\r\n<a class="sourceLine" id="cb123-20" title="20"><span class="co">// 上の2つのActionを1つにまとめる</span></a>\r\n<a class="sourceLine" id="cb123-21" title="21"><span class="co">// これをReactコンポーネントにバインドする</span></a>\r\n<a class="sourceLine" id="cb123-22" title="22"><span class="im">export</span> <span class="kw">function</span> <span class="at">addTodoAndClear</span>(title) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb123-23" title="23">  <span class="cf">return</span> (dispatch) <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb123-24" title="24">    <span class="at">dispatch</span>(<span class="at">addTodo</span>(title))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb123-25" title="25">    <span class="at">dispatch</span>(<span class="at">updateInput</span>(<span class="st">&#39;&#39;</span>))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb123-26" title="26">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb123-27" title="27"><span class="op">}</span></a></code></pre></div>\r\n<p>1つの操作で複数の処理を行うときのアプローチとして、以下が考えられます。</p>\r\n<ul>\r\n<li>ActionCreatorでまとめる。</li>\r\n<li>1つのActionとして記述し、reducerで2つの操作を行う。</li>\r\n<li>複数のActionをReactコンポーネントのボタンにバインドする。</li>\r\n</ul>\r\n<p>ActionCreatorでまとめるのがベターな方法です。 理由は次の2つです。</p>\r\n<ol>\r\n<li><p>それぞれのActionの処理を独立して考えられる。</p>\r\n<p>サンプルコードの場合、TODOを追加することと、フォームをクリアすることに直接の関係はありません。 TODOをコピーするときなどフォームを使わずにTODOを追加する方法を増やすときは、addTodo関数については再利用ができそうです。</p></li>\r\n<li><p>ActionCreatorをユーザー操作とひも付けられる。</p>\r\n<p>ActionCreatorはContainerコンポーネントからpropsとしてUI要素を持つプレゼンテーショナルコンポーネントに渡されるはずです。 このとき、プレゼンテーショナルコンポーネントは「このボタンを押すと何が起きるかはわからないが、渡された関数を叩けばよい」というように作られているべきです。</p>\r\n<p>ボタンを押したら「TODOを追加する関数を叩く」のと「フォームをクリアする関数を叩く」ことをプレゼンテーショナルコンポーネントに書いてしまうと、コンポーネントはビジネスロジックや仕様を反映し、汎用性を失ってしまいます。</p></li>\r\n</ol>\r\n<h3 id="getstate関数">getState関数</h3>\r\n<p>getState関数はstoreが持つ関数と同一で、すべてのstateを返します。 ActionCreator内でstoreの内容を知ることで、できることが広がります。</p>\r\n<p>たとえば、登録済みのTODOは追加しないようにする。など。</p>\r\n<div class="sourceCode" id="cb124"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb124-1" title="1"><span class="im">export</span> <span class="kw">function</span> <span class="at">addUniqueTodo</span>(title) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb124-2" title="2">  <span class="cf">return</span> (dispatch<span class="op">,</span> getState) <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb124-3" title="3">    <span class="kw">const</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb124-4" title="4">      <span class="dt">todo</span><span class="op">:</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb124-5" title="5">        todos<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb124-6" title="6">      <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb124-7" title="7">    <span class="op">}</span> <span class="op">=</span> <span class="at">getState</span>()<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb124-8" title="8">    </a>\r\n<a class="sourceLine" id="cb124-9" title="9">    <span class="co">// stateに保存されたTodoに同一のタイトルがあったら登録済み</span></a>\r\n<a class="sourceLine" id="cb124-10" title="10">    <span class="kw">const</span> isDuplicated <span class="op">=</span> <span class="va">todos</span>.<span class="at">some</span>(todo <span class="op">=&gt;</span> <span class="va">todo</span>.<span class="at">title</span> <span class="op">===</span> title)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb124-11" title="11">    </a>\r\n<a class="sourceLine" id="cb124-12" title="12">    <span class="cf">if</span> (isDuplicated) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb124-13" title="13">      <span class="cf">return</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb124-14" title="14">    <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb124-15" title="15">    <span class="at">dispatch</span>(<span class="at">addTodo</span>(title))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb124-16" title="16">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb124-17" title="17"><span class="op">}</span></a></code></pre></div>\r\n<p>この処理はReducerでもできますが、ActionCreatorで処理すると次のメリットがあります。</p>\r\n<ol>\r\n<li><p>すべてのstateを参照できる</p>\r\n<p>分割されたReducerは、ほかのReducerが持っているstateを参照することができません。 ほかのReducerが持っているstateを使ってActionの動作を振り分けたいときは、ActionCreatorでgetStateするのがよいでしょう。</p></li>\r\n<li><p>Action、Reducerの処理を簡潔にできる</p>\r\n<p>〝ActionをどうDispatchするか〟の部分をActionCreatorとして切り出しておくことで、アクションとそれに対応するReducerの処理を簡潔にできます。</p></li>\r\n</ol>\r\n<h2 id="uiをきれいにする">UIをきれいにする</h2>\r\n<h3 id="style属性を使う方法">style属性を使う方法</h3>\r\n<p>※style属性を使っての指定は非推奨です。</p>\r\n<ul>\r\n<li><p>JSXのstyle属性を使って、直接スタイルを適用できる。</p></li>\r\n<li><p>オブジェクトのキーにCSSプロパティをキャメルケースで指定、オブジェクトの値にCSSの値を指定します。</p></li>\r\n<li><p>値にNumber型を指定したときは自動でpxが追加されます。px以外の単位を指定するときは、単位付きの値を文字列で指定します。</p>\r\n<div class="sourceCode" id="cb125"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb125-1" title="1"><span class="co">// font-size: 20px</span></a>\r\n<a class="sourceLine" id="cb125-2" title="2"><span class="op">&lt;</span>div style<span class="op">={{</span> <span class="dt">fontSize</span><span class="op">:</span> <span class="dv">20</span> <span class="op">}}&gt;</span></a>\r\n<a class="sourceLine" id="cb125-3" title="3">  Hello World</a>\r\n<a class="sourceLine" id="cb125-4" title="4">&lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb125-5" title="5"></a>\r\n<a class="sourceLine" id="cb125-6" title="6"><span class="co">// font-size: 2em</span></a>\r\n<a class="sourceLine" id="cb125-7" title="7"><span class="op">&lt;</span>div style<span class="op">={{</span> <span class="dt">fontSize</span><span class="op">:</span> <span class="st">&quot;2em&quot;</span> <span class="op">}}&gt;</span></a>\r\n<a class="sourceLine" id="cb125-8" title="8">  Hello World</a>\r\n<a class="sourceLine" id="cb125-9" title="9">&lt;/div<span class="op">&gt;</span></a></code></pre></div></li>\r\n<li><p>ベンダープレフィクスは自動で付与されません。自分で指定する必要があります。</p>\r\n<div class="sourceCode" id="cb126"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb126-1" title="1"><span class="kw">const</span> style <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb126-2" title="2">  <span class="co">// ベンダープレフィクス付きのスタイル</span></a>\r\n<a class="sourceLine" id="cb126-3" title="3">  <span class="dt">WebkitTransition</span><span class="op">:</span> <span class="st">&quot;all&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb126-4" title="4">  <span class="co">// 通常のスタイル</span></a>\r\n<a class="sourceLine" id="cb126-5" title="5">  <span class="dt">transition</span><span class="op">:</span> <span class="st">&quot;all&quot;</span></a>\r\n<a class="sourceLine" id="cb126-6" title="6"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb126-7" title="7"></a>\r\n<a class="sourceLine" id="cb126-8" title="8"><span class="kw">const</span> HelloWorldComponent <span class="op">=</span> () <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb126-9" title="9">  <span class="cf">return</span> <span class="op">&lt;</span>div style<span class="op">={</span> style <span class="op">}&gt;</span>Hello World&lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb126-10" title="10"><span class="op">}</span></a></code></pre></div></li>\r\n</ul>\r\n<h3 id="classname属性を使う方法">className属性を使う方法</h3>\r\n<p>JSXのclassName属性を使って、CSSクラスの指定ができます。className属性に指定した内容が、HTMLのclass属性となります。</p>\r\n<div class="sourceCode" id="cb127"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb127-1" title="1"><span class="kw">const</span> Button <span class="op">=</span> () <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb127-2" title="2">  <span class="cf">return</span> <span class="op">&lt;</span>button className<span class="op">=</span><span class="st">&quot;normal-button&quot;</span><span class="op">&gt;</span>追加&lt;/button<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb127-3" title="3"><span class="op">}</span></a></code></pre></div>\r\n\x3c!-- TODO: p.169 リスト9.4　<button>要素で始まっているのに、閉じタグが</div>　リスト9.6も同様 --\x3e\r\n\r\n<p><code>webpack</code>、<code>css-loader</code>、<code>style-loader</code>などのライブラリを組み合わせることで、JavaScriptからCSSファイルの読み込みができるようになります。 <code>create-react-app</code>では、標準でCSSファイルのインポートがサポートされています。</p>\r\n<div class="sourceCode" id="cb128"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb128-1" title="1"><span class="im">import</span> <span class="st">&quot;./style.css&quot;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb128-2" title="2"></a>\r\n<a class="sourceLine" id="cb128-3" title="3"><span class="kw">const</span> Button <span class="op">=</span> () <span class="op">=&gt;</span></a>\r\n<a class="sourceLine" id="cb128-4" title="4">  <span class="op">&lt;</span>button className<span class="op">=</span><span class="st">&quot;normal-button&quot;</span><span class="op">&gt;</span>追加&lt;/button<span class="op">&gt;;</span></a>\r\n<a class="sourceLine" id="cb128-5" title="5"></a>\r\n<a class="sourceLine" id="cb128-6" title="6"><span class="im">export</span> <span class="im">default</span> Button<span class="op">;</span></a></code></pre></div>\r\n<h3 id="uiライブラリを使う">UIライブラリを使う</h3>\r\n<ul>\r\n<li><p>Material-UI</p>\r\n<p>マテリアルデザインに沿って作られたUIライブラリ。</p></li>\r\n<li><p>React-Bootstrap</p>\r\n<p>BootstrapをReact向けのUIライブラリとして実装したもの。</p></li>\r\n<li><p>React Desktop</p>\r\n<p>デスクトップネイティブアプリの開発を想定したReact向けUIライブラリ。 Electronなどで利用します。</p></li>\r\n<li><p>Onsen UI</p>\r\n<p>ネイティブアプリライクなモバイルウェブアプリの作成に特化したUIライブラリ。</p></li>\r\n</ul>\r\n<h3 id="material-ui">Material-UI</h3>\r\n<p>マテリアルデザインに則ったUIを簡単に実装することができます。 ボタンやフォームなどの基本的なUIパーツが網羅されています。</p>\r\n<p>各UIパーツはReactコンポーネントとして実装されており、props経由でコンポーネントをカスタマイズできます。</p>\r\n<p>パッケージは、次のコマンドでインストールできます。</p>\r\n<p>こちらだと v0.20.0 がインストールされます。</p>\r\n<pre><code>&gt; npm install --save material-ui\r\n</code></pre>\r\n<p>最新をインストールしたければ次のコマンドにします。 2018年3月8日時点で v1.0.0-beta.36がインストールされました。</p>\r\n<pre><code>&gt; npm install --save material-ui@next\r\n</code></pre>\r\n<p>※以降のサンプルは<code>@next</code>でインストールしたものを対象としています。</p>\r\n<h4 id="使い方">使い方</h4>\r\n<p><code>src/components/TodoApp.js</code>を修正します。</p>\r\n<ol>\r\n<li><p>インポートを追加します。</p>\r\n<div class="sourceCode" id="cb131"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb131-1" title="1"><span class="im">import</span> Reboot <span class="im">from</span> <span class="st">&#39;material-ui/Reboot&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb131-2" title="2"><span class="im">import</span> Button <span class="im">from</span> <span class="st">&#39;material-ui/Button&#39;</span><span class="op">;</span></a></code></pre></div></li>\r\n<li><p>Rebootコンポーネントを追加します。 場所はどこでもよいですが、今回はルート要素の最初の子要素にしました。</p>\r\n<div class="sourceCode" id="cb132"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb132-1" title="1"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">TodoApp</span>(<span class="op">{</span> task<span class="op">,</span> tasks<span class="op">,</span> inputTask<span class="op">,</span> addTask<span class="op">,</span> redirectToError <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb132-2" title="2">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb132-3" title="3">    <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb132-4" title="4">      <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;text&quot;</span> onChange<span class="op">={</span>(e) <span class="op">=&gt;</span> <span class="at">inputTask</span>(<span class="va">e</span>.<span class="va">target</span>.<span class="at">value</span>)<span class="op">}</span> /&gt;</a></code></pre></div>\r\n<p>↓</p>\r\n<div class="sourceCode" id="cb133"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb133-1" title="1"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">TodoApp</span>(<span class="op">{</span> task<span class="op">,</span> tasks<span class="op">,</span> inputTask<span class="op">,</span> addTask<span class="op">,</span> redirectToError <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb133-2" title="2"> <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb133-3" title="3">   <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb133-4" title="4">     <span class="op">&lt;</span>Reboot /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb133-5" title="5">     <span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;text&quot;</span> onChange<span class="op">={</span>(e) <span class="op">=&gt;</span> <span class="at">inputTask</span>(<span class="va">e</span>.<span class="va">target</span>.<span class="at">value</span>)<span class="op">}</span> /&gt;</a></code></pre></div></li>\r\n<li><p>input要素で作っていたボタンを、Buttonコンポーネントに変更します。</p>\r\n<div class="sourceCode" id="cb134"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb134-1" title="1"><span class="op">&lt;</span>input type<span class="op">=</span><span class="st">&quot;button&quot;</span> value<span class="op">=</span><span class="st">&quot;add&quot;</span> onClick<span class="op">={</span>() <span class="op">=&gt;</span> <span class="at">addTask</span>(task)<span class="op">}</span> /&gt;</a></code></pre></div>\r\n<p>↓</p>\r\n<div class="sourceCode" id="cb135"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb135-1" title="1"><span class="op">&lt;</span>Button variant<span class="op">=</span><span class="st">&quot;raised&quot;</span> className<span class="op">=</span><span class="st">&quot;default&quot;</span> onClick<span class="op">={</span>() <span class="op">=&gt;</span> <span class="at">addTask</span>(task)<span class="op">}&gt;</span>add&lt;/Button<span class="op">&gt;</span></a></code></pre></div></li>\r\n</ol>\r\n<h2 id="note">Note</h2>\r\n<h3 id="reduxの三原則">Reduxの三原則</h3>\r\n<p>Single source of truth : アプリケーション内のすべての状態を一つの大きなオブジェクトとして管理します。</p>\r\n<p>State in read-only : アプリケーションの状態はコンポーネントから直接参照できますが、直接変更することはできません。 Action（どんな動作を行ったのかを示す単純なオブジェクト）をdispatch（発行）することが、アプリケーションの状態を変更する唯一の方法です。</p>\r\n<p>Changes are made with pure functions : アプリケーションの状態の変更は、副作用のない純粋関数によって行われます。 〝純粋関数〟とは〝同じ入力を渡せば、同じ出力が得られる関数〟のことです。</p>\r\n<h3 id="ie11-arrayprototypefind-メソッドがエラーになる">IE11 Array.prototype.find メソッドがエラーになる</h3>\r\n<p>IE11 では Array.prototype.find メソッドがサポートされていないのでエラーになります。</p>\r\n<p>対応させるためには Polyfill で代替コードを実装する必要があります。</p>\r\n<h2 id="一連の流れを通しで">一連の流れを通しで</h2>\r\n<ol>\r\n<li><p>プロジェクトを作成して、ルートフォルダに移動します。</p>\r\n<pre><code>&gt; .\\node_modules\\.bin\\create-react-app app-1st\r\n&gt; cd app-1st\r\n</code></pre></li>\r\n<li><p>propTypesをインストールします。</p>\r\n<pre><code>&gt; npm install --save prop-types\r\n</code></pre>\r\n<p>propTypesはpropsの型チェック機能を持つパッケージです。</p></li>\r\n<li><p>アプリケーションを開発モードで起動します。</p>\r\n<p>ブラウザが自動で起動して、<code>http://localhost:3000/</code>にアクセスします。</p>\r\n<pre><code>&gt; npm start\r\n</code></pre></li>\r\n<li><p>ファイル/フォルダ構成に則り、フォルダを作ります。 あとから作り直せばいいので、構成はあまり悩まなくてよいです。</p>\r\n<p>今回はサンプルと同じにします。</p>\r\n<pre><code>src/\r\n+---index.js  ... エントリポイント\r\n+---App.js    ... ルートコンポーネント\r\n+---components/\r\n|     ... Presentational Component を置く\r\n+---containers/\r\n|     ... Container Component を置く\r\n+---actions/\r\n|     ... ActionCreator を置く\r\n+---reducers/\r\n|     ... Reducer を置く\r\n`---store/\r\n      ... Store を置く（createStore関数）\r\n</code></pre>\r\n<pre><code>&gt; mkdir .\\src\\containers\r\n&gt; mkdir .\\src\\components\r\n&gt; mkdir .\\src\\actions\r\n&gt; mkdir .\\src\\reducers\r\n&gt; mkdir .\\src\\store\r\n</code></pre></li>\r\n<li><p>Reduxをインストールします。</p>\r\n<p>Reduxを開発で使う場合、開発が進んでからインストールするのは導入コストが高くなるため、開発開始時に導入しておきます。</p>\r\n<pre><code>&gt; npm install --save redux react-redux redux-logger\r\n</code></pre>\r\n<p>ReduxのStoreの作成にはReducerが必要です。 ［<code>src\\reducers\\index.js</code>］にReducerを追加します。</p>\r\n<p>この時点では、単純に受け取ったstateをそのまま返すReducerを定義しておきます。</p>\r\n<p>1つのReducerでアプリケーションが完結することはまずないので、［<code>src\\reducers\\index.js</code>］に各Reducerの参照を束ねて、<code>import * as reducers from "./reducers"</code>でまとめてimportできる作りにしておきます。</p>\r\n<div class="sourceCode" id="cb142"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb142-1" title="1"><span class="co">// 受け取ったstateをそのまま返すReducer</span></a>\r\n<a class="sourceLine" id="cb142-2" title="2"><span class="im">export</span> <span class="kw">const</span> noop <span class="op">=</span> (state <span class="op">=</span> <span class="op">{}</span>) <span class="op">=&gt;</span> state<span class="op">;</span></a></code></pre></div>\r\n<p>[<code>src\\store\\index.js</code>]にreduxのcreateStore関数を定義します。</p>\r\n<div class="sourceCode" id="cb143"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb143-1" title="1"><span class="im">import</span> <span class="op">{</span> createStore<span class="op">,</span> combineReducers<span class="op">,</span> applyMiddleware <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb143-2" title="2"><span class="im">import</span> logger <span class="im">from</span> <span class="st">&#39;redux-logger&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb143-3" title="3"><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> reducers <span class="im">from</span> <span class="st">&#39;../reducers&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb143-4" title="4"></a>\r\n<a class="sourceLine" id="cb143-5" title="5"><span class="co">// Storeを生成するための関数を定義</span></a>\r\n<a class="sourceLine" id="cb143-6" title="6"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">createStoreEx</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb143-7" title="7">  <span class="cf">return</span> <span class="at">createStore</span>(</a>\r\n<a class="sourceLine" id="cb143-8" title="8">    <span class="co">// 複数のReducerをまとめる</span></a>\r\n<a class="sourceLine" id="cb143-9" title="9">    <span class="at">combineReducers</span>(reducers)<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb143-10" title="10">    <span class="co">// ミドルウェアを適用する</span></a>\r\n<a class="sourceLine" id="cb143-11" title="11">    <span class="at">applyMiddleware</span>(logger)</a>\r\n<a class="sourceLine" id="cb143-12" title="12">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb143-13" title="13"><span class="op">}</span></a></code></pre></div>\r\n<p>［<code>src\\index.js</code>］でStoreを生成し、react-reduxのProviderコンポーネントでAppコンポーネントに関連付ける処理を記述します。</p>\r\n<div class="sourceCode" id="cb144"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb144-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb144-2" title="2"><span class="im">import</span> ReactDOM <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb144-3" title="3"><span class="im">import</span> <span class="op">{</span> Provider <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb144-4" title="4"><span class="im">import</span> App <span class="im">from</span> <span class="st">&#39;./App&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb144-5" title="5"><span class="im">import</span> createStoreEx <span class="im">from</span> <span class="st">&#39;./store&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb144-6" title="6"></a>\r\n<a class="sourceLine" id="cb144-7" title="7"><span class="co">// Storeの生成</span></a>\r\n<a class="sourceLine" id="cb144-8" title="8"><span class="kw">const</span> store <span class="op">=</span> <span class="at">createStoreEx</span>()<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb144-9" title="9"></a>\r\n<a class="sourceLine" id="cb144-10" title="10"><span class="va">ReactDOM</span>.<span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb144-11" title="11">  <span class="co">// Providerコンポーネントを使って、StoreをAppコンポーネントに関連付ける</span></a>\r\n<a class="sourceLine" id="cb144-12" title="12">  <span class="op">&lt;</span>Provider store<span class="op">={</span>store<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb144-13" title="13">    <span class="op">&lt;</span>App /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb144-14" title="14">  &lt;/Provider<span class="op">&gt;,</span></a>\r\n<a class="sourceLine" id="cb144-15" title="15">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;root&#39;</span>)</a>\r\n<a class="sourceLine" id="cb144-16" title="16">)<span class="op">;</span></a></code></pre></div></li>\r\n<li><p>ルーティングライブラリの導入</p>\r\n<p>こちらも開発開始時に導入しておきます。</p>\r\n<p>Note : 最新版の React Router （ver 4.x）に対応した react-router-redux パッケージのバージョンは ver 5.x なので、<code>@next</code>をつけてインストールします（2018年3月8日時点）。</p>\r\n<pre><code>&gt; npm install --save react-router-dom history react-router-redux@next\r\n</code></pre>\r\n<p>Storeを生成する関数に、routerReducerとrouterMiddlewareを追加します。</p>\r\n<p>[<code>src\\store\\index.js</code>]</p>\r\n<div class="sourceCode" id="cb146"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb146-1" title="1"><span class="im">import</span> <span class="op">{</span> createStore<span class="op">,</span> combineReducers<span class="op">,</span> applyMiddleware <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb146-2" title="2"><span class="im">import</span> logger <span class="im">from</span> <span class="st">&#39;redux-logger&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb146-3" title="3"><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> reducers <span class="im">from</span> <span class="st">&#39;../reducers&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb146-4" title="4"><span class="im">import</span> <span class="op">{</span> routerReducer<span class="op">,</span> routerMiddleware <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb146-5" title="5"></a>\r\n<a class="sourceLine" id="cb146-6" title="6"><span class="co">// Storeを生成するための関数を定義</span></a>\r\n<a class="sourceLine" id="cb146-7" title="7"><span class="co">// history は src/index.js から受け渡す</span></a>\r\n<a class="sourceLine" id="cb146-8" title="8"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">createStoreEx</span>(history) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb146-9" title="9">  <span class="cf">return</span> <span class="at">createStore</span>(</a>\r\n<a class="sourceLine" id="cb146-10" title="10">    <span class="co">// 複数のReducerをまとめる</span></a>\r\n<a class="sourceLine" id="cb146-11" title="11">    <span class="co">//   ・自前で定義したReducer</span></a>\r\n<a class="sourceLine" id="cb146-12" title="12">    <span class="co">//   ・react-router-redux の Reducer</span></a>\r\n<a class="sourceLine" id="cb146-13" title="13">    <span class="at">combineReducers</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb146-14" title="14">      ...<span class="at">reducers</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb146-15" title="15">      <span class="dt">router</span><span class="op">:</span> routerReducer<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb146-16" title="16">    <span class="op">}</span>)<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb146-17" title="17">    <span class="co">// ミドルウェアを適用する</span></a>\r\n<a class="sourceLine" id="cb146-18" title="18">    <span class="co">// react-router-redux の Redux Middleware</span></a>\r\n<a class="sourceLine" id="cb146-19" title="19">    <span class="at">applyMiddleware</span>(</a>\r\n<a class="sourceLine" id="cb146-20" title="20">      logger<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb146-21" title="21">      <span class="at">routerMiddleware</span>(history)</a>\r\n<a class="sourceLine" id="cb146-22" title="22">    )</a>\r\n<a class="sourceLine" id="cb146-23" title="23">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb146-24" title="24"><span class="op">}</span></a></code></pre></div>\r\n<p>[<code>src\\index.js</code>]</p>\r\n<div class="sourceCode" id="cb147"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb147-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb147-2" title="2"><span class="im">import</span> ReactDOM <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb147-3" title="3"><span class="im">import</span> <span class="op">{</span> Provider <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb147-4" title="4"><span class="im">import</span> <span class="op">{</span> ConnectedRouter <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb147-5" title="5"><span class="im">import</span> createBrowserHistory <span class="im">from</span> <span class="st">&#39;history/createBrowserHistory&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb147-6" title="6"><span class="im">import</span> App <span class="im">from</span> <span class="st">&#39;./App&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb147-7" title="7"><span class="im">import</span> createStoreEx <span class="im">from</span> <span class="st">&#39;./store&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb147-8" title="8"></a>\r\n<a class="sourceLine" id="cb147-9" title="9"><span class="co">// history のインスタンスを生成</span></a>\r\n<a class="sourceLine" id="cb147-10" title="10"><span class="kw">const</span> history <span class="op">=</span> <span class="at">createBrowserHistory</span>()<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb147-11" title="11"></a>\r\n<a class="sourceLine" id="cb147-12" title="12"><span class="co">// Storeの生成</span></a>\r\n<a class="sourceLine" id="cb147-13" title="13"><span class="kw">const</span> store <span class="op">=</span> <span class="at">createStoreEx</span>(history)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb147-14" title="14"></a>\r\n<a class="sourceLine" id="cb147-15" title="15"><span class="va">ReactDOM</span>.<span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb147-16" title="16">  <span class="co">// Providerコンポーネントを使って、StoreをAppコンポーネントに関連付ける</span></a>\r\n<a class="sourceLine" id="cb147-17" title="17">  <span class="op">&lt;</span>Provider store<span class="op">={</span>store<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb147-18" title="18">    <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb147-19" title="19">      <span class="co">/* Link コンポーネントなどが動作するように、</span></a>\r\n<a class="sourceLine" id="cb147-20" title="20"><span class="co">         react-router-dom の Router ではなく</span></a>\r\n<a class="sourceLine" id="cb147-21" title="21"><span class="co">         react-router-redux の ConnectedRouter を使う</span></a>\r\n<a class="sourceLine" id="cb147-22" title="22"><span class="co">       */</span></a>\r\n<a class="sourceLine" id="cb147-23" title="23">    <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb147-24" title="24">    <span class="op">&lt;</span>ConnectedRouter history<span class="op">={</span>history<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb147-25" title="25">      <span class="op">&lt;</span>App /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb147-26" title="26">    &lt;/ConnectedRouter<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb147-27" title="27">  &lt;/Provider<span class="op">&gt;,</span></a>\r\n<a class="sourceLine" id="cb147-28" title="28">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;root&#39;</span>)</a>\r\n<a class="sourceLine" id="cb147-29" title="29">)<span class="op">;</span></a></code></pre></div></li>\r\n<li><p>ルーティングの実装</p>\r\n<p>コンポーネントを作ります。</p>\r\n<p>[<code>src\\components\\Ranking.js</code>]</p>\r\n<div class="sourceCode" id="cb148"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb148-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb148-2" title="2"><span class="im">import</span> PropTypes <span class="im">from</span> <span class="st">&#39;prop-types&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb148-3" title="3"></a>\r\n<a class="sourceLine" id="cb148-4" title="4"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">Ranking</span>(<span class="op">{</span> categoryId <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb148-5" title="5">  <span class="co">// </span><span class="al">TODO</span><span class="co">: 最終的には categoryId をもとにAPIから情報を取得する</span></a>\r\n<a class="sourceLine" id="cb148-6" title="6">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb148-7" title="7">    <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb148-8" title="8">      <span class="op">&lt;</span>h2<span class="op">&gt;</span>Ranking Component&lt;/h2<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb148-9" title="9">      <span class="op">&lt;</span>p<span class="op">&gt;</span>Category <span class="dt">Id</span><span class="op">:</span> <span class="op">{</span>categoryId<span class="op">}</span>&lt;/p<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb148-10" title="10">    &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb148-11" title="11">  )</a>\r\n<a class="sourceLine" id="cb148-12" title="12"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb148-13" title="13"></a>\r\n<a class="sourceLine" id="cb148-14" title="14"><span class="co">// propsのデータ型を定義</span></a>\r\n<a class="sourceLine" id="cb148-15" title="15"><span class="va">Ranking</span>.<span class="at">propTypes</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb148-16" title="16">  <span class="dt">categoryId</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">string</span></a>\r\n<a class="sourceLine" id="cb148-17" title="17"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb148-18" title="18"></a>\r\n<a class="sourceLine" id="cb148-19" title="19"><span class="co">// 未指定時の既定値を定義</span></a>\r\n<a class="sourceLine" id="cb148-20" title="20"><span class="va">Ranking</span>.<span class="at">defaultProps</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb148-21" title="21">  <span class="dt">categoryId</span><span class="op">:</span> <span class="st">&quot;1&quot;</span></a>\r\n<a class="sourceLine" id="cb148-22" title="22"><span class="op">};</span></a></code></pre></div>\r\n<p>ルーティングの設定は [<code>src\\App.js</code>] に記述します。</p>\r\n<div class="sourceCode" id="cb149"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb149-1" title="1"><span class="im">import</span> React<span class="op">,</span> <span class="op">{</span> Component <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb149-2" title="2"><span class="im">import</span> <span class="op">{</span> Route<span class="op">,</span> Link <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-dom&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb149-3" title="3"><span class="im">import</span> Ranking <span class="im">from</span> <span class="st">&#39;./components/Ranking&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb149-4" title="4"></a>\r\n<a class="sourceLine" id="cb149-5" title="5"><span class="kw">class</span> App <span class="kw">extends</span> Component <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb149-6" title="6">  <span class="at">render</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb149-7" title="7">    <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb149-8" title="8">      <span class="op">&lt;</span>div className<span class="op">=</span><span class="st">&quot;App&quot;</span><span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb149-9" title="9">        <span class="op">{</span> <span class="co">/* カテゴリ名、IDはハードコード。本来であればAPIから取得するのが望ましい。 */</span> <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb149-10" title="10">        <span class="op">&lt;</span>ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb149-11" title="11">          <span class="op">&lt;</span>li<span class="op">&gt;&lt;</span>Link to<span class="op">=</span><span class="st">&quot;/all&quot;</span><span class="op">&gt;</span>Category All&lt;/Link<span class="op">&gt;</span>&lt;/li<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb149-12" title="12">          <span class="op">&lt;</span>li<span class="op">&gt;&lt;</span>Link to<span class="op">=</span><span class="st">&quot;/category/2502&quot;</span><span class="op">&gt;</span>Category <span class="dv">2502</span>&lt;/Link<span class="op">&gt;</span>&lt;/li<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb149-13" title="13">          <span class="op">&lt;</span>li<span class="op">&gt;&lt;</span>Link to<span class="op">=</span><span class="st">&quot;/category/10002&quot;</span><span class="op">&gt;</span>Category <span class="dv">10002</span>&lt;/Link<span class="op">&gt;</span>&lt;/li<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb149-14" title="14">        &lt;/ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb149-15" title="15">        </a>\r\n<a class="sourceLine" id="cb149-16" title="16">        <span class="op">&lt;</span>Route path<span class="op">=</span><span class="st">&quot;/all&quot;</span> component<span class="op">={</span>Ranking<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb149-17" title="17">        <span class="op">&lt;</span>Route</a>\r\n<a class="sourceLine" id="cb149-18" title="18">          path<span class="op">=</span><span class="st">&quot;/category/:id&quot;</span></a>\r\n<a class="sourceLine" id="cb149-19" title="19">          render<span class="op">={</span></a>\r\n<a class="sourceLine" id="cb149-20" title="20">            (<span class="op">{</span> match <span class="op">}</span>) <span class="op">=&gt;</span> <span class="op">&lt;</span>Ranking categoryId<span class="op">={</span><span class="va">match</span>.<span class="va">params</span>.<span class="at">id</span><span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb149-21" title="21">          <span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb149-22" title="22">      &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb149-23" title="23">    )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb149-24" title="24">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb149-25" title="25"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb149-26" title="26"></a>\r\n<a class="sourceLine" id="cb149-27" title="27"><span class="im">export</span> <span class="im">default</span> App<span class="op">;</span></a></code></pre></div></li>\r\n<li><p>非同期処理の実装</p>\r\n<p>インストール</p>\r\n<pre><code>&gt; npm install --save redux-thunk fetch-jsonp qs\r\n</code></pre>\r\n<p>fetch-jsonp : XMLHttpRequestの後継であるfetch関数と同じインターフェースでJSONPのAPIで通信できるライブラリ。</p>\r\n<p>qs : URLのクエリ文字列（URLの ? のあとにつく key=value&amp;hoge=fuga の部分）を扱うライブラリ。</p>\r\n<p>ミドルウェアに redux-thunk を追加するため、[<code>src\\store\\index.js</code>]を修正します。</p>\r\n<div class="sourceCode" id="cb151"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb151-1" title="1"><span class="im">import</span> <span class="op">{</span> createStore<span class="op">,</span> combineReducers<span class="op">,</span> applyMiddleware <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb151-2" title="2"><span class="im">import</span> logger <span class="im">from</span> <span class="st">&#39;redux-logger&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb151-3" title="3"><span class="im">import</span> thunk <span class="im">from</span> <span class="st">&#39;redux-thunk&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb151-4" title="4"><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> reducers <span class="im">from</span> <span class="st">&#39;../reducers&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb151-5" title="5"><span class="im">import</span> <span class="op">{</span> routerReducer<span class="op">,</span> routerMiddleware <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb151-6" title="6"></a>\r\n<a class="sourceLine" id="cb151-7" title="7"><span class="co">// Storeを生成するための関数を定義</span></a>\r\n<a class="sourceLine" id="cb151-8" title="8"><span class="co">// history は src/index.js から受け渡す</span></a>\r\n<a class="sourceLine" id="cb151-9" title="9"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">createStoreEx</span>(history) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb151-10" title="10">  <span class="cf">return</span> <span class="at">createStore</span>(</a>\r\n<a class="sourceLine" id="cb151-11" title="11">    <span class="co">// 複数のReducerをまとめる</span></a>\r\n<a class="sourceLine" id="cb151-12" title="12">    <span class="co">//   ・自前で定義したReducer</span></a>\r\n<a class="sourceLine" id="cb151-13" title="13">    <span class="co">//   ・react-router-redux の Reducer</span></a>\r\n<a class="sourceLine" id="cb151-14" title="14">    <span class="at">combineReducers</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb151-15" title="15">      ...<span class="at">reducers</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb151-16" title="16">      <span class="dt">router</span><span class="op">:</span> routerReducer<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb151-17" title="17">    <span class="op">}</span>)<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb151-18" title="18">    <span class="co">// ミドルウェアを適用する</span></a>\r\n<a class="sourceLine" id="cb151-19" title="19">    <span class="co">// react-router-redux の Redux Middleware</span></a>\r\n<a class="sourceLine" id="cb151-20" title="20">    <span class="at">applyMiddleware</span>(</a>\r\n<a class="sourceLine" id="cb151-21" title="21">      logger<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb151-22" title="22">      thunk<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb151-23" title="23">      <span class="at">routerMiddleware</span>(history)</a>\r\n<a class="sourceLine" id="cb151-24" title="24">    )</a>\r\n<a class="sourceLine" id="cb151-25" title="25">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb151-26" title="26"><span class="op">}</span></a></code></pre></div>\r\n<p>APIからデータを取得し、ReduxのStoreを経由してコンポーネントに表示する処理を実装します。</p>\r\n<p>ComponentからActionを呼び出す部分。</p>\r\n<p>[<code>src\\components\\Ranking.js</code>]</p>\r\n<div class="sourceCode" id="cb152"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb152-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb152-2" title="2"><span class="im">import</span> PropTypes <span class="im">from</span> <span class="st">&#39;prop-types&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb152-3" title="3"></a>\r\n<a class="sourceLine" id="cb152-4" title="4"><span class="co">// ライフサイクルメソッドを使うので function から class に変更</span></a>\r\n<a class="sourceLine" id="cb152-5" title="5"><span class="im">export</span> <span class="im">default</span> <span class="kw">class</span> Ranking <span class="kw">extends</span> <span class="va">React</span>.<span class="at">Component</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb152-6" title="6"></a>\r\n<a class="sourceLine" id="cb152-7" title="7">  <span class="at">componentWillMount</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb152-8" title="8">    <span class="kw">this</span>.<span class="va">props</span>.<span class="at">onMount</span>(<span class="kw">this</span>.<span class="va">props</span>.<span class="at">categoryId</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb152-9" title="9">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb152-10" title="10">  </a>\r\n<a class="sourceLine" id="cb152-11" title="11">  <span class="at">componentWillReceiveProps</span>(nextProps) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb152-12" title="12">    <span class="cf">if</span> (<span class="kw">this</span>.<span class="va">props</span>.<span class="at">categoryId</span> <span class="op">!==</span> <span class="va">nextProps</span>.<span class="at">categoryId</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb152-13" title="13">      <span class="co">// props.categoryId に変化があるので、ページ移動が発生している</span></a>\r\n<a class="sourceLine" id="cb152-14" title="14">      <span class="kw">this</span>.<span class="va">props</span>.<span class="at">onUpdate</span>(<span class="va">nextProps</span>.<span class="at">categoryId</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb152-15" title="15">    <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb152-16" title="16">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb152-17" title="17">  </a>\r\n<a class="sourceLine" id="cb152-18" title="18">  <span class="co">// </span><span class="al">TODO</span><span class="co">: 最終的には categoryId をもとにAPIから情報を取得する</span></a>\r\n<a class="sourceLine" id="cb152-19" title="19">  <span class="at">render</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb152-20" title="20">    <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb152-21" title="21">      <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb152-22" title="22">        <span class="op">&lt;</span>h2<span class="op">&gt;</span>Ranking Component&lt;/h2<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb152-23" title="23">        <span class="op">&lt;</span>p<span class="op">&gt;</span>Category <span class="dt">Id</span><span class="op">:</span> <span class="op">{</span><span class="kw">this</span>.<span class="va">props</span>.<span class="at">categoryId</span><span class="op">}</span>&lt;/p<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb152-24" title="24">      &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb152-25" title="25">    )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb152-26" title="26">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb152-27" title="27"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb152-28" title="28"></a>\r\n<a class="sourceLine" id="cb152-29" title="29"><span class="co">// propsのデータ型を定義</span></a>\r\n<a class="sourceLine" id="cb152-30" title="30"><span class="va">Ranking</span>.<span class="at">propTypes</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb152-31" title="31">  <span class="dt">categoryId</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">string</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb152-32" title="32">  <span class="dt">onMount</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">func</span>.<span class="at">isRequired</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb152-33" title="33">  <span class="dt">onUpdate</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">func</span>.<span class="at">isRequired</span></a>\r\n<a class="sourceLine" id="cb152-34" title="34"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb152-35" title="35"></a>\r\n<a class="sourceLine" id="cb152-36" title="36"><span class="co">// 未指定時の既定値を定義</span></a>\r\n<a class="sourceLine" id="cb152-37" title="37"><span class="va">Ranking</span>.<span class="at">defaultProps</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb152-38" title="38">  <span class="dt">categoryId</span><span class="op">:</span> <span class="st">&quot;1&quot;</span></a>\r\n<a class="sourceLine" id="cb152-39" title="39"><span class="op">};</span></a></code></pre></div>\r\n<p>[<code>src\\actions\\Ranking.js</code>]</p>\r\n<p>ActionCreator を定義します。</p>\r\n<ul>\r\n<li>コンポーネントのprops.onMount、props.onUpdateが呼び出されたときに実行するfetchRanking ※redux-thunkを使った非同期処理</li>\r\n<li>リクエスト開始 Action - startRequest</li>\r\n<li>レスポンス受信 Action - receiveData</li>\r\n<li>リクエスト完了 Action - finishRequest</li>\r\n</ul>\r\n<div class="sourceCode" id="cb153"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb153-1" title="1"><span class="im">import</span> fetchJsonp <span class="im">from</span> <span class="st">&#39;fetch-jsonp&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-2" title="2"><span class="im">import</span> qs <span class="im">from</span> <span class="st">&#39;qs&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-3" title="3"></a>\r\n<a class="sourceLine" id="cb153-4" title="4"><span class="kw">const</span> API_URL <span class="op">=</span> <span class="st">&quot;http://hoge.co.jp/v1/json/hoge&quot;</span><span class="op">;</span> <span class="co">// </span><span class="al">TODO</span><span class="co">: api のURL</span></a>\r\n<a class="sourceLine" id="cb153-5" title="5"><span class="kw">const</span> APP_ID <span class="op">=</span> <span class="st">&quot;APP_ID&quot;</span><span class="op">;</span>                          <span class="co">// </span><span class="al">TODO</span><span class="co">: 不要だが定義しておく</span></a>\r\n<a class="sourceLine" id="cb153-6" title="6"></a>\r\n<a class="sourceLine" id="cb153-7" title="7"><span class="co">// リクエスト開始 Action</span></a>\r\n<a class="sourceLine" id="cb153-8" title="8"><span class="kw">const</span> startRequest <span class="op">=</span> categoryId <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb153-9" title="9">  <span class="dt">type</span><span class="op">:</span> <span class="st">&quot;START_REQUEST&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb153-10" title="10">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span> categoryId <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb153-11" title="11"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-12" title="12"></a>\r\n<a class="sourceLine" id="cb153-13" title="13"><span class="co">// レスポンス受信 Action</span></a>\r\n<a class="sourceLine" id="cb153-14" title="14"><span class="kw">const</span> receiveData <span class="op">=</span> (categoryId<span class="op">,</span> error<span class="op">,</span> response) <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb153-15" title="15">  <span class="dt">type</span><span class="op">:</span> <span class="st">&quot;RECEIVE_DATA&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb153-16" title="16">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span> categoryId<span class="op">,</span> error<span class="op">,</span> response <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb153-17" title="17"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-18" title="18"></a>\r\n<a class="sourceLine" id="cb153-19" title="19"><span class="co">// リクエスト完了 Action</span></a>\r\n<a class="sourceLine" id="cb153-20" title="20"><span class="kw">const</span> finishRequest <span class="op">=</span> categoryId <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb153-21" title="21">  <span class="dt">type</span><span class="op">:</span> <span class="st">&quot;FINISH_REQUEST&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb153-22" title="22">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span> categoryId <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb153-23" title="23"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-24" title="24"></a>\r\n<a class="sourceLine" id="cb153-25" title="25"><span class="co">// データ取得</span></a>\r\n<a class="sourceLine" id="cb153-26" title="26"><span class="im">export</span> <span class="kw">const</span> fetchRanking <span class="op">=</span> categoryId <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb153-27" title="27">  <span class="co">// redux-thunkを使った非同期処理</span></a>\r\n<a class="sourceLine" id="cb153-28" title="28">  <span class="cf">return</span> async dispatch <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb153-29" title="29">    <span class="at">dispatch</span>(<span class="at">startRequest</span>(categoryId))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-30" title="30">    </a>\r\n<a class="sourceLine" id="cb153-31" title="31">    <span class="kw">const</span> queryString <span class="op">=</span> <span class="va">qs</span>.<span class="at">stringify</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb153-32" title="32">      <span class="dt">appid</span><span class="op">:</span> APP_ID<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb153-33" title="33">      <span class="dt">category_id</span><span class="op">:</span> categoryId<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb153-34" title="34">    <span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-35" title="35">    </a>\r\n<a class="sourceLine" id="cb153-36" title="36">    <span class="cf">try</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb153-37" title="37">      <span class="kw">const</span> response <span class="op">=</span> await <span class="at">fetchJsonp</span>(<span class="vs">`</span><span class="sc">${</span>API_URL<span class="sc">}</span><span class="vs">?</span><span class="sc">${</span>queryString<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-38" title="38">      <span class="kw">const</span> data <span class="op">=</span> await <span class="va">response</span>.<span class="at">json</span>()<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-39" title="39">      <span class="at">dispatch</span>(<span class="at">receiveData</span>(categoryId<span class="op">,</span> <span class="kw">null</span><span class="op">,</span> data))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-40" title="40">      </a>\r\n<a class="sourceLine" id="cb153-41" title="41">    <span class="op">}</span> <span class="cf">catch</span> (ex) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb153-42" title="42">      <span class="at">dispatch</span>(<span class="at">receiveData</span>(categoryId<span class="op">,</span> ex))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-43" title="43">    <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb153-44" title="44">    </a>\r\n<a class="sourceLine" id="cb153-45" title="45">    <span class="at">dispatch</span>(<span class="at">finishRequest</span>(categoryId))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb153-46" title="46">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb153-47" title="47"><span class="op">};</span></a></code></pre></div>\r\n<p>[<code>src\\containers\\Ranking.js</code>]</p>\r\n<ul>\r\n<li>ActionCreator をコンポーネントのprops.onMountedから呼び出すため、Container Component を定義します。</li>\r\n<li>mapDispatchToPropsで、props.onMountedとactions.fetchRankingを接続します。</li>\r\n</ul>\r\n<div class="sourceCode" id="cb154"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb154-1" title="1"><span class="im">import</span> <span class="op">{</span> connect <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb154-2" title="2"><span class="im">import</span> Ranking <span class="im">from</span> <span class="st">&#39;../components/Ranking&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb154-3" title="3"><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> actions <span class="im">from</span> <span class="st">&#39;../actions/Ranking&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb154-4" title="4"></a>\r\n<a class="sourceLine" id="cb154-5" title="5"><span class="co">// </span><span class="al">TODO</span><span class="co">: Reducerを定義するまでの仮の処理</span></a>\r\n<a class="sourceLine" id="cb154-6" title="6"><span class="kw">const</span> mapStateToProps <span class="op">=</span> (state<span class="op">,</span> ownProps) <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb154-7" title="7">  <span class="dt">categoryId</span><span class="op">:</span> <span class="va">ownProps</span>.<span class="at">categoryId</span></a>\r\n<a class="sourceLine" id="cb154-8" title="8"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb154-9" title="9"></a>\r\n<a class="sourceLine" id="cb154-10" title="10"><span class="kw">const</span> mapDispatchToProps <span class="op">=</span> dispatch <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb154-11" title="11">  <span class="at">onMount</span>(categoryId) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb154-12" title="12">    <span class="at">dispatch</span>(<span class="va">actions</span>.<span class="at">fetchRanking</span>(categoryId))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb154-13" title="13">  <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb154-14" title="14">  <span class="at">onUpdate</span>(categoryId) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb154-15" title="15">    <span class="at">dispatch</span>(<span class="va">actions</span>.<span class="at">fetchRanking</span>(categoryId))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb154-16" title="16">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb154-17" title="17"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb154-18" title="18"></a>\r\n<a class="sourceLine" id="cb154-19" title="19"><span class="im">export</span> <span class="im">default</span> <span class="at">connect</span>(mapStateToProps<span class="op">,</span> mapDispatchToProps)(Ranking)<span class="op">;</span></a></code></pre></div>\r\n<p>[<code>src\\App.js</code>]</p>\r\n<p>定義したContainer Componentを使うように修正します。</p>\r\n<div class="sourceCode" id="cb155"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb155-1" title="1"><span class="im">import</span> Ranking <span class="im">from</span> <span class="st">&#39;./components/Ranking&#39;</span><span class="op">;</span></a></code></pre></div>\r\n<p>↓</p>\r\n<div class="sourceCode" id="cb156"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb156-1" title="1"><span class="im">import</span> Ranking <span class="im">from</span> <span class="st">&#39;./containers/Ranking&#39;</span><span class="op">;</span></a></code></pre></div></li>\r\n<li><p>Reducerの実装</p>\r\n<p>Reducerを実装し、取得したデータを表示します。</p>\r\n<ul>\r\n<li><p><code>src\\reducers\\shopping.js</code></p>\r\n<p>カテゴリ名、カテゴリIDを保持する。 ランキングページにもカテゴリ名を表示したいので、<code>src\\App.js</code>のハードコードをこちらに移動する。</p></li>\r\n<li><p><code>src\\reducers\\Ranking.js</code></p>\r\n<p>Ranking コンポーネント用のReducer。 ランキング情報を保持します。</p></li>\r\n</ul>\r\n<p>[<code>src\\reducers\\shopping.js</code>]</p>\r\n<p>固定のJSONを常に返すReducerとして実装します。</p>\r\n<p>※本来はAPIから取得した情報を返すようにするべきです。</p>\r\n<div class="sourceCode" id="cb157"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb157-1" title="1"><span class="kw">const</span> initialState <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb157-2" title="2">  <span class="co">// カテゴリ情報</span></a>\r\n<a class="sourceLine" id="cb157-3" title="3">  <span class="co">// 本来はAPIから取得した情報を返すべき</span></a>\r\n<a class="sourceLine" id="cb157-4" title="4">  <span class="dt">categories</span><span class="op">:</span> [</a>\r\n<a class="sourceLine" id="cb157-5" title="5">    <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb157-6" title="6">      <span class="dt">id</span><span class="op">:</span> <span class="st">&quot;1&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb157-7" title="7">      <span class="dt">name</span><span class="op">:</span> <span class="st">&quot;ALL&quot;</span></a>\r\n<a class="sourceLine" id="cb157-8" title="8">    <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb157-9" title="9">    <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb157-10" title="10">      <span class="dt">id</span><span class="op">:</span> <span class="st">&quot;2502&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb157-11" title="11">      <span class="dt">name</span><span class="op">:</span> <span class="st">&quot;Category 2502&quot;</span></a>\r\n<a class="sourceLine" id="cb157-12" title="12">    <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb157-13" title="13">    <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb157-14" title="14">      <span class="dt">id</span><span class="op">:</span> <span class="st">&quot;10002&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb157-15" title="15">      <span class="dt">name</span><span class="op">:</span> <span class="st">&quot;Category 10002&quot;</span></a>\r\n<a class="sourceLine" id="cb157-16" title="16">    <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb157-17" title="17">  ]</a>\r\n<a class="sourceLine" id="cb157-18" title="18"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb157-19" title="19"></a>\r\n<a class="sourceLine" id="cb157-20" title="20"><span class="im">export</span> <span class="im">default</span> () <span class="op">=&gt;</span> initialState<span class="op">;</span></a></code></pre></div>\r\n<p>[<code>src\\reducers\\Ranking.js</code>]</p>\r\n<ul>\r\n<li>START_REQUEST Action にフックして、リクエスト開始時に状態をリセットします。</li>\r\n<li>RECEIVE_DATA Action にフックして、レスポンスからランキング情報を取得し、状態に設定します。 リクエストが失敗したときはエラーフラグを立てます。</li>\r\n<li>getRanking関数は、レスポンスから商品名、商品URL、商品画像のURLを抜き出します。</li>\r\n</ul>\r\n<div class="sourceCode" id="cb158"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb158-1" title="1"><span class="co">// レスポンスからランキング情報だけを抜き出す</span></a>\r\n<a class="sourceLine" id="cb158-2" title="2"><span class="kw">const</span> getRanking <span class="op">=</span> response <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb158-3" title="3">  <span class="kw">const</span> ranking <span class="op">=</span> []<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb158-4" title="4">  <span class="kw">const</span> itemLength <span class="op">=</span> <span class="va">response</span>.<span class="va">ResultSet</span>.<span class="at">totalResultsReturned</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb158-5" title="5">  <span class="co">// </span><span class="al">TODO</span><span class="co">: p.206 ↑末尾にセミコロン必要では？</span></a>\r\n<a class="sourceLine" id="cb158-6" title="6">  <span class="co">// </span><span class="al">TODO</span><span class="co">: ダウンロードできるサンプルに第10章が含まれていない</span></a>\r\n<a class="sourceLine" id="cb158-7" title="7">  </a>\r\n<a class="sourceLine" id="cb158-8" title="8">  <span class="cf">for</span> (<span class="kw">let</span> index <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> index <span class="op">&lt;</span> itemLength<span class="op">;</span> index<span class="op">++</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb158-9" title="9">    <span class="kw">const</span> item <span class="op">=</span> <span class="va">response</span>.<span class="at">ResultSet</span>[<span class="st">&#39;0&#39;</span>].<span class="at">Result</span>[index <span class="op">+</span> <span class="st">&quot;&quot;</span>]<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb158-10" title="10">    <span class="va">ranking</span>.<span class="at">push</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb158-11" title="11">      <span class="dt">code</span><span class="op">:</span> <span class="va">item</span>.<span class="at">Code</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb158-12" title="12">      <span class="dt">name</span><span class="op">:</span> <span class="va">item</span>.<span class="at">Name</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb158-13" title="13">      <span class="dt">url</span><span class="op">:</span> <span class="va">item</span>.<span class="at">Url</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb158-14" title="14">      <span class="dt">imageUrl</span><span class="op">:</span> <span class="va">item</span>.<span class="va">Image</span>.<span class="at">Medium</span></a>\r\n<a class="sourceLine" id="cb158-15" title="15">    <span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb158-16" title="16">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb158-17" title="17">  <span class="cf">return</span> ranking<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb158-18" title="18"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb158-19" title="19"></a>\r\n<a class="sourceLine" id="cb158-20" title="20"></a>\r\n<a class="sourceLine" id="cb158-21" title="21"><span class="co">// 初期状態</span></a>\r\n<a class="sourceLine" id="cb158-22" title="22"><span class="kw">const</span> initialState <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb158-23" title="23">  <span class="dt">categoryId</span><span class="op">:</span> <span class="kw">undefined</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb158-24" title="24">  <span class="dt">ranking</span><span class="op">:</span> <span class="kw">undefined</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb158-25" title="25">  <span class="dt">error</span><span class="op">:</span> <span class="kw">false</span></a>\r\n<a class="sourceLine" id="cb158-26" title="26"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb158-27" title="27"></a>\r\n<a class="sourceLine" id="cb158-28" title="28"></a>\r\n<a class="sourceLine" id="cb158-29" title="29"><span class="im">export</span> <span class="im">default</span> (state <span class="op">=</span> initialState<span class="op">,</span> action) <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb158-30" title="30">  <span class="cf">switch</span> (<span class="va">action</span>.<span class="at">type</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb158-31" title="31">    <span class="co">// リクエスト開始時に状態をリセット</span></a>\r\n<a class="sourceLine" id="cb158-32" title="32">    <span class="cf">case</span> <span class="st">&quot;START_REQUEST&quot;</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb158-33" title="33">      <span class="cf">return</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb158-34" title="34">        <span class="dt">categoryId</span><span class="op">:</span> <span class="va">action</span>.<span class="va">payload</span>.<span class="at">categoryId</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb158-35" title="35">        <span class="dt">ranking</span><span class="op">:</span> <span class="kw">undefined</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb158-36" title="36">        <span class="dt">error</span><span class="op">:</span> <span class="kw">false</span></a>\r\n<a class="sourceLine" id="cb158-37" title="37">      <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb158-38" title="38">    </a>\r\n<a class="sourceLine" id="cb158-39" title="39">    <span class="co">// データ受信</span></a>\r\n<a class="sourceLine" id="cb158-40" title="40">    <span class="cf">case</span> <span class="st">&quot;RECEIVE_DATA&quot;</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb158-41" title="41">      <span class="cf">return</span> <span class="va">action</span>.<span class="va">payload</span>.<span class="at">error</span></a>\r\n<a class="sourceLine" id="cb158-42" title="42">        <span class="op">?</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb158-43" title="43">            ...<span class="at">state</span><span class="op">,</span> </a>\r\n<a class="sourceLine" id="cb158-44" title="44">            <span class="dt">error</span><span class="op">:</span> <span class="kw">true</span></a>\r\n<a class="sourceLine" id="cb158-45" title="45">          <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb158-46" title="46">        : <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb158-47" title="47">            ...<span class="at">state</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb158-48" title="48">            <span class="dt">ranking</span><span class="op">:</span> <span class="at">getRanking</span>(<span class="va">action</span>.<span class="va">payload</span>.<span class="at">response</span>)</a>\r\n<a class="sourceLine" id="cb158-49" title="49">          <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb158-50" title="50">    </a>\r\n<a class="sourceLine" id="cb158-51" title="51">    <span class="dt">default</span><span class="op">:</span></a>\r\n<a class="sourceLine" id="cb158-52" title="52">      <span class="cf">return</span> state<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb158-53" title="53">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb158-54" title="54"><span class="op">}</span></a></code></pre></div>\r\n<p>2つのReducerの参照を [<code>src\\reducers\\index.js</code>] に追加します。</p>\r\n<div class="sourceCode" id="cb159"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb159-1" title="1"><span class="co">// 受け取ったstateをそのまま返すReducer</span></a>\r\n<a class="sourceLine" id="cb159-2" title="2"><span class="im">export</span> <span class="kw">const</span> noop <span class="op">=</span> (state <span class="op">=</span> <span class="op">{}</span>) <span class="op">=&gt;</span> state<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb159-3" title="3"></a>\r\n<a class="sourceLine" id="cb159-4" title="4"><span class="im">export</span> <span class="op">{</span> <span class="im">default</span> <span class="im">as</span> shopping <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;./shopping&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb159-5" title="5"><span class="im">export</span> <span class="op">{</span> <span class="im">default</span> <span class="im">as</span> Ranking <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;./Ranking&#39;</span><span class="op">;</span></a></code></pre></div>\r\n<p>[<code>src\\App.js</code>] のリンクの部分を Nav コンポーネントに移動する。</p>\r\n<p>[<code>src\\components\\Nav.js</code>]</p>\r\n<div class="sourceCode" id="cb160"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb160-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb160-2" title="2"><span class="im">import</span> PropTypes <span class="im">from</span> <span class="st">&#39;prop-types&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb160-3" title="3"><span class="im">import</span> <span class="op">{</span> Link <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-dom&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb160-4" title="4"></a>\r\n<a class="sourceLine" id="cb160-5" title="5"><span class="im">export</span> <span class="im">default</span> <span class="kw">function</span> <span class="at">Nav</span>(<span class="op">{</span> categories <span class="op">}</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb160-6" title="6">  <span class="co">// 移動先パスの生成</span></a>\r\n<a class="sourceLine" id="cb160-7" title="7">  <span class="co">//   カテゴリID = &quot;1&quot; であれば &quot;/all&quot;</span></a>\r\n<a class="sourceLine" id="cb160-8" title="8">  <span class="co">//   上記以外であれば &quot;/category/&lt;カテゴリID&gt;&quot;</span></a>\r\n<a class="sourceLine" id="cb160-9" title="9">  <span class="kw">const</span> to <span class="op">=</span> category <span class="op">=&gt;</span> (</a>\r\n<a class="sourceLine" id="cb160-10" title="10">    <span class="va">category</span>.<span class="at">id</span> <span class="op">===</span> <span class="st">&quot;1&quot;</span></a>\r\n<a class="sourceLine" id="cb160-11" title="11">      <span class="op">?</span> <span class="st">&quot;/all&quot;</span></a>\r\n<a class="sourceLine" id="cb160-12" title="12">      : <span class="vs">`/category/</span><span class="sc">${</span><span class="va">category</span>.<span class="at">id</span><span class="sc">}</span><span class="vs">`</span></a>\r\n<a class="sourceLine" id="cb160-13" title="13">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb160-14" title="14">  </a>\r\n<a class="sourceLine" id="cb160-15" title="15">  <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb160-16" title="16">    <span class="op">&lt;</span>ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb160-17" title="17">      <span class="op">{</span> <span class="co">/* props.categories からリンク一覧を生成 */</span> <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb160-18" title="18">      <span class="op">{</span><span class="va">categories</span>.<span class="at">map</span>(category <span class="op">=&gt;</span> (</a>\r\n<a class="sourceLine" id="cb160-19" title="19">        <span class="op">&lt;</span>li key<span class="op">={</span><span class="vs">`nav-item-</span><span class="sc">${</span><span class="va">category</span>.<span class="at">id</span><span class="sc">}</span><span class="vs">`</span><span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb160-20" title="20">          <span class="op">&lt;</span>Link to<span class="op">={</span><span class="at">to</span>(category)<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb160-21" title="21">            <span class="op">{</span><span class="va">category</span>.<span class="at">name</span><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb160-22" title="22">          &lt;/Link<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb160-23" title="23">        &lt;/li<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb160-24" title="24">      ))<span class="op">}</span></a>\r\n<a class="sourceLine" id="cb160-25" title="25">    &lt;/ul<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb160-26" title="26">  )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb160-27" title="27"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb160-28" title="28"></a>\r\n<a class="sourceLine" id="cb160-29" title="29"><span class="va">Nav</span>.<span class="at">propTypes</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb160-30" title="30">  <span class="co">// state.shopping.categories の構造</span></a>\r\n<a class="sourceLine" id="cb160-31" title="31">  <span class="dt">categories</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">arrayOf</span>(</a>\r\n<a class="sourceLine" id="cb160-32" title="32">    <span class="va">PropTypes</span>.<span class="at">shape</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb160-33" title="33">      <span class="dt">id</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">string</span>.<span class="at">isRequired</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb160-34" title="34">      <span class="dt">name</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">string</span>.<span class="at">isRequired</span></a>\r\n<a class="sourceLine" id="cb160-35" title="35">    <span class="op">}</span>)</a>\r\n<a class="sourceLine" id="cb160-36" title="36">  ).<span class="at">isRequired</span></a>\r\n<a class="sourceLine" id="cb160-37" title="37"><span class="op">};</span></a></code></pre></div>\r\n<p>Nav コンポーネントの Container Component を作成します。</p>\r\n<p>[<code>src\\containers\\Nav.js</code>]</p>\r\n<div class="sourceCode" id="cb161"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb161-1" title="1"><span class="im">import</span> <span class="op">{</span> connect <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb161-2" title="2"><span class="im">import</span> Nav <span class="im">from</span> <span class="st">&#39;../components/Nav&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb161-3" title="3"></a>\r\n<a class="sourceLine" id="cb161-4" title="4"><span class="kw">const</span> mapStateToProps <span class="op">=</span> state <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb161-5" title="5">  <span class="co">// state.shopping.categories を props.categories に関連付ける</span></a>\r\n<a class="sourceLine" id="cb161-6" title="6">  <span class="dt">categories</span><span class="op">:</span> <span class="va">state</span>.<span class="va">shopping</span>.<span class="at">categories</span></a>\r\n<a class="sourceLine" id="cb161-7" title="7"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb161-8" title="8"></a>\r\n<a class="sourceLine" id="cb161-9" title="9"><span class="im">export</span> <span class="im">default</span> <span class="at">connect</span>(mapStateToProps)(Nav)<span class="op">;</span></a></code></pre></div>\r\n<p>App コンポーネントに Nav コンポーネントを組み込みます。</p>\r\n<p>[<code>src\\App.js</code>]</p>\r\n<div class="sourceCode" id="cb162"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb162-1" title="1"><span class="im">import</span> React<span class="op">,</span> <span class="op">{</span> Component <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb162-2" title="2"><span class="im">import</span> <span class="op">{</span> Route<span class="op">,</span> Switch<span class="op">,</span> Redirect <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-dom&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb162-3" title="3"><span class="im">import</span> Ranking <span class="im">from</span> <span class="st">&#39;./containers/Ranking&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb162-4" title="4"><span class="im">import</span> Nav <span class="im">from</span> <span class="st">&#39;./containers/Nav&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb162-5" title="5"></a>\r\n<a class="sourceLine" id="cb162-6" title="6"><span class="kw">class</span> App <span class="kw">extends</span> Component <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb162-7" title="7">  <span class="at">render</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb162-8" title="8">    <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb162-9" title="9">      <span class="op">&lt;</span>div className<span class="op">=</span><span class="st">&quot;App&quot;</span><span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb162-10" title="10">        <span class="op">{</span> <span class="co">/* Nav コンポーネントに差し替える */</span> <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb162-11" title="11">        <span class="op">{</span> <span class="co">/*</span></a>\r\n<a class="sourceLine" id="cb162-12" title="12"><span class="co">        &lt;ul&gt;</span></a>\r\n<a class="sourceLine" id="cb162-13" title="13"><span class="co">          &lt;li&gt;&lt;Link to=&quot;/all&quot;&gt;Category All&lt;/Link&gt;&lt;/li&gt;</span></a>\r\n<a class="sourceLine" id="cb162-14" title="14"><span class="co">          &lt;li&gt;&lt;Link to=&quot;/category/2502&quot;&gt;Category 2502&lt;/Link&gt;&lt;/li&gt;</span></a>\r\n<a class="sourceLine" id="cb162-15" title="15"><span class="co">          &lt;li&gt;&lt;Link to=&quot;/category/10002&quot;&gt;Category 10002&lt;/Link&gt;&lt;/li&gt;</span></a>\r\n<a class="sourceLine" id="cb162-16" title="16"><span class="co">        &lt;/ul&gt;</span></a>\r\n<a class="sourceLine" id="cb162-17" title="17"><span class="co">        */</span> <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb162-18" title="18">        <span class="op">&lt;</span>Nav /<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb162-19" title="19">        </a>\r\n<a class="sourceLine" id="cb162-20" title="20">        <span class="op">&lt;</span>Switch<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb162-21" title="21">          <span class="op">&lt;</span>Route path<span class="op">=</span><span class="st">&quot;/all&quot;</span> component<span class="op">={</span>Ranking<span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb162-22" title="22">          <span class="op">&lt;</span>Route</a>\r\n<a class="sourceLine" id="cb162-23" title="23">            path<span class="op">=</span><span class="st">&quot;/category/1&quot;</span></a>\r\n<a class="sourceLine" id="cb162-24" title="24">            render<span class="op">={</span></a>\r\n<a class="sourceLine" id="cb162-25" title="25">              () <span class="op">=&gt;</span> <span class="op">&lt;</span>Redirect to<span class="op">=</span><span class="st">&quot;/all&quot;</span> /&gt;</a>\r\n<a class="sourceLine" id="cb162-26" title="26">            <span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb162-27" title="27">          <span class="op">&lt;</span>Route</a>\r\n<a class="sourceLine" id="cb162-28" title="28">            path<span class="op">=</span><span class="st">&quot;/category/:id&quot;</span></a>\r\n<a class="sourceLine" id="cb162-29" title="29">            render<span class="op">={</span></a>\r\n<a class="sourceLine" id="cb162-30" title="30">              (<span class="op">{</span> match <span class="op">}</span>) <span class="op">=&gt;</span> <span class="op">&lt;</span>Ranking categoryId<span class="op">={</span><span class="va">match</span>.<span class="va">params</span>.<span class="at">id</span><span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb162-31" title="31">            <span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb162-32" title="32">        &lt;/Switch<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb162-33" title="33">      &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb162-34" title="34">    )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb162-35" title="35">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb162-36" title="36"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb162-37" title="37"></a>\r\n<a class="sourceLine" id="cb162-38" title="38"><span class="im">export</span> <span class="im">default</span> App<span class="op">;</span></a></code></pre></div></li>\r\n<li><p>機能拡張</p>\r\n<ul>\r\n<li>state.shopping.categoriesにないカテゴリIDへのアクセスは、トップページにリダイレクトする。</li>\r\n<li>カテゴリ名を表示</li>\r\n<li>ランキング情報の表示</li>\r\n</ul>\r\n<p>[<code>src\\actions\\Ranking.js</code>]</p>\r\n<div class="sourceCode" id="cb163"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb163-1" title="1"><span class="im">import</span> fetchJsonp <span class="im">from</span> <span class="st">&#39;fetch-jsonp&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-2" title="2"><span class="im">import</span> qs <span class="im">from</span> <span class="st">&#39;qs&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-3" title="3"><span class="im">import</span> <span class="op">{</span> replace <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-redux&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-4" title="4"></a>\r\n<a class="sourceLine" id="cb163-5" title="5"><span class="kw">const</span> API_URL <span class="op">=</span> <span class="st">&quot;http://hoge.co.jp/v1/json/hoge&quot;</span><span class="op">;</span> <span class="co">// </span><span class="al">TODO</span><span class="co">: api のURL</span></a>\r\n<a class="sourceLine" id="cb163-6" title="6"><span class="kw">const</span> APP_ID <span class="op">=</span> <span class="st">&quot;APP_ID&quot;</span><span class="op">;</span>                          <span class="co">// </span><span class="al">TODO</span><span class="co">: 不要だが定義しておく</span></a>\r\n<a class="sourceLine" id="cb163-7" title="7"></a>\r\n<a class="sourceLine" id="cb163-8" title="8"><span class="co">// リクエスト開始 Action</span></a>\r\n<a class="sourceLine" id="cb163-9" title="9"><span class="co">// categoryId ではなく category を含めるように変更</span></a>\r\n<a class="sourceLine" id="cb163-10" title="10"><span class="kw">const</span> startRequest <span class="op">=</span> category <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb163-11" title="11">  <span class="dt">type</span><span class="op">:</span> <span class="st">&quot;START_REQUEST&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb163-12" title="12">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span> category <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb163-13" title="13"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-14" title="14"></a>\r\n<a class="sourceLine" id="cb163-15" title="15"><span class="co">// レスポンス受信 Action</span></a>\r\n<a class="sourceLine" id="cb163-16" title="16"><span class="co">// categoryId ではなく category を含めるように変更</span></a>\r\n<a class="sourceLine" id="cb163-17" title="17"><span class="kw">const</span> receiveData <span class="op">=</span> (category<span class="op">,</span> error<span class="op">,</span> response) <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb163-18" title="18">  <span class="dt">type</span><span class="op">:</span> <span class="st">&quot;RECEIVE_DATA&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb163-19" title="19">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span> category<span class="op">,</span> error<span class="op">,</span> response <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb163-20" title="20"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-21" title="21"></a>\r\n<a class="sourceLine" id="cb163-22" title="22"><span class="co">// リクエスト完了 Action</span></a>\r\n<a class="sourceLine" id="cb163-23" title="23"><span class="co">// categoryId ではなく category を含めるように変更</span></a>\r\n<a class="sourceLine" id="cb163-24" title="24"><span class="kw">const</span> finishRequest <span class="op">=</span> category <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb163-25" title="25">  <span class="dt">type</span><span class="op">:</span> <span class="st">&quot;FINISH_REQUEST&quot;</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb163-26" title="26">  <span class="dt">payload</span><span class="op">:</span> <span class="op">{</span> category <span class="op">},</span></a>\r\n<a class="sourceLine" id="cb163-27" title="27"><span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-28" title="28"></a>\r\n<a class="sourceLine" id="cb163-29" title="29"><span class="co">// データ取得</span></a>\r\n<a class="sourceLine" id="cb163-30" title="30"><span class="im">export</span> <span class="kw">const</span> fetchRanking <span class="op">=</span> categoryId <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb163-31" title="31">  <span class="co">// redux-thunkを使った非同期処理</span></a>\r\n<a class="sourceLine" id="cb163-32" title="32">  <span class="co">// getState関数を引数に追加する</span></a>\r\n<a class="sourceLine" id="cb163-33" title="33">  <span class="cf">return</span> <span class="at">async</span> (dispatch<span class="op">,</span> getState) <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb163-34" title="34">    <span class="co">// カテゴリIDに対応する state.shopping.categories の要素を取得</span></a>\r\n<a class="sourceLine" id="cb163-35" title="35">    <span class="kw">const</span> categories <span class="op">=</span> <span class="at">getState</span>().<span class="va">shopping</span>.<span class="at">categories</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-36" title="36">    <span class="kw">const</span> category <span class="op">=</span> <span class="va">categories</span>.<span class="at">find</span>(category <span class="op">=&gt;</span> (<span class="va">category</span>.<span class="at">id</span> <span class="op">===</span> categoryId))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-37" title="37">    </a>\r\n<a class="sourceLine" id="cb163-38" title="38">    <span class="co">// 対応する情報がなければトップページへリダイレクト</span></a>\r\n<a class="sourceLine" id="cb163-39" title="39">    <span class="cf">if</span> (<span class="kw">typeof</span> category <span class="op">===</span> <span class="st">&quot;undefined&quot;</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb163-40" title="40">      <span class="at">dispatch</span>(<span class="at">replace</span>(<span class="st">&quot;/&quot;</span>))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-41" title="41">      <span class="cf">return</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-42" title="42">    <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb163-43" title="43">    </a>\r\n<a class="sourceLine" id="cb163-44" title="44">    <span class="co">// startRequest Action の引数に category を受け渡す</span></a>\r\n<a class="sourceLine" id="cb163-45" title="45">    <span class="at">dispatch</span>(<span class="at">startRequest</span>(category))<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-46" title="46">    </a>\r\n<a class="sourceLine" id="cb163-47" title="47">    <span class="kw">const</span> queryString <span class="op">=</span> <span class="va">qs</span>.<span class="at">stringify</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb163-48" title="48">      <span class="dt">appid</span><span class="op">:</span> APP_ID<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb163-49" title="49">      <span class="dt">category_id</span><span class="op">:</span> categoryId<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb163-50" title="50">    <span class="op">}</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-51" title="51">    </a>\r\n<a class="sourceLine" id="cb163-52" title="52">    <span class="cf">try</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb163-53" title="53">      <span class="kw">const</span> response <span class="op">=</span> await <span class="at">fetchJsonp</span>(<span class="vs">`</span><span class="sc">${</span>API_URL<span class="sc">}</span><span class="vs">?</span><span class="sc">${</span>queryString<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-54" title="54">      <span class="kw">const</span> data <span class="op">=</span> await <span class="va">response</span>.<span class="at">json</span>()<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb163-55" title="55">      <span class="at">dispatch</span>(<span class="at">receiveData</span>(category<span class="op">,</span> <span class="kw">null</span><span class="op">,</span> data))<span class="op">;</span>  <span class="co">// categoryId ではなく category を受け渡す</span></a>\r\n<a class="sourceLine" id="cb163-56" title="56">      </a>\r\n<a class="sourceLine" id="cb163-57" title="57">    <span class="op">}</span> <span class="cf">catch</span> (ex) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb163-58" title="58">      <span class="at">dispatch</span>(<span class="at">receiveData</span>(category<span class="op">,</span> ex))<span class="op">;</span>  <span class="co">// categoryId ではなく category を受け渡す</span></a>\r\n<a class="sourceLine" id="cb163-59" title="59">    <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb163-60" title="60">    </a>\r\n<a class="sourceLine" id="cb163-61" title="61">    <span class="at">dispatch</span>(<span class="at">finishRequest</span>(category))<span class="op">;</span>      <span class="co">// categoryId ではなく category を受け渡す</span></a>\r\n<a class="sourceLine" id="cb163-62" title="62">  <span class="op">};</span></a>\r\n<a class="sourceLine" id="cb163-63" title="63"><span class="op">};</span></a></code></pre></div>\r\n<p>修正したActionに対応できるように、Reducerを変更します。</p>\r\n<p>[<code>src\\reducers\\Ranking.js</code>] （変更する initialState の部分のみ抜粋）</p>\r\n<div class="sourceCode" id="cb164"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb164-1" title="1"><span class="co">// 初期状態</span></a>\r\n<a class="sourceLine" id="cb164-2" title="2"><span class="kw">const</span> initialState <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb164-3" title="3">  <span class="co">// categoryId → category</span></a>\r\n<a class="sourceLine" id="cb164-4" title="4">  <span class="dt">category</span><span class="op">:</span> <span class="kw">undefined</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb164-5" title="5">  <span class="dt">ranking</span><span class="op">:</span> <span class="kw">undefined</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb164-6" title="6">  <span class="dt">error</span><span class="op">:</span> <span class="kw">false</span></a>\r\n<a class="sourceLine" id="cb164-7" title="7"><span class="op">};</span></a></code></pre></div>\r\n<p>Rankingコンポーネントと Store の状態を関連付けます。</p>\r\n<p>[<code>src\\containers\\Ranking.js</code>] （mapStateToProps の部分のみ抜粋）</p>\r\n<div class="sourceCode" id="cb165"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb165-1" title="1"><span class="kw">const</span> mapStateToProps <span class="op">=</span> (state<span class="op">,</span> ownProps) <span class="op">=&gt;</span> (<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb165-2" title="2">  <span class="dt">categoryId</span><span class="op">:</span> <span class="va">ownProps</span>.<span class="at">categoryId</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb165-3" title="3">  </a>\r\n<a class="sourceLine" id="cb165-4" title="4">  <span class="co">// カテゴリ情報、ランキング情報を Ranking コンポーネントに渡す</span></a>\r\n<a class="sourceLine" id="cb165-5" title="5">  <span class="dt">category</span><span class="op">:</span> <span class="va">state</span>.<span class="va">Ranking</span>.<span class="at">category</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb165-6" title="6">  <span class="dt">ranking</span><span class="op">:</span> <span class="va">state</span>.<span class="va">Ranking</span>.<span class="at">ranking</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb165-7" title="7">  <span class="dt">error</span><span class="op">:</span> <span class="va">state</span>.<span class="va">Ranking</span>.<span class="at">error</span></a>\r\n<a class="sourceLine" id="cb165-8" title="8"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>\r\n<p>Rankingコンポーネントは、受け取ったカテゴリ情報、ランキング情報、エラーフラグを表示します。</p>\r\n<p>[<code>src\\components\\Ranking.js</code>]</p>\r\n<div class="sourceCode" id="cb166"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb166-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb166-2" title="2"><span class="im">import</span> PropTypes <span class="im">from</span> <span class="st">&#39;prop-types&#39;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb166-3" title="3"></a>\r\n<a class="sourceLine" id="cb166-4" title="4"><span class="im">export</span> <span class="im">default</span> <span class="kw">class</span> Ranking <span class="kw">extends</span> <span class="va">React</span>.<span class="at">Component</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-5" title="5"></a>\r\n<a class="sourceLine" id="cb166-6" title="6">  <span class="at">componentWillMount</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-7" title="7">    <span class="kw">this</span>.<span class="va">props</span>.<span class="at">onMount</span>(<span class="kw">this</span>.<span class="va">props</span>.<span class="at">categoryId</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb166-8" title="8">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb166-9" title="9">  </a>\r\n<a class="sourceLine" id="cb166-10" title="10">  <span class="at">componentWillReceiveProps</span>(nextProps) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-11" title="11">    <span class="cf">if</span> (<span class="kw">this</span>.<span class="va">props</span>.<span class="at">categoryId</span> <span class="op">!==</span> <span class="va">nextProps</span>.<span class="at">categoryId</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-12" title="12">      <span class="co">// props.categoryId に変化があるので、ページ移動が発生している</span></a>\r\n<a class="sourceLine" id="cb166-13" title="13">      <span class="kw">this</span>.<span class="va">props</span>.<span class="at">onUpdate</span>(<span class="va">nextProps</span>.<span class="at">categoryId</span>)<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb166-14" title="14">    <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb166-15" title="15">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb166-16" title="16">  </a>\r\n<a class="sourceLine" id="cb166-17" title="17">  <span class="at">render</span>() <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-18" title="18">    <span class="kw">const</span> <span class="op">{</span> category<span class="op">,</span> ranking<span class="op">,</span> error <span class="op">}</span> <span class="op">=</span> <span class="kw">this</span>.<span class="at">props</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb166-19" title="19">    </a>\r\n<a class="sourceLine" id="cb166-20" title="20">    <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb166-21" title="21">      <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb166-22" title="22">        <span class="op">&lt;</span>h2<span class="op">&gt;{</span></a>\r\n<a class="sourceLine" id="cb166-23" title="23">          <span class="kw">typeof</span> category <span class="op">!==</span> <span class="st">&quot;undefined&quot;</span></a>\r\n<a class="sourceLine" id="cb166-24" title="24">            <span class="op">?</span> <span class="vs">`Ranking: </span><span class="sc">${</span><span class="va">category</span>.<span class="at">name</span><span class="sc">}</span><span class="vs">`</span></a>\r\n<a class="sourceLine" id="cb166-25" title="25">            : <span class="st">&quot;&quot;</span></a>\r\n<a class="sourceLine" id="cb166-26" title="26">        <span class="op">}</span>&lt;/h2<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb166-27" title="27">        </a>\r\n<a class="sourceLine" id="cb166-28" title="28">        <span class="op">{</span>(() <span class="op">=&gt;</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-29" title="29">          <span class="cf">if</span> (error) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-30" title="30">            <span class="co">// エラー表示</span></a>\r\n<a class="sourceLine" id="cb166-31" title="31">            <span class="cf">return</span> <span class="op">&lt;</span>p<span class="op">&gt;</span>エラーが発生しました。リロードしてください。&lt;/p<span class="op">&gt;;</span></a>\r\n<a class="sourceLine" id="cb166-32" title="32">            </a>\r\n<a class="sourceLine" id="cb166-33" title="33">          <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> (<span class="kw">typeof</span> ranking <span class="op">===</span> <span class="st">&quot;undefined&quot;</span>) <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-34" title="34">            <span class="co">// リクエスト完了前</span></a>\r\n<a class="sourceLine" id="cb166-35" title="35">            <span class="cf">return</span> <span class="op">&lt;</span>p<span class="op">&gt;</span><span class="va">読み込み中</span>...&lt;/p<span class="op">&gt;;</span></a>\r\n<a class="sourceLine" id="cb166-36" title="36">            </a>\r\n<a class="sourceLine" id="cb166-37" title="37">          <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-38" title="38">            <span class="co">// ランキングの表示</span></a>\r\n<a class="sourceLine" id="cb166-39" title="39">            <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb166-40" title="40">              <span class="op">&lt;</span>ol<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb166-41" title="41">                <span class="op">{</span><span class="va">ranking</span>.<span class="at">map</span>(item <span class="op">=&gt;</span> (</a>\r\n<a class="sourceLine" id="cb166-42" title="42">                  <span class="op">&lt;</span>li key<span class="op">={</span><span class="vs">`ranking-item-</span><span class="sc">${</span><span class="va">item</span>.<span class="at">code</span><span class="sc">}</span><span class="vs">`</span><span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb166-43" title="43">                    <span class="op">&lt;</span>img alt<span class="op">={</span><span class="va">item</span>.<span class="at">name</span><span class="op">}</span> src<span class="op">={</span><span class="va">item</span>.<span class="at">imageUrl</span><span class="op">}</span> /&gt;</a>\r\n<a class="sourceLine" id="cb166-44" title="44">                    <span class="op">&lt;</span>a href<span class="op">={</span><span class="va">item</span>.<span class="at">url</span><span class="op">}</span> target<span class="op">=</span><span class="st">&quot;_blank&quot;</span><span class="op">&gt;{</span><span class="va">item</span>.<span class="at">name</span><span class="op">}</span>&lt;/a<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb166-45" title="45">                  &lt;/li<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb166-46" title="46">                ))<span class="op">}</span></a>\r\n<a class="sourceLine" id="cb166-47" title="47">              &lt;/ol<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb166-48" title="48">            )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb166-49" title="49">          <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb166-50" title="50">        <span class="op">}</span>)()<span class="op">}</span></a>\r\n<a class="sourceLine" id="cb166-51" title="51">      &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb166-52" title="52">    )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb166-53" title="53">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb166-54" title="54"><span class="op">}</span></a>\r\n<a class="sourceLine" id="cb166-55" title="55"></a>\r\n<a class="sourceLine" id="cb166-56" title="56"><span class="co">// propsのデータ型を定義</span></a>\r\n<a class="sourceLine" id="cb166-57" title="57"><span class="va">Ranking</span>.<span class="at">propTypes</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-58" title="58">  <span class="dt">categoryId</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">string</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb166-59" title="59">  <span class="dt">onMount</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">func</span>.<span class="at">isRequired</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb166-60" title="60">  <span class="dt">onUpdate</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">func</span>.<span class="at">isRequired</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb166-61" title="61">  </a>\r\n<a class="sourceLine" id="cb166-62" title="62">  <span class="co">// category, ranking, error の型を追加</span></a>\r\n<a class="sourceLine" id="cb166-63" title="63">  <span class="dt">category</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">shape</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-64" title="64">    <span class="dt">id</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">string</span>.<span class="at">isRequired</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb166-65" title="65">    <span class="dt">name</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">string</span>.<span class="at">isRequired</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb166-66" title="66">  <span class="op">}</span>)<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb166-67" title="67">  <span class="dt">ranking</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="at">arrayOf</span>(</a>\r\n<a class="sourceLine" id="cb166-68" title="68">    <span class="va">PropTypes</span>.<span class="at">shape</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-69" title="69">      <span class="dt">code</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">string</span>.<span class="at">isRequired</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb166-70" title="70">      <span class="dt">name</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">string</span>.<span class="at">isRequired</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb166-71" title="71">      <span class="dt">url</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">string</span>.<span class="at">isRequired</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb166-72" title="72">      <span class="dt">imageUrl</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">string</span>.<span class="at">isRequired</span></a>\r\n<a class="sourceLine" id="cb166-73" title="73">    <span class="op">}</span>)</a>\r\n<a class="sourceLine" id="cb166-74" title="74">  )<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb166-75" title="75">  <span class="dt">error</span><span class="op">:</span> <span class="va">PropTypes</span>.<span class="va">bool</span>.<span class="at">isRequired</span></a>\r\n<a class="sourceLine" id="cb166-76" title="76"><span class="op">};</span></a>\r\n<a class="sourceLine" id="cb166-77" title="77"></a>\r\n<a class="sourceLine" id="cb166-78" title="78"><span class="co">// 未指定時の既定値を定義</span></a>\r\n<a class="sourceLine" id="cb166-79" title="79"><span class="va">Ranking</span>.<span class="at">defaultProps</span> <span class="op">=</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb166-80" title="80">  <span class="dt">categoryId</span><span class="op">:</span> <span class="st">&quot;1&quot;</span></a>\r\n<a class="sourceLine" id="cb166-81" title="81"><span class="op">};</span></a></code></pre></div></li>\r\n</ol>\r\n<h2 id="日付を扱う">日付を扱う</h2>\r\n<p><code>react-moment</code>を使います。 <code>moment</code>を使ったReactコンポーネントです。</p>\r\n<h3 id="インストール-3">インストール</h3>\r\n<pre><code>npm install --save moment react-moment\r\n</code></pre>\r\n<p>タイムゾーンを指定するのであれば、こちらのパッケージもインストールします。</p>\r\n<pre><code>npm install --save moment-timezone\r\n</code></pre>\r\n<h2 id="note-react-router">Note: React Router</h2>\r\n<p>Router : すべてのRouterコンポーネントに共通する低レベルインターフェース。根底クラスみたいなもんだと思えばよいでしょう。</p>\r\n<pre><code>一般的にアプリでは次のRouterのうち、ひとつを使います。\r\n\r\n- BrowserRouter\r\n- HashRouter\r\n- MemoryRouter\r\n- NativeRouter\r\n- StaticRouter\r\n</code></pre>\r\n<p>BrowserRouter : HTML5 の history API を使って、URLとUIを同期するRouterコンポーネント。</p>\r\n<p>HashRouter : URLのハッシュ（＝window.location.hash）を使って、URLとUIを同期するRouterコンポーネント。</p>\r\n<p>Link : ナビゲーションコンポーネント。</p>\r\n<p>NavLink : 見た目（スタイルの属性）ができるLinkコンポーネント。</p>\r\n<p>Route : パスと一致するときに、コンポーネントを描画するコンポーネント。</p>\r\n<pre><code>Renderコンポーネントを使って、コンポーネントを描画するには次の3つの方法があります。\r\nが、ほとんどのケースで使うことになるのは、`&lt;Route component&gt;`でしょう。\r\n\r\n- `&lt;Route component&gt;`\r\n\r\n    パスが一致したときに、指定したコンポーネントを描画します。\r\n    \r\n    ~~~javascript\r\n    // Helloコンポーネントを描画\r\n    &lt;Route path=&quot;/hello&quot; component={Hello}/&gt;\r\n    ~~~\r\n\r\n- `&lt;Route render&gt;`\r\n\r\n    パスが一致したときに、render関数に従い描画します。\r\n    \r\n    ~~~javascript\r\n    &lt;Route path=&quot;/hello&quot; render={() =&gt; &lt;div&gt;Hello&lt;/div&gt;}/&gt;\r\n    ~~~\r\n\r\n- `&lt;Route children&gt;`\r\n\r\n    パスが一致するかどうかを描画するときに使います。\r\n    \r\n    `children`の関数の引数 `match`には、パスが一致したときはオブジェクト、それ以外は null が渡されます。\r\n    \r\n    [`match`の詳細は公式ドキュメントを参照。](https://reacttraining.com/react-router/web/api/match){target=&quot;_blank&quot;}\r\n    \r\n    ~~~javascript\r\n    &lt;ul&gt;\r\n      &lt;ListItemLink to=&quot;/somewhere&quot;/&gt;\r\n      &lt;ListItemLink to=&quot;/somewhere-else&quot;/&gt;\r\n    &lt;/ul&gt;\r\n\r\n    const ListItemLink = ({ to, ...rest }) =&gt; (\r\n      &lt;Route path={to} children={({ match }) =&gt; (\r\n        &lt;li className={match ? &#39;active&#39; : &#39;&#39;}&gt;\r\n          &lt;Link to={to} {...rest}/&gt;\r\n        &lt;/li&gt;\r\n      )}/&gt;\r\n    )\r\n    ~~~\r\n\r\n\r\nすべての方法で、次の3つのpropsが渡されます。\r\n\r\n- match\r\n- location\r\n- history\r\n</code></pre>\r\n<h2 id="react-router-redux">React Router Redux</h2>\r\n<h3 id="基本的な考え方">基本的な考え方</h3>\r\n<ol>\r\n<li><p>history を作ります。<br />\r\nHTML5 の history API を使うか、URLハッシュを使うか選べます。</p></li>\r\n<li><p>ミドルウェアを構築します。<br />\r\nナビゲーションアクションのインターセプトとディスパッチのためのミドルウェアを構築。 噛み砕いて言うと？</p></li>\r\n<li><p><code>createStore</code>関数にReducerとMiddlewareを適用します。<br />\r\nReducerの指定は「router」キーに「routerReducer」を指定します。</p></li>\r\n</ol>\r\n<div class="sourceCode" id="cb171"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb171-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&#39;react&#39;</span></a>\r\n<a class="sourceLine" id="cb171-2" title="2"><span class="im">import</span> ReactDOM <span class="im">from</span> <span class="st">&#39;react-dom&#39;</span></a>\r\n<a class="sourceLine" id="cb171-3" title="3"></a>\r\n<a class="sourceLine" id="cb171-4" title="4"><span class="im">import</span> <span class="op">{</span> createStore<span class="op">,</span> combineReducers<span class="op">,</span> applyMiddleware <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;redux&#39;</span></a>\r\n<a class="sourceLine" id="cb171-5" title="5"><span class="im">import</span> <span class="op">{</span> Provider <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-redux&#39;</span></a>\r\n<a class="sourceLine" id="cb171-6" title="6"></a>\r\n<a class="sourceLine" id="cb171-7" title="7"><span class="im">import</span> createHistory <span class="im">from</span> <span class="st">&#39;history/createBrowserHistory&#39;</span></a>\r\n<a class="sourceLine" id="cb171-8" title="8"><span class="im">import</span> <span class="op">{</span> Route <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router&#39;</span></a>\r\n<a class="sourceLine" id="cb171-9" title="9"></a>\r\n<a class="sourceLine" id="cb171-10" title="10"><span class="im">import</span> <span class="op">{</span> ConnectedRouter<span class="op">,</span> routerReducer<span class="op">,</span> routerMiddleware<span class="op">,</span> push <span class="op">}</span> <span class="im">from</span> <span class="st">&#39;react-router-redux&#39;</span></a>\r\n<a class="sourceLine" id="cb171-11" title="11"></a>\r\n<a class="sourceLine" id="cb171-12" title="12"><span class="im">import</span> reducers <span class="im">from</span> <span class="st">&#39;./reducers&#39;</span> <span class="co">// Or wherever you keep your reducers</span></a>\r\n<a class="sourceLine" id="cb171-13" title="13"></a>\r\n<a class="sourceLine" id="cb171-14" title="14"><span class="co">// (1) history の生成</span></a>\r\n<a class="sourceLine" id="cb171-15" title="15"><span class="kw">const</span> history <span class="op">=</span> <span class="at">createHistory</span>()</a>\r\n<a class="sourceLine" id="cb171-16" title="16"></a>\r\n<a class="sourceLine" id="cb171-17" title="17"><span class="co">// (2) ミドルウェアを構築</span></a>\r\n<a class="sourceLine" id="cb171-18" title="18"><span class="kw">const</span> middleware <span class="op">=</span> <span class="at">routerMiddleware</span>(history)</a>\r\n<a class="sourceLine" id="cb171-19" title="19"></a>\r\n<a class="sourceLine" id="cb171-20" title="20"><span class="co">// (3) storeの生成</span></a>\r\n<a class="sourceLine" id="cb171-21" title="21"><span class="co">//      ・Reducerを指定します。router キーに routerReducer を指定します。</span></a>\r\n<a class="sourceLine" id="cb171-22" title="22"><span class="co">//      ・構築したミドルウェアを適用します。</span></a>\r\n<a class="sourceLine" id="cb171-23" title="23"><span class="kw">const</span> store <span class="op">=</span> <span class="at">createStore</span>(</a>\r\n<a class="sourceLine" id="cb171-24" title="24">  <span class="at">combineReducers</span>(<span class="op">{</span></a>\r\n<a class="sourceLine" id="cb171-25" title="25">    ...<span class="at">reducers</span><span class="op">,</span></a>\r\n<a class="sourceLine" id="cb171-26" title="26">    <span class="dt">router</span><span class="op">:</span> routerReducer</a>\r\n<a class="sourceLine" id="cb171-27" title="27">  <span class="op">}</span>)<span class="op">,</span></a>\r\n<a class="sourceLine" id="cb171-28" title="28">  <span class="at">applyMiddleware</span>(middleware)</a>\r\n<a class="sourceLine" id="cb171-29" title="29">)</a>\r\n<a class="sourceLine" id="cb171-30" title="30"></a>\r\n<a class="sourceLine" id="cb171-31" title="31"><span class="co">// これでどこからでもナビゲーションのアクションを送信できます。</span></a>\r\n<a class="sourceLine" id="cb171-32" title="32"><span class="co">// store.dispatch(push(&#39;/foo&#39;))</span></a>\r\n<a class="sourceLine" id="cb171-33" title="33"></a>\r\n<a class="sourceLine" id="cb171-34" title="34"><span class="va">ReactDOM</span>.<span class="at">render</span>(</a>\r\n<a class="sourceLine" id="cb171-35" title="35">  <span class="op">&lt;</span>Provider store<span class="op">={</span>store<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb171-36" title="36">    <span class="op">{</span> <span class="co">/* ConnectedRouter は Provider コンポーネントに store を自動で使います */</span> <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb171-37" title="37">    <span class="op">&lt;</span>ConnectedRouter history<span class="op">={</span>history<span class="op">}&gt;</span></a>\r\n<a class="sourceLine" id="cb171-38" title="38">      <span class="op">&lt;</span>div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb171-39" title="39">        <span class="op">&lt;</span>Route exact path<span class="op">=</span><span class="st">&quot;/&quot;</span> component<span class="op">={</span>Home<span class="op">}</span>/&gt;</a>\r\n<a class="sourceLine" id="cb171-40" title="40">        <span class="op">&lt;</span>Route path<span class="op">=</span><span class="st">&quot;/about&quot;</span> component<span class="op">={</span>About<span class="op">}</span>/&gt;</a>\r\n<a class="sourceLine" id="cb171-41" title="41">        <span class="op">&lt;</span>Route path<span class="op">=</span><span class="st">&quot;/topics&quot;</span> component<span class="op">={</span>Topics<span class="op">}</span>/&gt;</a>\r\n<a class="sourceLine" id="cb171-42" title="42">      &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb171-43" title="43">    &lt;/ConnectedRouter<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb171-44" title="44">  &lt;/Provider<span class="op">&gt;,</span></a>\r\n<a class="sourceLine" id="cb171-45" title="45">  <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;root&#39;</span>)</a>\r\n<a class="sourceLine" id="cb171-46" title="46">)</a></code></pre></div>\r\n<h2 id="head要素内の各要素を書き換える">head要素内の各要素を書き換える</h2>\r\n<p>React Helmet パッケージを使います。</p>\r\n<h3 id="実施環境-1">実施環境</h3>\r\n<ul>\r\n<li>react-helmet 5.2.0</li>\r\n</ul>\r\n<h3 id="インストール-4">インストール</h3>\r\n<pre><code>&gt; npm install --save react-helmet\r\n</code></pre>\r\n<h3 id="使い方-1">使い方</h3>\r\n<ul>\r\n<li><code>react-helmet</code>パッケージをインポートします。</li>\r\n<li><code>Helmet</code>コンポーネントの子要素に書き換える要素を指定します。</li>\r\n</ul>\r\n<div class="sourceCode" id="cb173"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb173-1" title="1"><span class="im">import</span> React <span class="im">from</span> <span class="st">&quot;react&quot;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb173-2" title="2"><span class="im">import</span> <span class="op">{</span>Helmet<span class="op">}</span> <span class="im">from</span> <span class="st">&quot;react-helmet&quot;</span><span class="op">;</span></a>\r\n<a class="sourceLine" id="cb173-3" title="3"></a>\r\n<a class="sourceLine" id="cb173-4" title="4"><span class="kw">class</span> Application <span class="kw">extends</span> <span class="va">React</span>.<span class="at">Component</span> <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb173-5" title="5">  <span class="at">render</span> () <span class="op">{</span></a>\r\n<a class="sourceLine" id="cb173-6" title="6">    <span class="cf">return</span> (</a>\r\n<a class="sourceLine" id="cb173-7" title="7">        <span class="op">&lt;</span>div className<span class="op">=</span><span class="st">&quot;application&quot;</span><span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb173-8" title="8">            <span class="op">&lt;</span>Helmet<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb173-9" title="9">                <span class="op">&lt;</span>meta charSet<span class="op">=</span><span class="st">&quot;utf-8&quot;</span> /&gt;</a>\r\n<a class="sourceLine" id="cb173-10" title="10">                <span class="op">&lt;</span>title<span class="op">&gt;</span>My Title&lt;/title<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb173-11" title="11">                <span class="op">&lt;</span>link rel<span class="op">=</span><span class="st">&quot;canonical&quot;</span> href<span class="op">=</span><span class="st">&quot;http://mysite.com/example&quot;</span> /&gt;</a>\r\n<a class="sourceLine" id="cb173-12" title="12">            &lt;/Helmet<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb173-13" title="13">            ...</a>\r\n<a class="sourceLine" id="cb173-14" title="14">        &lt;/div<span class="op">&gt;</span></a>\r\n<a class="sourceLine" id="cb173-15" title="15">    )<span class="op">;</span></a>\r\n<a class="sourceLine" id="cb173-16" title="16">  <span class="op">}</span></a>\r\n<a class="sourceLine" id="cb173-17" title="17"><span class="op">};</span></a></code></pre></div>\r\n'):"3rd"===p&&(l.datePublished="2019-01-21T07:04+09:00",l.title="[CSS3] ボックスに影をつける box-shadow プロパティ",l.body="<h2>概要</h2><p><code>box-shadow</code>プロパティは、ボックスに1つまたは複数の影をつけるときに使います。<code>box-shadow</code>プロパティでは、たとえば以下のように影を指定します。</p><h2>コードサンプル</h2><p><code>box-shadow: 10px 10px;</code></p><h3>補足説明</h3><p>影は２～４つの長さの値で定義されますが、任意で色、insetキーワードを指定することもできます。 insetキーワードを付けると、影がボックスの外側ではなく内側につくようになります。 長さの指定を省略すると0となり、色の指定を省略するとユーザーエージェントが選んだ色になります。 複数の影を指定する場合には、カンマ（ , ）区切りで影のリストを複数指定します。</p><p>影を定義する指定内容は、以下のように解釈されます。</p><ul><li>•１番目の長さの値は、水平方向の影のオフセット距離です。正の値を指定すると右へ、負の値を指定すると左へ影が移動します。</li><li>•２番目の長さの値は、垂直方向の影のオフセット距離です。正の値を指定すると下へ、負の値を指定すると上へ影が移動します。</li><li>：</li></ul>"),s.abrupt("return",e);case 7:case"end":return s.stop()}},s,this)}));return function(a){return s.apply(this,arguments)}}(),a.default=C}},[[239,1,0]]]);